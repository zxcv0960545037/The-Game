package game1;


import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.beans.PropertyVetoException;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.sound.sampled.*;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
//import org.apache.commons.io.IOUtils;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.Document;


class GameUI extends JFrame{	
	static int width,height;
	static Image cursorimg=null,startscreen=null,controlimg=null;
	static Cursor cursor;
	GameUI(int a,int b){	
		super();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		width=a;
		height=b;
		
		String s = "/BeginScreenImage/cursor.png";
		String s1 = "/BeginScreenImage/Book.png";
		String s2 = "/BeginScreenImage/controlimg.jpg";
		String s3 = "/InterfaceImage/icon.png";
		URL url = getClass().getResource(s);
		URL ur2 = getClass().getResource(s1);
		URL ur3 = getClass().getResource(s2);
		URL ur4 = getClass().getResource(s3);
		try {
			cursorimg=ImageIO.read(url);
			startscreen=ImageIO.read(ur2);
			controlimg=ImageIO.read(ur3);
			this.setIconImage(ImageIO.read(ur4));
		} catch (IOException e) {
			e.printStackTrace();
		}
		cursor=Toolkit.getDefaultToolkit().createCustomCursor(cursorimg,new Point(0,0),"");
		Dimension ScreenSize=Toolkit.getDefaultToolkit().getScreenSize();
		this.setBounds((int)ScreenSize.getWidth()/2-width/2, (int)ScreenSize.getHeight()/2-height/2, width, height);
		this.setTitle("妖都傳說");
		this.setLayout(new BorderLayout());
		
		this.setVisible(true);
		this.setResizable(false);
		this.setCursor(cursor);	
		PanelListenner.setgameui(this);
		Model basis=new Model(this);
	}
}

class Model extends JPanel{
	public Model(GameUI t){
		super();
		t.add(this);
		this.setLayout(new CardLayout());
		CardLayout cardLayout = (CardLayout)this.getLayout();
		//Control Scontrol = new Control();
		CreatorModel creatormodel = new CreatorModel(this,cardLayout);
		Begin begin = new Begin(this,cardLayout);
		Design design = new Design(cardLayout,this,t);
		Playing playing = new Playing();
		EyeCatchImage eyecatchimage = new EyeCatchImage();
		PanelListenner.setplaying(playing);
		begin.setplaying(playing);
		this.add(begin,"c1"); //標題畫面
		this.add(creatormodel,"c1-2");
		this.add(design,"c2"); //設計畫面
		this.add(playing,"c3");	//遊戲畫面
		this.add(eyecatchimage, "c0");
		this.setPreferredSize(new Dimension(1200,768));
		t.pack();
		t.revalidate();

		
	}
}

class CreatorModel extends JPanel{
	static Image creatorbk;
	static Image reimage[] = new Image[2];
	CreatorModel(Model basis,CardLayout cardLayout){
		super();
		this.setLayout(null);
		JLabel background = new JLabel();
		JButton returnbtn = new JButton();

		String s[] = new String[2];
		URL url[] = new URL[2]; 
		
		s[0] = "/BeginScreenImage/creator.png";
		url[0] = getClass().getResource(s[0]);
		
		try {
			creatorbk=ImageIO.read(url[0]);
		} catch (IOException e2) {
			e2.printStackTrace();
		}
	
		
		s[0] = "/BeginScreenImage/8-1.png";
		s[1] = "/BeginScreenImage/8-2.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		try {
			reimage[0]=ImageIO.read(url[0]);
			reimage[1]=ImageIO.read(url[1]);
		} catch (IOException e2) {
			e2.printStackTrace();
		}
	/*
		try {
			creatorbk=ImageIO.read(url);
		} catch (IOException e2) {
			e2.printStackTrace();
		}
		*/
		returnbtn.setContentAreaFilled(false);
		returnbtn.setBorderPainted(false);

		returnbtn.setIcon(new ImageIcon(reimage[0]));
		
		returnbtn.setBounds(0, 520, 350, 248);
		
		background.add(returnbtn);
		

		background.setLayout(null);
		background.setIcon(new ImageIcon(creatorbk));
		background.setBounds(0, 0, GameUI.width, GameUI.height);
		
		
		this.add(background);
		
		returnbtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) 
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
				cardLayout.show(basis, "c1");
			}
			
			public void mouseEntered(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(0);
				se.start();
				returnbtn.setIcon(new ImageIcon(reimage[1]));
				//se.start();
				//se.stop();
			}
			
			public void mouseExited(MouseEvent e)
			{
				returnbtn.setIcon(new ImageIcon(reimage[0]));
				//se.destroy();
			}
		});
		
	}
}

class Begin extends JPanel{
	Playing playing;
	static Image stimage[] = new Image[2];
	static Image eximage[] = new Image[2];
	static Image creatorimage[] = new Image[2];
	//static Image startimage = null;
	//static Image exitimage = null;
	//static Image pstartimage = null;
	//static Image pexitimage = null;

	Begin(Model basis,CardLayout cardLayout){
		super();
		this.setLayout(null);
		JLabel background = new JLabel();
		//JButton tostart = new JButton(); 
		JButton startbtn = new JButton();
		JButton exitbtn = new JButton();
		JButton creatorbtn = new JButton();
		JLabel logo = new JLabel();
		String s[] = new String[2];
		URL url[] = new URL[2];
		String s1;
		URL ur1;
		
		s[0] = "/BeginScreenImage/5-1.png";
		s[1] = "/BeginScreenImage/5-2.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		try {
			stimage[0]=ImageIO.read(url[0]);
			stimage[1]=ImageIO.read(url[1]);
		} catch (IOException e2) {
			e2.printStackTrace();
		}
		
		s[0] = "/BeginScreenImage/6-1.png";
		s[1] = "/BeginScreenImage/6-2.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		try {
			eximage[0]=ImageIO.read(url[0]);
			eximage[1]=ImageIO.read(url[1]);
		} catch (IOException e2) {
			e2.printStackTrace();
		}

		s[0] = "/BeginScreenImage/7-1.png";
		s[1] = "/BeginScreenImage/7-2.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		try {
			creatorimage[0]=ImageIO.read(url[0]);
			creatorimage[1]=ImageIO.read(url[1]);
		} catch (IOException e2) {
			e2.printStackTrace();
		}
	
		/*
		String s1 = "/BeginScreenImage/st.png";
		String s2 = "/BeginScreenImage/stp.png";
		String s3 = "/BeginScreenImage/hotk.png";
		String s4 = "/BeginScreenImage/hotkp.png";
		String s5 = "/BeginScreenImage/ex.png";
		String s6 = "/BeginScreenImage/exp.png";
		URL ur1 = getClass().getResource(s1);
		URL ur2 = getClass().getResource(s2);
		URL ur3 = getClass().getResource(s3);
		URL ur4 = getClass().getResource(s4);
		URL ur5 = getClass().getResource(s5);
		URL ur6 = getClass().getResource(s6);
		
		try {
			startimage = ImageIO.read(ur1);
			pstartimage = ImageIO.read(ur2);
			//controlimage = ImageIO.read(ur3);
			//pcontrolimage = ImageIO.read(ur4);
			exitimage = ImageIO.read(ur5);
			pexitimage = ImageIO.read(ur6);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		*/
		s1 = "/BeginScreenImage/LOGO3.png";
		ur1 = getClass().getResource(s1);
		try {
			logo.setIcon(new ImageIcon(ImageIO.read(ur1)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		logo.setBounds(130, 50, 1000, 219);
		background.add(logo);
		//Image stimg[] = new Image[3]; 
		//Icon  icon[] = new Icon[3];
		BGMmusicbox music = new BGMmusicbox(1);
		music.start();
		Clip clip;
		clip = BGMmusicbox.GetNowClip();
		FloatControl volumecontrol = (FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);
		volumecontrol.setValue(-10);
		
		startbtn.setContentAreaFilled(false);
		startbtn.setBorderPainted(false);
		exitbtn.setContentAreaFilled(false);
		exitbtn.setBorderPainted(false);
		creatorbtn.setContentAreaFilled(false);
		creatorbtn.setBorderPainted(false);
		
		
		startbtn.setIcon(new ImageIcon(stimage[0]));
	
		exitbtn.setIcon(new ImageIcon(eximage[0]));
		
		creatorbtn.setIcon(new ImageIcon(creatorimage[0]));
		
		startbtn.setBounds(447, 300, 306, 77);	
		
		//exitbtn.setBounds(445, 470, 309, 78);
		
		//creatorbtn.setBounds(480, 400, 239, 78);
		
		exitbtn.setBounds(445, 400, 309, 78);
		
		creatorbtn.setBounds(480, 490, 239, 77);
		
		background.add(startbtn);
		background.add(creatorbtn);
		background.add(exitbtn);
		
		
		background.setLayout(null);
		background.setIcon(new ImageIcon(GameUI.startscreen));
		background.setBounds(0, 0, GameUI.width, GameUI.height);
/*
		tp1.setLayout(null);
		tp1.setIcon(new ImageIcon(GameUI.startscreen));
		tp1.setBounds(0, 0, GameUI.width, GameUI.height);
		tp1.add(tostart);
		tp1.add(controlpanel);
		
		controlpanel.setOpaque(true);
		controlpanel.setLayout(null);;
		controlpanel.setIcon(new ImageIcon(GameUI.controlimg));
		controlpanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.white, 1), BorderFactory.createEtchedBorder()));
		controlpanel.setBounds(GameUI.width/2-240,GameUI.height/2-270,480,540);
	*/
		this.add(background);
		//Scontrol.add(tp1);
		
		//System.out.println("GGGG");
		startbtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) 
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
				Design.setplaying(playing);
				cardLayout.show(basis, "c2");
			}
			
			public void mouseEntered(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(0);
				se.start();
				startbtn.setIcon(new ImageIcon(stimage[1]));
				//se.start();
				//se.stop();
			}
			
			public void mouseExited(MouseEvent e)
			{
				startbtn.setIcon(new ImageIcon(stimage[0]));
				//se.destroy();
			}
		});
		/*
		controlbtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) 
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
				cardLayout.show(basis, "c1-2-1");
			}
			
			public void mouseEntered(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(0);
				se.start();
				controlbtn.setIcon(new ImageIcon(pcontrolimage));
			}
			
			public void mouseExited(MouseEvent e)
			{
				controlbtn.setIcon(new ImageIcon(controlimage));
			}
		});
*/
		exitbtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) 
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
				System.exit(0);
			}
			
			public void mouseEntered(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(0);
				se.start();
				exitbtn.setIcon(new ImageIcon(eximage[1]));
			}
			
			public void mouseExited(MouseEvent e)
			{
				exitbtn.setIcon(new ImageIcon(eximage[0]));
			}
		});
		
		creatorbtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) 
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
				cardLayout.show(basis, "c1-2");
			}
			
			public void mouseEntered(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(0);
				se.start();
				creatorbtn.setIcon(new ImageIcon(creatorimage[1]));
			}
			
			public void mouseExited(MouseEvent e)
			{
				creatorbtn.setIcon(new ImageIcon(creatorimage[0]));
			}
		});

		/*
		stlist.addMouseListener(new MouseAdapter() {
			int preindex=0;
			
			public void mouseClicked(MouseEvent e) {
				int index=stlist.getSelectedIndex();
				if(index==preindex)
				{
					//stlist.setSelectionBackground(Color.red);
					switch(index)
					{
						case 0:
							Design.setplaying(playing);
							cardLayout.show(basis, "c2");
							break;
						case 1:
							cardLayout.show(basis, "c1-2-1");
							break;
						case 2:
							System.exit(0);
					}
				}
				
				preindex=index;
			}
		});
		*/
		/*
		tostart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				cardLayout.show(basis, "c1");
			}
		});
		*/
	}
	
	public void setplaying(Playing t) {
		playing=t;
	}
}



class Design extends JPanel{
	static Playing playing;
	static boolean startgame = false;
	//static ProgressbarUpdate progressbarupdate;
	boolean iniwindow = false;
	Image ConGameIcon[] = new Image[3];
	Image ReturnTitle[] = new Image[3];

	Design(CardLayout cardLayout,Model basis,GameUI t){
		super();
		this.setLayout(null);
		JLabel interfacebg = new JLabel();
		JButton congame = new JButton();
		Toolbarbase toolbarbase = new Toolbarbase();
	
		ModeModel modemodel = new ModeModel();
		SaveListBase savelistbase = new SaveListBase();
		StateTable statetable = new StateTable(t);
		FunctionalBlock functionalblock = new FunctionalBlock();
		MessageWindow messagewindow = new MessageWindow(t);
		JButton returnstart = new JButton("");
		
		String s= "/InterfaceImage/interface15.png";
		URL url = getClass().getResource(s);
		ImageIcon interfaceimage = new ImageIcon(url);
		
		s = "/DesignIcon/start1.png";
		
		url = getClass().getResource(s);	
		try {
			ConGameIcon[0]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/DesignIcon/start2.png";
		url = getClass().getResource(s);	
		try {
			ConGameIcon[1]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	
		s = "/DesignIcon/start3.png";
		url = getClass().getResource(s);	
		try {
			ConGameIcon[2]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		s = "/DesignIcon/return1.png";
		url = getClass().getResource(s);	
		try {
			ReturnTitle[0]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/DesignIcon/return2.png";
		url = getClass().getResource(s);	
		try {
			ReturnTitle[1]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/DesignIcon/return3.png";
		url = getClass().getResource(s);	
		try {
			ReturnTitle[2]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		congame.setIcon(new ImageIcon(ConGameIcon[0]));
		congame.setContentAreaFilled(false);
		congame.setBorderPainted(false);
		congame.setFocusPainted(false);
		toolbarbase.setBounds(811, 51, 380, 550);
	
		
		//statetable.setBorder(BorderFactory.createRaisedBevelBorder());
		statetable.setBounds(9, 139, 286, 630);
		functionalblock.setBounds(811, 3, 380, 50);
		
		//modemodel.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
		modemodel.setBounds(307, 10, 485, 625);
		savelistbase.setBounds(314, 642, 480, 120);
		//charactertext.setBounds(480, 80, 120, 528);
		
		returnstart.setBounds(8, 18, 285, 105);
		returnstart.setContentAreaFilled(false);
		returnstart.setBorderPainted(false);
		returnstart.setFocusPainted(false);
		returnstart.setIcon(new ImageIcon(ReturnTitle[0]));
		congame.setBounds(811, 607, 380, 150);
		congame.setContentAreaFilled(false);
		
		interfacebg.setIcon(interfaceimage);
		
		interfacebg.setBounds(0, 0, 1200, 768);
		
		this.add(interfacebg);
		interfacebg.add(savelistbase);
		interfacebg.add(toolbarbase);
		interfacebg.add(returnstart);
		//this.add(displaycharacter);
		interfacebg.add(congame);
		interfacebg.add(functionalblock);
		interfacebg.add(modemodel);
		//this.add(charactertext);
		interfacebg.add(statetable);
		ProgressbarUpdate.setbasis(basis);
		ProgressbarUpdate.setmodelcardlayout(cardLayout);
		
		congame.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				if((StateTable.createmode==0 && StateTable.mate==0 && SelectModel.nowboyindex==-1) || (StateTable.createmode==0 && StateTable.mate==1 && SelectModel.nowgirlindex==-1))
				{
					if(iniwindow==false)
					{
						//System.out.println("hello");
						messagewindow.pack();
						messagewindow.revalidate();
						messagewindow.setLocationRelativeTo(null);
						iniwindow=true;
					}
					messagewindow.setVisible(true);
				}
				else
				{
					DesignDecision design = new DesignDecision(t);
					if(startgame==true)
					{
						cardLayout.show(basis, "c0");
						ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
						progressbarupdate.start();
					}
				}
			}
		});
		
		congame.addMouseListener(new MouseAdapter(){ 
			public void mouseClicked(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
			}
			
			public void mouseEntered(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(0);
				se.start();
				congame.setIcon(new ImageIcon(ConGameIcon[1]));
            }

			public void mouseExited(MouseEvent e)
			{
				congame.setIcon(new ImageIcon(ConGameIcon[0]));
            }

			public void mousePressed(MouseEvent e)
			{
               congame.setIcon(new ImageIcon(ConGameIcon[2]));
			}
			
			public void mouseReleased(MouseEvent e)
			{
			   congame.setIcon(new ImageIcon(ConGameIcon[1]));
			}
		}); 

		
		returnstart.addMouseListener(new MouseAdapter(){ 
			public void mouseClicked(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
			}
			
			public void mouseEntered(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(0);
				se.start();
				returnstart.setIcon(new ImageIcon(ReturnTitle[1]));
            }
			
			public void mouseExited(MouseEvent e)
			{
				returnstart.setIcon(new ImageIcon(ReturnTitle[0]));
            }

			public void mousePressed(MouseEvent e)
			{
				returnstart.setIcon(new ImageIcon(ReturnTitle[2]));
			}
			
			public void mouseReleased(MouseEvent e)
			{
				returnstart.setIcon(new ImageIcon(ReturnTitle[1]));
			}
		}); 
	
		returnstart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				cardLayout.show(basis, "c1");
			}
		});

	}
	
	public static void setplaying(Playing t) {
		playing=t;
	}
	
}

class DesignDecision extends JDialog{
	static Image dimage[] = new Image[2];
	static Image cimage[] = new Image[2];
	DesignDecision(GameUI t){
		super(t,"確認視窗",true);
		JPanel content = new JPanel();
		JLabel selectimage = new JLabel();
		FinalPlayerImage finalplayerimage = new FinalPlayerImage();
		InitialPlayerInformation initialplayerinformation = new InitialPlayerInformation();
		OkButton okbutton = new OkButton(this);
		NoButton nobutton = new NoButton(this);
		//JButton okbtn = new JButton("確認");
		//JButton nobtn = new JButton("取消");
		content.setPreferredSize(new Dimension(700,600));
		content.setLayout(null);
		Dimension ScreenSize=Toolkit.getDefaultToolkit().getScreenSize();
		//this.setUndecorated(true);
		JLabel background = new JLabel();
		String s = "/Decision/bk.png";
		URL url = getClass().getResource(s);
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/Decision/0-1.png";
		url = getClass().getResource(s);
		try {
			dimage[0]=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/Decision/1-1.png";
		url = getClass().getResource(s);
		try {
			dimage[1]=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/Decision/0-2.png";
		url = getClass().getResource(s);
		try {
			cimage[0]=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/Decision/1-2.png";
		url = getClass().getResource(s);
		try {
			cimage[1]=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}

		
		finalplayerimage.setBounds(0, 0, 400, 600);
		
		background.setBounds(400, 0, 300, 600);
		
		initialplayerinformation.setOpaque(false);
		initialplayerinformation.setBounds(0, 0, 300, 540);
		okbutton.setBounds(25, 545, 100, 50);
		okbutton.setContentAreaFilled(false);
		okbutton.setBorderPainted(false);
		okbutton.setFocusPainted(false);
		okbutton.setFocusable(false);
		okbutton.setIcon(new ImageIcon(dimage[0]));
		
		nobutton.setBounds(175, 545, 100, 50);
		nobutton.setContentAreaFilled(false);
		nobutton.setBorderPainted(false);
		nobutton.setFocusPainted(false);
		nobutton.setFocusable(false);
		nobutton.setIcon(new ImageIcon(cimage[0]));
		
		background.add(initialplayerinformation);
		background.add(okbutton);
		background.add(nobutton);
		
		//content.add(okbutton);
		//content.add(nobutton);
		content.add(background);
		content.add(finalplayerimage);
		//content.add(initialplayerinformation);
		

		this.setCursor(GameUI.cursor);
		this.setResizable(false);
		this.setLocation((int)ScreenSize.getWidth()/2-350, (int)ScreenSize.getHeight()/2-300);
		this.add(content);
		this.pack();
		this.setVisible(true);
		this.revalidate();
		
		
		

	}
}

class FinalPlayerImage extends JLabel{
	FinalPlayerImage(){
		super();
		String s = null;
		//BufferedImage image = null;
		if(StateTable.createmode==0)
		{
			if(StateTable.mate==0)
			{
				s = "/characterboyImage/" + (SelectModel.nowboyindex+1) + "-1.jpg";
			}
			else if(StateTable.mate==1)
			{
				s = "/charactergirlImage/" + (SelectModel.nowgirlindex+1) + "-1.jpg";				
			}
		}
		else if(StateTable.createmode==1)
		{
			if(StateTable.mate==0)
			{
				s = "/CustomBoyImage/" + ShowCustomModel.bfaceindex + "-" + ShowCustomModel.bhairindex + "-" + ShowCustomModel.btopindex + "-" + ShowCustomModel.bhatindex + ".jpg";
			}
			else if(StateTable.mate==1)
			{
				s = "/CustomGirlImage/" + ShowCustomModel.gfaceindex + "-" + ShowCustomModel.ghairindex + "-" + ShowCustomModel.gtopindex + "-" + ShowCustomModel.ghatindex + ".jpg";
			}			
		}
		URL url = getClass().getResource(s);
		try {
			int stx=0;
			int sty=0;
			if(StateTable.createmode==0)
			{
				if(StateTable.mate==0)
				{
					stx=130;
					sty=70;		
				}
				else if(StateTable.mate==1)
				{
					stx=130;
					sty=70;
				}
			}
			else if(StateTable.createmode==1)
			{
				if(StateTable.mate==0)
				{
					//System.out.println("GGGG");
					stx=130;
					sty=75;
				}
				else if(StateTable.mate==1)
				{
					stx=125;
					sty=70;
				}
			}
			PlayerInformationValue.setbighead(ImageIO.read(url).getSubimage(stx, sty, 180, 180));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		try {
			this.setIcon(new ImageIcon(ImageIO.read(url)));
			ImageShowArea.img=ImageIO.read(url);
		} catch (IOException e) {
			
			e.printStackTrace();
		}

	}
}

class InitialPlayerInformation extends JLabel{
	static JTextField nameinfo = new JTextField();
	InitialPlayerInformation(){
		super();
		this.setLayout(null);
		
		String s1 = "/Font/kaiu.ttf";
		//Font font=null;
		
		//URL url = getClass().getResource(s1);
		/*
		try {
			font = Font.createFont(0, new File(url.toURI())).deriveFont(0,40);
            //GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            //ge.registerFont(font);
		} catch (FontFormatException e) {
		
			e.printStackTrace();
		} catch (IOException e) {
		
			e.printStackTrace();
		} catch (URISyntaxException e) {
	
			e.printStackTrace();
		}
		*/
		//font.deriveFont(40.0f);
		JTextArea textinfo = new JTextArea();
		JTextArea posttextinfo = new JTextArea();
		//JTextField nameinfo = new JTextField();
		String s = "形象種類：";
		textinfo.setOpaque(false);
		posttextinfo.setOpaque(false);
		if(StateTable.createmode==0)
		{
			s = s + "自選\n";
		}
		else if(StateTable.createmode==1)
		{
			s = s + "自訂\n";
		}
		s = s + "性別：";
		if(StateTable.mate==0)
		{
			s = s + "男\n";
		}
		else if(StateTable.mate==1)
		{
			s = s + "女\n";
		}
		s = s + "等級： Lv 1\n";
		s = s + "生命值： 500\n";
		s = s + "魔力值： 200\n";
		s = s + "疲勞值： 30\n";
		s = s + "起始地： ？？？\n";
		s = s + "您的名字為.....\n";
		textinfo.setFont(new Font("DFKai-SB",0,40));
		//textinfo.setFont(font);
		textinfo.setBounds(0, 0, 300, 420);
		textinfo.setEditable(false);
		nameinfo.setFont(new Font("標楷體",0,40));
		nameinfo.setBounds(0, 380, 300, 40);
		

		posttextinfo.setForeground(new Color(255,18,18));
		//posttextinfo.setFont(font);
		posttextinfo.setFont(new Font("標楷體",0,40));
		posttextinfo.setBounds(0, 420, 300, 120);
		posttextinfo.setEditable(false);

		textinfo.setText(s);
		textinfo.add(nameinfo);
		this.add(posttextinfo);
		this.add(textinfo);
		
		OkButton.setposttextinfo(posttextinfo);
	}
	

	
}


class OkButton extends JButton{
	static JTextArea posttextinfo;
	int x=0;
	OkButton(JDialog ts){
		super();
		
		/*
		this.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				

			}
		});
		*/
		this.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{
				int c=0;
				for(int i=0;i<InitialPlayerInformation.nameinfo.getText().length();i++)
				{
					if((InitialPlayerInformation.nameinfo.getText()).charAt(i)>256)
					c=c+2;
					else
					c++;
				}
				if(c<=12 && c>0)
				{
					Playing.playername = InitialPlayerInformation.nameinfo.getText();
					InformationPowerUpdate.playernamearea.setText("Lv." + Playing.playerlevel + " " + Playing.playername);
					InformationPowerUpdate.start=true;
					Design.startgame = true;
					
					
					
					JLabel t = new JLabel();
					String s1 = "/ListIcon/t1.png";
					URL url = getClass().getResource(s1);
					try {
						t.setIcon(new ImageIcon(ImageIO.read(url)));
					} catch (IOException e1) {
						e1.printStackTrace();
					}
					PanelListenner.op=false;
					
					/*
					t.setBounds(0, 0, 1200, 6800);
					PanelListenner.w.add(t,0);
					
					ProgressbarUpdate.index=3;
					PanelListenner.w.removeKeyListener(SkillImage.plt);
					
					new Thread(new Runnable() {
						public void run() {
							while(true)
							{
								PanelListenner.playerinformationvalue.setVisible(false);
								PanelListenner.experiencevalue.setVisible(false);
								PanelListenner.skilldisplayfield.setVisible(false);
								PanelListenner.skilldisplaysubfield.setVisible(false);
								PanelListenner.playersubability.setVisible(false);
								PanelListenner.functionlist.setVisible(false);
								PanelListenner.tasksystem.setVisible(false);
								PanelListenner.informationwindow.setVisible(false);
								PanelListenner.minimap.setVisible(false);
								PanelListenner.nowmapinfo.setVisible(false);
								PanelListenner.playerabilitysystem.setVisible(false);
								PanelListenner.playerequipmentinfo.setVisible(false);
								PanelListenner.skillpage.setVisible(false);
								PanelListenner.creatorlist.setVisible(false);
								PanelListenner.inventory.setVisible(false);
								PanelListenner.settinginfo.setVisible(false);
								PanelListenner.imageshowarea.setVisible(false);		
								PanelListenner.w.remove(PanelListenner.npcimagearea);
								PanelListenner.w.remove(PanelListenner.talkwindow);
							try {
								Thread.sleep(10);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							x = x-1;
							t.setBounds(0, x, 1200, 6800);
							 if(x==-6012)
							 {
									try {
										Thread.sleep(5000);
									} catch (InterruptedException e) {
										e.printStackTrace();
									}
									PanelListenner.w.remove(t);
									PanelListenner.playerinformationvalue.setVisible(true);
									PanelListenner.experiencevalue.setVisible(true);
									PanelListenner.skilldisplayfield.setVisible(true);
									PanelListenner.skilldisplaysubfield.setVisible(true);
									PanelListenner.playersubability.setVisible(true);
									PanelListenner.functionlist.setVisible(true);
									PanelListenner.tasksystem.setVisible(true);
									PanelListenner.informationwindow.setVisible(true);
									PanelListenner.minimap.setVisible(true);
									PanelListenner.nowmapinfo.setVisible(true);
									PanelListenner.playerabilitysystem.setVisible(true);
									PanelListenner.playerequipmentinfo.setVisible(true);
									PanelListenner.skillpage.setVisible(true);
									PanelListenner.creatorlist.setVisible(true);
									PanelListenner.inventory.setVisible(true);
									PanelListenner.settinginfo.setVisible(true);
									PanelListenner.imageshowarea.setVisible(true);	
									//PanelListenner.w.removeKeyListener(this);
									PanelListenner.w.addKeyListener(SkillImage.plt);
									PanelListenner.w.remove(PanelListenner.npcimagearea);
									PanelListenner.w.remove(PanelListenner.talkwindow);
									ProgressbarUpdate.index=2;
									break;
							 }
							}
						}
					}).start();
				*/	
				//}
					/*
				PanelListenner.playerinformationvalue.setVisible(true);
				PanelListenner.experiencevalue.setVisible(true);
				PanelListenner.skilldisplayfield.setVisible(true);
				PanelListenner.skilldisplaysubfield.setVisible(true);
				PanelListenner.playersubability.setVisible(true);
				PanelListenner.functionlist.setVisible(true);
				PanelListenner.tasksystem.setVisible(true);
				PanelListenner.informationwindow.setVisible(true);
				PanelListenner.minimap.setVisible(true);
				PanelListenner.nowmapinfo.setVisible(true);
				PanelListenner.playerabilitysystem.setVisible(true);
				PanelListenner.playerequipmentinfo.setVisible(true);
				PanelListenner.skillpage.setVisible(true);
				PanelListenner.creatorlist.setVisible(true);
				PanelListenner.inventory.setVisible(true);
				PanelListenner.settinginfo.setVisible(true);
				PanelListenner.imageshowarea.setVisible(true);	
				PanelListenner.w.removeKeyListener(PanelListenner.pltalk);
				PanelListenner.w.addKeyListener(SkillImage.plt);
				PanelListenner.w.remove(PanelListenner.npcimagearea);
				PanelListenner.w.remove(PanelListenner.talkwindow);
*/
					
					/*
					BGMmusicbox.clip.close();
					//BGMmusicbox.clip.
					BGMmusicbox music = new BGMmusicbox(2);
					music.start();
					Clip clip;
					clip = BGMmusicbox.GetNowClip();
					FloatControl volumecontrol = (FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);
					volumecontrol.setValue(BGMmusicbox.bgmvalue);
*/
					ts.dispose();
				}
				else if(c==0)
				{
					posttextinfo.setText("名字為空！");
				}
				else if(c>12)
				{
					posttextinfo.setText("長度超過限制!");
				}

			}
			public void mousePressed(MouseEvent e)
			{
				OkButton.this.setIcon(new ImageIcon(DesignDecision.dimage[1]));
			}
			public void mouseReleased(MouseEvent e)
			{
				OkButton.this.setIcon(new ImageIcon(DesignDecision.dimage[0]));
			}
		});
	}
	
	public static void setposttextinfo(JTextArea t) {
		posttextinfo=t;
	}
}

class NoButton extends JButton{
	NoButton(JDialog t){
		super();
		
		/*
		this.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				t.dispose();
			}
		});
		*/
		this.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{
				t.dispose();
			}
			public void mousePressed(MouseEvent e)
			{
				NoButton.this.setIcon(new ImageIcon(DesignDecision.cimage[1]));
			}
			public void mouseReleased(MouseEvent e)
			{
				NoButton.this.setIcon(new ImageIcon(DesignDecision.cimage[0]));
			}
		});

	}
}

class EyeCatchImage extends JPanel{
	static int current = 0;
	static JProgressBar progressbar = new JProgressBar();
	EyeCatchImage(){
		super();
		this.setLayout(null);
		JLabel catchImage = new JLabel();
		//JProgressBar progressbar = new JProgressBar();
		String s = "/BeginScreenImage/BeginImage3.png";
		URL url = getClass().getResource(s);
		catchImage.setIcon(new ImageIcon(url));
		catchImage.setBounds(0, 0, 1200, 768);
		progressbar.setMinimum(0);
		progressbar.setMaximum(100);
		progressbar.setValue(current);
		progressbar.setStringPainted(true);
		progressbar.setBackground(Color.WHITE);
		progressbar.setForeground(new Color(61,181,233));
		progressbar.setBounds(200, 710, 800, 30);
		progressbar.setFont(new Font("標楷體",0,30));
		catchImage.add(progressbar);
		this.add(catchImage);
	}
}

class StateTable extends JPanel{
	static boolean iniwalkwindow = false;
	static boolean inivoicewindow = false;
	static boolean inimessagewindow = false;
	static CardLayout toolcardlayout;
	static Toolbarbase toolbarbase;
	static CardLayout modelcardlayout;
	static ModeModel modemodel;
	static CardLayout selectmodellayout;
	static SelectBaseModel selectbasemodel;
	static ShowSelectModel showselectmodel;
	static CustomModel custommodel;
	static CardLayout matecardlayout;
	static CustomBaseModel custombasemodel;
	static ShowCustomModel showcustommodel;
	static SaveListBase savelistbase;
	static CardLayout savelistcardLayout;
	static int mate=0;
	static int createmode=0;
	Image boyimg[] = new Image[2];
	Image girlimg[] = new Image[2];
	Image selectimg[] = new Image[2];
	Image customimg[] = new Image[2];
	Image LookWalk[] = new Image[3];
	Image createimg;
	Image mateimg;
	Image settingimg;
	GameUI t;
	StateTable(GameUI t){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		this.t=t;
		JLabel matetext = new JLabel();
		JLabel chartext = new JLabel();
		JToggleButton boyb = new JToggleButton();
		JToggleButton girlb = new JToggleButton();
		JButton voiceb = new JButton();
		JButton lookwalkimage = new JButton();
		JToggleButton select = new JToggleButton();
		JToggleButton custom = new JToggleButton();
		VoiceWindow voicewindow = new VoiceWindow(t,"音量控制",true);
		ShowWalkWindow showwalkwindow = new ShowWalkWindow();
		MessageWindow messagewindow = new MessageWindow(t);
		String s[] = new String[2];
		URL url[] = new URL[2];
		s[0] = "/DesignIcon/select1.png";
		url[0] = getClass().getResource(s[0]);
		s[1] = "/DesignIcon/select2.png";
		url[1] = getClass().getResource(s[1]);
		try {
			selectimg[0] = ImageIO.read(url[0]);
			selectimg[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		s[0] = "/DesignIcon/custom1.png";
		url[0] = getClass().getResource(s[0]);
		s[1] = "/DesignIcon/custom2.png";
		url[1] = getClass().getResource(s[1]);
		try {
			customimg[0] = ImageIO.read(url[0]);
			customimg[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		s[0] = "/DesignIcon/boy1.png";
		url[0] = getClass().getResource(s[0]);
		s[1] = "/DesignIcon/boy2.png";
		url[1] = getClass().getResource(s[1]);
		try {
			boyimg[0] = ImageIO.read(url[0]);
			boyimg[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		s[0] = "/DesignIcon/girl1.png";
		url[0] = getClass().getResource(s[0]);
		s[1] = "/DesignIcon/girl2.png";
		url[1] = getClass().getResource(s[1]);
		try {
			girlimg[0] = ImageIO.read(url[0]);
			girlimg[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s[0] = "/DesignIcon/walk1.png";
		url[0] = getClass().getResource(s[0]);	
		try {
			LookWalk[0]=ImageIO.read(url[0]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s[0] = "/DesignIcon/walk2.png";
		url[0] = getClass().getResource(s[0]);	
		try {
			LookWalk[1]=ImageIO.read(url[0]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s[0] = "/DesignIcon/walk3.png";
		url[0] = getClass().getResource(s[0]);	
		try {
			LookWalk[2]=ImageIO.read(url[0]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		s[0] = "/DesignIcon/create.png";
		url[0] = getClass().getResource(s[0]);	
		try {
			createimg=ImageIO.read(url[0]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	
		s[0] = "/DesignIcon/mate.png";
		url[0] = getClass().getResource(s[0]);	
		try {
			mateimg=ImageIO.read(url[0]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		s[0] = "/DesignIcon/voice.png";
		url[0] = getClass().getResource(s[0]);	
		try {
			settingimg=ImageIO.read(url[0]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		chartext.setBounds(0,0,282,80);
		//chartext.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		chartext.setIcon(new ImageIcon(createimg));
		select.setBounds(0, 80, 143, 40);
		//select.setContentAreaFilled(false);
		//select.setBackground(Color.RED);
		select.setSelected(true);
		select.setContentAreaFilled(false);
		select.setBorderPainted(false);
		select.setFocusPainted(false);

		
		custom.setBounds(140, 80, 143, 40);
		custom.setContentAreaFilled(false);
		custom.setBorderPainted(false);
		custom.setFocusPainted(false);


		select.setIcon(new ImageIcon(selectimg[1]));
		custom.setIcon(new ImageIcon(customimg[0]));

		//custom.setContentAreaFilled(false);

		
		matetext.setBounds(0,120,282,80);
		//matetext.setBorder(BorderFactory.createLineBorder(Color.black, 1));
		matetext.setIcon(new ImageIcon(mateimg));
		boyb.setBounds(0, 200, 143, 40);
		//boyb.setContentAreaFilled(false);
		boyb.setSelected(true);
		boyb.setContentAreaFilled(false);
		boyb.setBorderPainted(false);
		boyb.setFocusPainted(false);
		girlb.setBounds(140, 200, 143, 40);
		girlb.setContentAreaFilled(false);
		girlb.setBorderPainted(false);
		girlb.setFocusPainted(false);
		boyb.setIcon(new ImageIcon(boyimg[1]));
		girlb.setIcon(new ImageIcon(girlimg[0]));

		voiceb.setBounds(55, 245, 180, 120);
		voiceb.setContentAreaFilled(false);
		voiceb.setBorderPainted(false);
		voiceb.setFocusPainted(false);
		voiceb.setIcon(new ImageIcon(settingimg));
		
		lookwalkimage.setBounds(0, 390, 286, 225);
		lookwalkimage.setIcon(new ImageIcon(LookWalk[0]));
		lookwalkimage.setContentAreaFilled(false);
		lookwalkimage.setBorderPainted(false);
		lookwalkimage.setFocusPainted(false);


	
		
		this.add(voiceb);
		this.add(girlb);
		this.add(boyb);
		this.add(matetext);
		this.add(chartext);
		this.add(lookwalkimage);
		this.add(custom);
		this.add(select);
		
		select.addChangeListener(new ChangeListener() {
			
			public void stateChanged(ChangeEvent e) {
				if(select.isSelected())
				{
					custom.setSelected(false);
					select.setIcon(new ImageIcon(selectimg[1]));
					custom.setIcon(new ImageIcon(customimg[0]));

				}
				if(select.isSelected()==false && custom.isSelected()==false)
				{
					select.setSelected(true);
				}
				toolcardlayout.show(toolbarbase, "select");
				modelcardlayout.show(modemodel, "select");
				if(mate==0)
				{
					selectmodellayout.show(selectbasemodel, "boys");
					savelistcardLayout.show(savelistbase, "SB");
					showselectmodel.repaint();
				}
				else if(mate==1)
				{
					selectmodellayout.show(selectbasemodel, "girls");
					savelistcardLayout.show(savelistbase, "SG");
					showselectmodel.repaint();
				}
				createmode=0;
				showwalkwindow.setVisible(false);
			}
			
		});
		
		select.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();

			}
		});

		
		custom.addChangeListener(new ChangeListener() {
			
			public void stateChanged(ChangeEvent e) {
				if(custom.isSelected())
				{
					select.setSelected(false);
					select.setIcon(new ImageIcon(selectimg[0]));
					custom.setIcon(new ImageIcon(customimg[1]));

				}
				if(select.isSelected()==false && custom.isSelected()==false)
				{
					custom.setSelected(true);
				}
				toolcardlayout.show(toolbarbase, "custom");
				modelcardlayout.show(modemodel, "custom");
				if(mate==0)
				{
					if(custommodel.Hairb.isSelected())
					matecardlayout.show(custombasemodel, "boyhair");
					else if(custommodel.Faceb.isSelected())
					matecardlayout.show(custombasemodel, "boyface");
					else if(custommodel.Topb.isSelected())
					matecardlayout.show(custombasemodel, "boytop");
					else if(custommodel.Hatb.isSelected())
					matecardlayout.show(custombasemodel, "boyhat");
					savelistcardLayout.show(savelistbase, "CB");
					showcustommodel.repaint();
				}
				else if(mate==1)
				{
					if(custommodel.Hairb.isSelected())
					matecardlayout.show(custombasemodel, "girlhair");
					else if(custommodel.Faceb.isSelected())
					matecardlayout.show(custombasemodel, "girlface");
					else if(custommodel.Topb.isSelected())
					matecardlayout.show(custombasemodel, "girltop");
					else if(custommodel.Hatb.isSelected())
					matecardlayout.show(custombasemodel, "girlhat");
					savelistcardLayout.show(savelistbase, "CG");
					showcustommodel.repaint();
				}

				createmode=1;
				showwalkwindow.setVisible(false);
			}
			
		});
		
		custom.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();

			}
		});

		
		boyb.addChangeListener(new ChangeListener() {
			
			public void stateChanged(ChangeEvent e) {
				if(boyb.isSelected())
				{
					girlb.setSelected(false);
					boyb.setIcon(new ImageIcon(boyimg[1]));
					girlb.setIcon(new ImageIcon(girlimg[0]));

				}
				if(boyb.isSelected()==false && girlb.isSelected()==false)
				{
					boyb.setSelected(true);
				}
				if(mate==1)
				{
					mate=0;
					if(createmode==0)
					{
						SelectModel.nowgirlindex=-1;
						selectmodellayout.show(selectbasemodel, "boys");
						savelistcardLayout.show(savelistbase, "SB");
						showselectmodel.repaint();
					}
					else if(createmode==1)
					{
						if(custommodel.Hairb.isSelected())
						matecardlayout.show(custombasemodel, "boyhair");
						else if(custommodel.Faceb.isSelected())
						matecardlayout.show(custombasemodel, "boyface");
						else if(custommodel.Topb.isSelected())
						matecardlayout.show(custombasemodel, "boytop");
						else if(custommodel.Hatb.isSelected())
						matecardlayout.show(custombasemodel, "boyhat");
						savelistcardLayout.show(savelistbase, "CB");
						showcustommodel.repaint();
					}
				}
				showwalkwindow.setVisible(false);
			}
			
		});
	
		boyb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();

			}
		});

		
		girlb.addChangeListener(new ChangeListener() {
			
			public void stateChanged(ChangeEvent e) {
				if(girlb.isSelected())
				{
					boyb.setSelected(false);
					boyb.setIcon(new ImageIcon(boyimg[0]));
					girlb.setIcon(new ImageIcon(girlimg[1]));

				}
				if(boyb.isSelected()==false && girlb.isSelected()==false)
				{
					girlb.setSelected(true);
				}
				if(mate==0)
				{
					mate=1;
					if(createmode==0)
					{
						SelectModel.nowboyindex=-1;
						selectmodellayout.show(selectbasemodel, "girls");
						savelistcardLayout.show(savelistbase, "SG");
						showselectmodel.repaint();
					}
					else if(createmode==1)
					{
						if(custommodel.Hairb.isSelected())
						matecardlayout.show(custombasemodel, "girlhair");
						else if(custommodel.Faceb.isSelected())
						matecardlayout.show(custombasemodel, "girlface");
						else if(custommodel.Topb.isSelected())
						matecardlayout.show(custombasemodel, "girltop");
						else if(custommodel.Hatb.isSelected())
						matecardlayout.show(custombasemodel, "girlhat");
						savelistcardLayout.show(savelistbase, "CG");
						showcustommodel.repaint();
					}
				}
				showwalkwindow.setVisible(false);
			}
			
		});
		
		girlb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();

			}
		});

		lookwalkimage.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(showwalkwindow.isActive()==false)
				{
					if((createmode==0 && mate==0 && SelectModel.nowboyindex==-1) || (createmode==0 && mate==1 && SelectModel.nowgirlindex==-1))
					{
						if(inimessagewindow==false)
						{
							//System.out.println("hello");
							messagewindow.pack();
							messagewindow.revalidate();
							messagewindow.setLocationRelativeTo(null);
							inimessagewindow=true;
						}
						messagewindow.setVisible(true);
					}
					else
					{
						showwalkwindow.setVisible(true);
					    if(iniwalkwindow==false)
					    {
					    	showwalkwindow.pack();
					    	showwalkwindow.revalidate();
					    	showwalkwindow.setLocationRelativeTo(null);
					    	iniwalkwindow=true;
					    }
					showwalkwindow.setVisible(true);
					}
				}
			}
		});
		
		lookwalkimage.addMouseListener(new MouseAdapter(){ 
			public void mouseClicked(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
			}
			
			public void mouseEntered(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(0);
				se.start();
				lookwalkimage.setIcon(new ImageIcon(LookWalk[1]));
            }

			public void mouseExited(MouseEvent e) {
				lookwalkimage.setIcon(new ImageIcon(LookWalk[0]));
			}
			
			public void mousePressed(MouseEvent e)
			{
				lookwalkimage.setIcon(new ImageIcon(LookWalk[2]));
			}
			
			public void mouseReleased(MouseEvent e)
			{
				lookwalkimage.setIcon(new ImageIcon(LookWalk[1]));
			}
		}); 


		voiceb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(voicewindow.isActive()==false)
				{
					if(inivoicewindow==false)
					{
						voicewindow.pack();
						voicewindow.revalidate();
						voicewindow.setLocationRelativeTo(null);
						inivoicewindow=true;
					}
					voicewindow.setVisible(true);
				}
			}
		});

	}
	
	public static void settoollayout(CardLayout t) {
		toolcardlayout=t;
	}
		
	public static void settoolbarpanel(Toolbarbase t) {
		toolbarbase=t;
	}
	
	public static void setmodemodel(ModeModel t) {
		modemodel=t;
	}
	
	public static void setmodelayout(CardLayout t) {
		modelcardlayout=t;
	}

	public static void setselectmodel(SelectBaseModel t) {
		selectbasemodel=t;
	}
	
	public static void setselectcardlayout(CardLayout t) {
		selectmodellayout=t;
	}
	
	public static void setshowselectmodel(ShowSelectModel t) {
		showselectmodel=t;
	}
	
	public static void setcustommodel(CustomModel t) {
		custommodel=t;
	}
	
	public static void setmatecardlayout(CardLayout t) {
		matecardlayout=t;
	}
	
	public static void setbasemodel(CustomBaseModel t) {
		custombasemodel=t;
	}
	
	public static void setshowcustommodel(ShowCustomModel t) {
		showcustommodel=t;
	}
	
	public static void setsavelistbase(SaveListBase t) {
		savelistbase=t;
	}
	
	public static void setsavelistcardlayout(CardLayout t) {
		savelistcardLayout=t;
	}
}

class MessageWindow extends JDialog{
	MessageWindow(GameUI t){
		super(t,"訊息");
		this.setLayout(new BorderLayout());
		this.setResizable(false);
		MessagePanel messagepanel = new MessagePanel(this);
		this.setCursor(GameUI.cursor);
		this.add(messagepanel);

	}
}

class MessagePanel extends JPanel{
	Image btnimg[] = new Image[2];
	MessagePanel(MessageWindow t){
		super();
		this.setLayout(null);
		t.add(this);
		this.setPreferredSize(new Dimension(250,100));
		JLabel background = new JLabel();
		//JLabel message = new JLabel("目前未選中任何形象",SwingConstants.CENTER);
		JButton closeb = new JButton();
		String s = "/Message/bk.png";
		URL url = getClass().getResource(s);
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/Message/2-1.png";
		url = getClass().getResource(s);
		try {
			btnimg[0] = ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/Message/2-2.png";
		url = getClass().getResource(s);
		try {
			btnimg[1] = ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	
		background.setBounds(0, 0, 250, 100);
		//message.setBounds(50, 10, 150, 35);
		closeb.setBounds(95, 50, 60, 40);
		closeb.setFocusable(false);
		closeb.setContentAreaFilled(false);
		closeb.setBorderPainted(false);
		closeb.setFocusPainted(false);
		closeb.setIcon(new ImageIcon(btnimg[0]));
		
		this.add(background);
		background.add(closeb);
		//this.add(message);
		
	    closeb.addActionListener(new ActionListener() {
		       public void actionPerformed(ActionEvent e) {
		    	   closeb.setIcon(new ImageIcon(btnimg[1]));
		    	   t.setVisible(false);
		       }
		});
	    closeb.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{
		    	  t.setVisible(false);
			}
			public void mousePressed(MouseEvent e)
			{
				closeb.setIcon(new ImageIcon(btnimg[1]));
			}
			public void mouseReleased(MouseEvent e)
			{
				 closeb.setIcon(new ImageIcon(btnimg[0]));
			}
		});

	}
}

class VoiceWindow extends JDialog{
	VoiceWindow(GameUI t,String title,boolean model){
		super(t,title,model);
		this.setLayout(new BorderLayout());
		//this.setSize(550, 400);
		this.setResizable(false);
		//this.setUndecorated(true);
		//this.setLocationRelativeTo(null);
		VoiceSetPanel voicesetpanel = new VoiceSetPanel(this);
		this.add(voicesetpanel);
		this.setCursor(GameUI.cursor);
	}
}

class VoiceSetPanel extends JPanel{
	static Clip clip = null;
	static JSlider bgmS = new JSlider(0,100,50);
	static JSlider bgsS = new JSlider(0,100,50);
	static JSlider seS = new JSlider(0,100,50);
	static JSlider meS = new JSlider(0,100,50);
	static FloatControl volumecontrol;
	VoiceSetPanel(VoiceWindow t){
		super();
		this.setLayout(null);
		t.add(this);
		this.setPreferredSize(new Dimension(250,220));
		JLabel bgmtext = new JLabel();
		JLabel bgstext = new JLabel();
		JLabel setext = new JLabel();
		JLabel metext = new JLabel();
		JLabel background = new JLabel();
		String s = "/Voice/bk.png";
		URL url = getClass().getResource(s);
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/Voice/1.png";
		url = getClass().getResource(s);
		try {
			bgmtext.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/Voice/2.png";
		url = getClass().getResource(s);
		try {
			bgstext.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/Voice/3.png";
		url = getClass().getResource(s);
		try {
			setext.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/Voice/4.png";
		url = getClass().getResource(s);
		try {
			metext.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}

		clip = BGMmusicbox.GetNowClip();
		
		volumecontrol = (FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);
		
		//bgmS.setMajorTickSpacing(5);
		//bgmS.setMinorTickSpacing(1);
		//bgmS.setPaintTicks(true);
		//bgmS.setPaintLabels(true);
		bgmS.setBounds(55, 10, 190, 50);
		bgmS.setFocusable(false);
		bgmS.setOpaque(false);
	
		//bgsS.setMajorTickSpacing(5);
		//bgsS.setMinorTickSpacing(1);
		//bgsS.setPaintTicks(true);
		//bgsS.setPaintLabels(true);
		bgsS.setBounds(55, 60, 190, 50);
		bgsS.setFocusable(false);
		bgsS.setOpaque(false);
		//seS.setMajorTickSpacing(5);
		//seS.setMinorTickSpacing(1);
		//seS.setPaintTicks(true);
		//seS.setPaintLabels(true);
		seS.setBounds(55, 110, 190, 50);
		seS.setFocusable(false);
		seS.setOpaque(false);

		//meS.setMajorTickSpacing(5);
		//meS.setMinorTickSpacing(1);
		//meS.setPaintTicks(true);
		//meS.setPaintLabels(true);
		meS.setBounds(55, 160, 190, 50);
		meS.setFocusable(false);
		meS.setOpaque(false);

		bgmtext.setBounds(5, 10, 50, 50);
		bgstext.setBounds(5, 60, 50, 50);
		setext.setBounds(5, 110, 50, 50);
		metext.setBounds(5, 160, 50, 50);
		
		background.setBounds(0, 0, 250, 220);
		this.add(background);
		background.add(bgmtext);
		background.add(bgstext);
		background.add(setext);
		background.add(metext);
		background.add(bgmS);
		background.add(bgsS);
		background.add(seS);
		background.add(meS);
		
		
		volumecontrol.setValue(-10);
        bgmS.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent ce) {
            	float volume = bgmS.getValue();
            	//System.out.println(volume);
            	SettingInfo.bgmS.setValue(bgmS.getValue());
            	if(volume >= 50)
            	{
            		volume = (float)((volume - 50)*16/50.0) - 10;
            	}
            	else
            	{
            		volume = (float)(volume*20/50.0) - 30;
            		if(volume == -30)
            		volume = -80;
            	}
            	//System.out.println(volume);
            	BGMmusicbox.bgmvalue=volume;
                volumecontrol.setValue(BGMmusicbox.bgmvalue);
               
            }
        });
	
        bgsS.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent ce) {
            	float volume = bgsS.getValue();
            	SettingInfo.bgsS.setValue(bgsS.getValue());
            	if(volume >= 50)
            	{
            		volume = (float)((volume - 50)*16/50.0) - 10;
            	}
            	else
            	{
            		volume = (float)(volume*20/50.0) - 30;
            		if(volume == -30)
            		volume = -80;
            	}
            	BGSmusicbox.bgsvalue=volume;
            }
        });

        seS.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent ce) {
            	float volume = seS.getValue();
            	SettingInfo.seS.setValue(seS.getValue());
            	if(volume >= 50)
            	{
            		volume = (float)((volume - 50)*16/50.0) - 10;
            	}
            	else
            	{
            		volume = (float)(volume*20/50.0) - 30;
            		if(volume == -30)
            		volume = -80;
            	}
            	SEmusicbox.sevalue=volume;
            }
        });

        meS.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent ce) {
            	float volume = meS.getValue();
            	SettingInfo.meS.setValue(meS.getValue());
            	if(volume >= 50)
            	{
            		volume = (float)((volume - 50)*16/50.0) - 10;
            	}
            	else
            	{
            		volume = (float)(volume*20/50.0) - 30;
            		if(volume == -30)
            		volume = -80;
            	}
            	MEmusicbox.mevalue=volume;
            }
        });

	}
}

class ShowWalkWindow extends JFrame{
	ShowWalkWindow(){
		super();
		this.setLayout(new BorderLayout());
		this.setResizable(false);
		this.setTitle("展示畫面");
		Displaycharacter displaycharacter = new Displaycharacter(this);
	}
}

class Displaycharacter extends JPanel{
	static Image groundimg=null,testwalk=null;
	static int x,y,prex,prey,toward;
	Displaycharacter(ShowWalkWindow t){
		super();
		this.setLayout(null);
		t.add(this);
		this.setPreferredSize(new Dimension(432,432));
		DisplayC displayC = new DisplayC();
		Screenupdate1 screenupdate = new Screenupdate1(this);
		JLabel otherarea = new JLabel();
		
		String s1="/SMap/examplemap.png";
		String s2="/SWalk/testig.png";
		
		try {
			groundimg=ImageIO.read(getClass().getResource(s1));
			testwalk=ImageIO.read(getClass().getResource(s2));
		} catch (IOException e) {
			e.printStackTrace();
		}
		displayC.initial(testwalk,groundimg);
		displayC.start();
		screenupdate.start();

		
		otherarea.setIcon(new ImageIcon(groundimg));
		otherarea.setBounds(0,0,432,432);

		this.add(otherarea);
		
	}
	
	public void paint(Graphics g) {
		super.paint(g);
		g.drawImage(groundimg, 0, 0, 432, 432, 0, 0, 432, 432, null);
		DisplayC.paint(g);
	}
}

class DisplayC extends Thread{
	static int x=4,y=4,prex=4,prey=4,rx,ry;
	static int toward=1;
	//static Image boywalkimage[] = new Image[SelectModel.boynum];
	//static Image girlwalkimage[] = new Image[SelectModel.girlnum];
	static Image groundimg;
	static Image mainplayer;
	static boolean up=false;
	static boolean down=false;
	static boolean left=false;
	static boolean right=false;
	static int up1=0;
	static int down1=0;
	static int left1=0;
	static int right1=0;
	public void initial(Image img1,Image img2) {
		mainplayer=img1;
		groundimg=img2;
		/*
		for(int i=0;i<SelectModel.boynum;i++)
		{
			String s = "/BoyWalkImage/" + (i+1) + "-4.png";
			try {
				boywalkimage[i]=ImageIO.read(getClass().getResource(s));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		for(int i=0;i<SelectModel.girlnum;i++)
		{
			String s = "/GirlWalkImage/" + (i+1) + "-4.png";
			try {
				girlwalkimage[i]=ImageIO.read(getClass().getResource(s));
			} catch (IOException e) {
				e.printStackTrace();
			}
			
		}*/
	}
	
	public void run(){
		while(true)
		{
			String s=null;
			if(StateTable.createmode==0)
			{
				if(StateTable.mate==0 && SelectModel.nowboyindex!=-1)
				{
					s = "/BoyWalkImage/" + (SelectModel.nowboyindex+1) + "-4.png";
					try {
						mainplayer=ImageIO.read(getClass().getResource(s));
					} catch (IOException e) {
						e.printStackTrace();
					}

					//mainplayer = boywalkimage[SelectModel.nowboyindex];
				}
				else if(StateTable.mate==1 && SelectModel.nowgirlindex!=-1)
				{
					s = "/GirlWalkImage/" + (SelectModel.nowgirlindex+1) + "-4.png";
					try {
						mainplayer=ImageIO.read(getClass().getResource(s));
					} catch (IOException e) {
						e.printStackTrace();
					}

					//mainplayer = girlwalkimage[SelectModel.nowgirlindex];
				}
			}
			else if(StateTable.createmode==1)
			{
				if(StateTable.mate==0)
				{
					s = "/CustomBoyWalkImage/" + ShowCustomModel.bhairindex + "-" + ShowCustomModel.bfaceindex + "-" + ShowCustomModel.btopindex + "-" + ShowCustomModel.bhatindex + ".png";
				}
				else if(StateTable.mate==1)
				{
					s = "/CustomGirlWalkImage/" + ShowCustomModel.ghairindex + "-" + ShowCustomModel.gfaceindex + "-" + ShowCustomModel.gtopindex + "-" + ShowCustomModel.ghatindex + ".png";
				}
				try {
					mainplayer=ImageIO.read(getClass().getResource(s));
				} catch (IOException e) {
					e.printStackTrace();
				}

			}
			//System.out.println(s);

			move();
			rx=prex*48;
			ry=prey*48;
			for(int i=0;i<6;i++)
			{
				try {  
					Thread.sleep(100);  
				} catch (InterruptedException e) {  
	                	e.printStackTrace();  
				}
				if(toward==0)
				{
					if(prey!=y)
					ry=ry-6;
					up1++;
					if(up1>=15)
					up1%=15;
				}
				else if(toward==1)
				{
					if(prey!=y)
					ry=ry+6;
					down1++;
					if(down1>=15)
					down1%=15;
				}
				else if(toward==2)
				{
					if(prex!=x)
					rx=rx-6;
					left1++;
					if(left1>=15)
					left1%=15;
				}
				else if(toward==3)
				{
					if(prex!=x)
					rx=rx+6;
					right1++;
					if(right1>=15)
					right1%=15;
				}
			}	
		}
	}
	
	public void move() {
		Random ran = new Random();
		toward=ran.nextInt(4);
		prex=x;
		prey=y;
		if(toward==0)
		{
			if(y>0)
			y--;
			up1++;
			if(up1>=15)
			up1%=15;
		}
		else if(toward==1)
		{
			if(y<8)
			y++;
			down1++;
			if(down1>=15)
			down1%=15;
		}
		else if(toward==2)
		{
			if(x>0)
			x--;
			left1++;
			if(left1>=15)
			left1%=15;
		}
		else if(toward==3)
		{
			if(x<8)
			x++;
			right1++;
			if(right1>=15)
			right1%=15;
		}
	}
	
	public static void paint(Graphics g)
	{
				if(toward==0)
				{
							g.drawImage(groundimg, 0, 0, 432, 432, 0, 0, 432, 432, null);
							if(up1%3==0)
							{
							
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 0,48*3,48,48*4,null);
							}
							else if(up1%3==1)
							{
								
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 48,48*3,48*2,48*4,null);
							}
							else if(up1%3==2)
							{
							
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 48*2,48*3,48*3,48*4,null);
							}	
				}
				else if(toward==1)
				{
							g.drawImage(groundimg, 0, 0, 432, 432, 0, 0, 432, 432, null);
							if(down1%3==0)
							{
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 0,0,48,48,null);
							}
							else if(down1%3==1)
							{
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 48,0,48*2,48,null);
							}
							else if(down1%3==2)
							{
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 48*2,0,48*3,48,null);
							}				
				}
				else if(toward==2)
				{
							g.drawImage(groundimg, 0, 0, 432, 432, 0, 0, 432, 432, null);
							if(left1%3==0)
							{
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 0,48*1,48,48*2,null);

							}
							else if(left1%3==1)
							{
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 48,48*1,48*2,48*2,null);

							}
							else if(left1%3==2)
							{
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 48*2,48*1,48*3,48*2,null);

							}
				}
				else if(toward==3)
				{
							g.drawImage(groundimg, 0, 0, 432, 432, 0, 0, 432, 432, null);
							if(right1%3==0)
							{
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 0,48*2,48,48*3,null);

							}
							else if(right1%3==1)
							{
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 48,48*2,48*2,48*3,null);

							}
							else if(right1%3==2)
							{
								g.drawImage(mainplayer, rx, ry, rx+48, ry+48, 48*2,48*2,48*3,48*3,null);

							}
				}
								
	}
	
	public static int gettoward() {
		return toward;
	}
	
	public static int getnowx() {
		return x;
	}
	
	public static int getnowy() {
		return y;
	}
	
	public static int getprex() {
		return prex;
	}
	
	public static int getprey() {
		return prey;
	}
}

class Toolbarbase extends JPanel{
	Toolbarbase(){
		super();
		this.setLayout(new CardLayout());
		this.setOpaque(false);
		CardLayout toolcardLayout = (CardLayout)this.getLayout();
		SelectModel selectmodel = new SelectModel();
		CustomModel custommodel = new CustomModel();
		this.add(selectmodel,"select");
		this.add(custommodel, "custom");
		StateTable.settoollayout(toolcardLayout);
		StateTable.settoolbarpanel(this);
	}
}

class SelectModel extends JPanel{
	static int girlnum = 40,boynum = 40,nowboyindex=-1,nowgirlindex=-1,nowboyshowindex=0,nowgirlshowindex=0;
	//static Image girlimages[] = new Image[girlnum];
	//static Image boyimages[] = new Image[boynum];
	static ShowSelectModel showselectmodel;
	
	SelectModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JLabel alertext = new JLabel("角色形象");
		SelectBaseModel selectbasemodel = new SelectBaseModel();
		String s = "/DesignIcon/title.png";
		URL url = getClass().getResource(s);
		
		alertext.setBounds(1, 2, 376, 42);
		try {
			alertext.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}
		selectbasemodel.setBounds(0, 51, 380, 550);
		
		this.add(alertext);
		this.add(selectbasemodel);
	}
	
	public static void setupdatescreen(ShowSelectModel t) {
		showselectmodel=t;		
	}

}

class SelectBaseModel extends JPanel{
	SelectBaseModel(){
		super();
		this.setLayout(new CardLayout());
		this.setOpaque(false);
		CardLayout selectcardLayout = (CardLayout)this.getLayout();
		SelectBoyModel selectboymodel = new SelectBoyModel();
		SelectGirlModel selectgirlmodel = new SelectGirlModel();
		this.add(selectboymodel, "boys");
		this.add(selectgirlmodel, "girls");
		StateTable.setselectmodel(this);
		StateTable.setselectcardlayout(selectcardLayout);
	}
}

class SelectBoyModel extends JPanel{
	Image ChangeIcon[] = new Image[3];
	SelectBoyModel(){
		super();
		this.setOpaque(false);
		this.setLayout(null);
		JToggleButton JTB[] = new JToggleButton[4];
		JButton ChangeB = new JButton();
		Image boyimages[] = new Image[SelectModel.boynum];
		String s = "/DesignIcon/change1.png";
		URL url = getClass().getResource(s);
		try {
			ChangeIcon[0] = ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/DesignIcon/change2.png";
		url = getClass().getResource(s);
		try {
			ChangeIcon[1] = ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/DesignIcon/change3.png";
		url = getClass().getResource(s);
		try {
			ChangeIcon[2] = ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}

		ChangeB.setIcon(new ImageIcon(ChangeIcon[0]));
		for(int i=0;i<SelectModel.boynum;i++)
		{
			int g=i+1;
			s = "/characterboyImage/"+ g + "-3.jpg";
			//File file = new File(s);
			try {
				//boyimages[i]=ImageIO.read(getClass().getResourceAsStream(s));
				boyimages[i]=ImageIO.read(getClass().getResource(s));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		for(int i=0;i<4;i++)
		{
			JTB[i] = new JToggleButton();
			JTB[i].setIcon(new ImageIcon(boyimages[i]));
			JTB[i].setBounds(2+i*95, 0, 90, 340);
			this.add(JTB[i]);
		}

		ChangeB.setBounds(1, 441, 376, 47);
		ChangeB.setContentAreaFilled(false);
		ChangeB.setBorderPainted(false);
		ChangeB.setFocusPainted(false);

		
		this.add(ChangeB);

	       JTB[0].addChangeListener(new ChangeListener() {    
	            public void stateChanged(ChangeEvent e) {       
	            	SelectModel.nowboyindex=SelectModel.nowboyshowindex*4;
	            	SelectModel.showselectmodel.repaint();
	            }
	       });

	       JTB[1].addChangeListener(new ChangeListener() {    
	            public void stateChanged(ChangeEvent e) {
	            	SelectModel.nowboyindex=SelectModel.nowboyshowindex*4+1;
	            	SelectModel.showselectmodel.repaint();
	            }
	       });

	       JTB[2].addChangeListener(new ChangeListener() {    
	            public void stateChanged(ChangeEvent e) {
	            	SelectModel.nowboyindex=SelectModel.nowboyshowindex*4+2;
	            	SelectModel.showselectmodel.repaint();
	            }
	       });

	       JTB[3].addChangeListener(new ChangeListener() {    
	            public void stateChanged(ChangeEvent e) {
	            	SelectModel.nowboyindex=SelectModel.nowboyshowindex*4+3;
	            	SelectModel.showselectmodel.repaint();
	            }
	       });
	       
	       ChangeB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					SelectModel.nowboyshowindex=(SelectModel.nowboyshowindex+1)%10;
					for(int i=SelectModel.nowboyshowindex*4;i<=SelectModel.nowboyshowindex*4+3;i++)
					{
						JTB[i%4].setIcon(new ImageIcon(boyimages[i]));	
					}
				}
			});
	       
		   ChangeB.addMouseListener(new MouseAdapter(){ 
				public void mouseClicked(MouseEvent e)
				{
					SEmusicbox se = new SEmusicbox(1);
					se.start();
				}
				
				public void mouseEntered(MouseEvent e)
				{
					SEmusicbox se = new SEmusicbox(0);
					se.start();
					ChangeB.setIcon(new ImageIcon(ChangeIcon[1]));
	            }
				
				public void mouseExited(MouseEvent e) 
				{
					ChangeB.setIcon(new ImageIcon(ChangeIcon[0]));
				}
				
				public void mousePressed(MouseEvent e)
				{
					ChangeB.setIcon(new ImageIcon(ChangeIcon[2]));
				}
				
				public void mouseReleased(MouseEvent e)
				{
					ChangeB.setIcon(new ImageIcon(ChangeIcon[1]));
				}
			}); 



	}
}

class SelectGirlModel extends JPanel{
	Image ChangeIcon[] = new Image[3];
	SelectGirlModel(){
		super();
		this.setOpaque(false);
		this.setLayout(null);
		JToggleButton JTB[] = new JToggleButton[4];
		JButton ChangeB = new JButton();
		Image girlimages[] = new Image[SelectModel.girlnum];
		String s = "/DesignIcon/change1.png";
		URL url = getClass().getResource(s);
		try {
			ChangeIcon[0] = ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/DesignIcon/change2.png";
		url = getClass().getResource(s);
		try {
			ChangeIcon[1] = ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		s = "/DesignIcon/change3.png";
		url = getClass().getResource(s);
		try {
			ChangeIcon[2] = ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		ChangeB.setIcon(new ImageIcon(ChangeIcon[0]));



		for(int i=0;i<SelectModel.girlnum;i++)
		{
			int g=i+1;
			s = "/charactergirlImage/"+ g + "-3.jpg";
			try {
				girlimages[i]=ImageIO.read(getClass().getResource(s));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		for(int i=0;i<4;i++)
		{
			JTB[i] = new JToggleButton();
			JTB[i].setIcon(new ImageIcon(girlimages[i]));
			JTB[i].setBounds(2+i*95, 0, 90, 340);
			this.add(JTB[i]);
		}
		
		ChangeB.setBounds(1, 441, 376, 47);
		ChangeB.setContentAreaFilled(false);
		ChangeB.setBorderPainted(false);
		ChangeB.setFocusPainted(false);

		this.add(ChangeB);

	       JTB[0].addChangeListener(new ChangeListener() {    
	            public void stateChanged(ChangeEvent e) {       
	            	SelectModel.nowgirlindex=SelectModel.nowgirlshowindex*4;
	            	SelectModel.showselectmodel.repaint();
	            }
	       });

	       JTB[1].addChangeListener(new ChangeListener() {    
	            public void stateChanged(ChangeEvent e) {
	            	SelectModel.nowgirlindex=SelectModel.nowgirlshowindex*4+1;
	            	SelectModel.showselectmodel.repaint();
	            }
	       });

	       JTB[2].addChangeListener(new ChangeListener() {    
	            public void stateChanged(ChangeEvent e) {
	            	SelectModel.nowgirlindex=SelectModel.nowgirlshowindex*4+2;
	            	SelectModel.showselectmodel.repaint();
	            }
	       });

	       JTB[3].addChangeListener(new ChangeListener() {    
	            public void stateChanged(ChangeEvent e) {
	            	SelectModel.nowgirlindex=SelectModel.nowgirlshowindex*4+3;
	            	SelectModel.showselectmodel.repaint();
	            }
	       });

	       ChangeB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					SelectModel.nowgirlshowindex=(SelectModel.nowgirlshowindex+1)%10;
					for(int i=SelectModel.nowgirlshowindex*4;i<=SelectModel.nowgirlshowindex*4+3;i++)
					{
						JTB[i%4].setIcon(new ImageIcon(girlimages[i]));	
					}
					
				}
			});

		   ChangeB.addMouseListener(new MouseAdapter(){ 
				public void mouseClicked(MouseEvent e)
				{
					SEmusicbox se = new SEmusicbox(1);
					se.start();
				}
				
				public void mouseEntered(MouseEvent e)
				{
					SEmusicbox se = new SEmusicbox(0);
					se.start();
					ChangeB.setIcon(new ImageIcon(ChangeIcon[1]));
	            }
				
				public void mouseExited(MouseEvent e) 
				{
					ChangeB.setIcon(new ImageIcon(ChangeIcon[0]));
				}
				
				public void mousePressed(MouseEvent e)
				{
					ChangeB.setIcon(new ImageIcon(ChangeIcon[2]));
				}
				
				public void mouseReleased(MouseEvent e)
				{
					ChangeB.setIcon(new ImageIcon(ChangeIcon[1]));
				}
			}); 

	}
}

class CustomModel extends JPanel{
	static CardLayout materialcardlayout;
	static CustomBaseModel custombasemodel;
	static ShowCustomModel showcustommodel;
	JToggleButton Hairb = new JToggleButton();
	JToggleButton Faceb = new JToggleButton();
	JToggleButton Topb = new JToggleButton();
	JToggleButton Hatb = new JToggleButton();
	Image HairImage[] = new Image[2]; 
	Image FaceImage[] = new Image[2]; 
	Image TopImage[] = new Image[2]; 
	Image HatImage[] = new Image[2]; 

	CustomModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		CustomBaseModel custombasemodel = new CustomBaseModel();
		String s[] = new String[8];
		URL url;
		
		s[0] = "/DesignIcon/hair1.png";
		s[1] = "/DesignIcon/hair2.png";
		s[2] = "/DesignIcon/face1.png";
		s[3] = "/DesignIcon/face2.png";
		s[4] = "/DesignIcon/top1.png";
		s[5] = "/DesignIcon/top2.png";
		s[6] = "/DesignIcon/hat1.png";
		s[7] = "/DesignIcon/hat2.png";
		
		url=getClass().getResource(s[0]);
		try {
			HairImage[0] = ImageIO.read(url);
			url=getClass().getResource(s[1]);
			HairImage[1] = ImageIO.read(url);
			url=getClass().getResource(s[2]);
			FaceImage[0] = ImageIO.read(url);
			url=getClass().getResource(s[3]);
			FaceImage[1] = ImageIO.read(url);
			url=getClass().getResource(s[4]);
			TopImage[0] = ImageIO.read(url);
			url=getClass().getResource(s[5]);
			TopImage[1] = ImageIO.read(url);
			url=getClass().getResource(s[6]);
			HatImage[0] = ImageIO.read(url);
			url=getClass().getResource(s[7]);
			HatImage[1] = ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		Hairb.setSelected(true);
		Hairb.setBounds(2, 1, 91, 44);
		Hairb.setIcon(new ImageIcon(HairImage[1]));
		Faceb.setBounds(96, 1, 92, 44);
		Faceb.setIcon(new ImageIcon(FaceImage[0]));
		Topb.setBounds(191, 1, 92, 44);
		Topb.setIcon(new ImageIcon(TopImage[0]));
		Hatb.setBounds(286, 1, 91, 44);
		Hatb.setIcon(new ImageIcon(HatImage[0]));
		
		Hairb.setContentAreaFilled(false);
		Hairb.setBorderPainted(false);
		Hairb.setFocusPainted(false);
		Faceb.setContentAreaFilled(false);
		Faceb.setBorderPainted(false);
		Faceb.setFocusPainted(false);
		Topb.setContentAreaFilled(false);
		Topb.setBorderPainted(false);
		Topb.setFocusPainted(false);
		Hatb.setContentAreaFilled(false);
		Hatb.setBorderPainted(false);
		Hatb.setFocusPainted(false);

		custombasemodel.setBounds(0, 76, 380, 450);
		
		StateTable.setcustommodel(this);
		this.add(custombasemodel);
		this.add(Hairb);
		this.add(Faceb);
		this.add(Topb);
		this.add(Hatb);
		
	    Hairb.addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		if(Hairb.isSelected()==true)
	    		{
	    			Faceb.setSelected(false);
	    			Topb.setSelected(false);
	    			Hatb.setSelected(false);
	    			Hairb.setIcon(new ImageIcon(HairImage[1]));
	    			Faceb.setIcon(new ImageIcon(FaceImage[0]));
	    			Topb.setIcon(new ImageIcon(TopImage[0]));
	    			Hatb.setIcon(new ImageIcon(HatImage[0]));

	    		}
	    		if(Hairb.isSelected()==false && Faceb.isSelected()==false && Topb.isSelected()==false && Hatb.isSelected()==false)
	    		{
	    			Hairb.setSelected(true);
	    		}
	    		if(StateTable.mate==0)
	    		{
	    			materialcardlayout.show(custombasemodel, "boyhair");
	    		}
	    		else if(StateTable.mate==1)
	    		{
	    			materialcardlayout.show(custombasemodel, "girlhair");
	    		}
	    		//materialcardlayout.show(custombasemodel, "girlhair");
	        }
	    });
		/*
	    Hairb.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();
			}
	    });
	    */
	    Hairb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();

			}
		});
	    
	    Faceb.addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		if(Faceb.isSelected()==true)
	    		{
	    			Hairb.setSelected(false);
	    			Topb.setSelected(false);
	    			Hatb.setSelected(false);
	    			Hairb.setIcon(new ImageIcon(HairImage[0]));
	    			Faceb.setIcon(new ImageIcon(FaceImage[1]));
	    			Topb.setIcon(new ImageIcon(TopImage[0]));
	    			Hatb.setIcon(new ImageIcon(HatImage[0]));

	    		}
	    		if(Hairb.isSelected()==false && Faceb.isSelected()==false && Topb.isSelected()==false && Hatb.isSelected()==false)
	    		{
	    			Faceb.setSelected(true);
	    		}
	    		if(StateTable.mate==0)
	    		{
	    			materialcardlayout.show(custombasemodel, "boyface");
	    		}
	    		else if(StateTable.mate==1)
	    		{
	    			materialcardlayout.show(custombasemodel, "girlface");
	    		}

	    		//materialcardlayout.show(custombasemodel, "girlface");
	        }
	    });
	    /*
	    Faceb.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();
			}
	    });
	    */
	    Faceb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();

			}
		});

	    Topb.addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		if(Topb.isSelected()==true)
	    		{
	    			Faceb.setSelected(false);
	    			Hairb.setSelected(false);
	    			Hatb.setSelected(false);
	    			Hairb.setIcon(new ImageIcon(HairImage[0]));
	    			Faceb.setIcon(new ImageIcon(FaceImage[0]));
	    			Topb.setIcon(new ImageIcon(TopImage[1]));
	    			Hatb.setIcon(new ImageIcon(HatImage[0]));

	    		}
	    		if(Hairb.isSelected()==false && Faceb.isSelected()==false && Topb.isSelected()==false && Hatb.isSelected()==false)
	    		{
	    			Topb.setSelected(true);
	    		}
	    		if(StateTable.mate==0)
	    		{
	    			materialcardlayout.show(custombasemodel, "boytop");
	    		}
	    		else if(StateTable.mate==1)
	    		{
	    			materialcardlayout.show(custombasemodel, "girltop");
	    		}

	    		//materialcardlayout.show(custombasemodel, "girltop");
	        }
	    });
	    /*
	    Topb.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();
			}
	    });
	    */
	    Topb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();

			}
		});

	    Hatb.addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		if(Hatb.isSelected()==true)
	    		{
	    			Faceb.setSelected(false);
	    			Topb.setSelected(false);
	    			Hairb.setSelected(false);
	    			Hairb.setIcon(new ImageIcon(HairImage[0]));
	    			Faceb.setIcon(new ImageIcon(FaceImage[0]));
	    			Topb.setIcon(new ImageIcon(TopImage[0]));
	    			Hatb.setIcon(new ImageIcon(HatImage[1]));

	    		}
	    		if(Hairb.isSelected()==false && Faceb.isSelected()==false && Topb.isSelected()==false && Hatb.isSelected()==false)
	    		{
	    			Hatb.setSelected(true);
	    		}
	    		if(StateTable.mate==0)
	    		{
	    			materialcardlayout.show(custombasemodel, "boyhat");
	    		}
	    		else if(StateTable.mate==1)
	    		{
	    			materialcardlayout.show(custombasemodel, "girlhat");
	    		}

	    		//materialcardlayout.show(custombasemodel, "girlhat");
	        }
	    });
	    /*
	    Hatb.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();
			}
	    });
	    */
	    Hatb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
	    		SEmusicbox se = new SEmusicbox(2);
	    		se.start();

			}
		});

	}
	
	
	public static void setmatecardlayout(CardLayout t) {
		materialcardlayout=t;
	}
	
	public static void setbasemodel(CustomBaseModel t) {
		custombasemodel=t;
	}
	
	public static void setshowcustommodel(ShowCustomModel t) {
		showcustommodel=t;
	}
	
	public static void repainting() {
		showcustommodel.repaint();
	}
}

class CustomBaseModel extends JPanel{
	CustomBaseModel() {
		super();
		this.setLayout(new CardLayout());
		this.setOpaque(false);
		CardLayout cardLayout = (CardLayout)this.getLayout();
		CustomBoyHairModel customboyhairmodel = new CustomBoyHairModel();
		CustomBoyFaceModel customboyfacemodel = new CustomBoyFaceModel();
		CustomBoyTopModel customboytopmodel = new CustomBoyTopModel();
		CustomBoyHatModel customboyhatmodel = new CustomBoyHatModel();		
		CustomGirlHairModel customgirlhairmodel = new CustomGirlHairModel();
		CustomGirlFaceModel customgirlfacemodel = new CustomGirlFaceModel();
		CustomGirlTopModel customgirltopmodel = new CustomGirlTopModel();
		CustomGirlHatModel customgirlhatmodel = new CustomGirlHatModel();
		
		this.add(customboyhairmodel,"boyhair");
		this.add(customboyfacemodel,"boyface");
		this.add(customboytopmodel,"boytop");
		this.add(customboyhatmodel,"boyhat");
		this.add(customgirlhairmodel,"girlhair");
		this.add(customgirlfacemodel,"girlface");
		this.add(customgirltopmodel,"girltop");
		this.add(customgirlhatmodel,"girlhat");
		CustomModel.setmatecardlayout(cardLayout);
		CustomModel.setbasemodel(this);
		StateTable.setmatecardlayout(cardLayout);
		StateTable.setbasemodel(this);
		
	}
}

class CustomBoyHairModel extends JPanel{
	CustomBoyHairModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JToggleButton mateb[] = new JToggleButton[9];
		for(int i=0;i<9;i++)
		{
			mateb[i] = new JToggleButton();
			String s="/CustomBoyMaterial/h" + i +".jpg";
			URL url = getClass().getResource(s);
			mateb[i].setIcon(new ImageIcon(url));
			mateb[i].setBounds(0+i%3*127, 0+i/3*127, 125, 125);
			this.add(mateb[i]);
		}
		
	    mateb[0].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhairindex=0;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[1].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhairindex=1;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[2].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhairindex=2;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[3].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhairindex=3;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[4].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhairindex=4;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[5].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhairindex=5;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[6].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhairindex=6;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[7].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhairindex=7;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[8].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhairindex=8;
	    		CustomModel.repainting();
	        }
	    });

	}
}

class CustomBoyFaceModel extends JPanel{
	CustomBoyFaceModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JToggleButton mateb[] = new JToggleButton[9];
		for(int i=0;i<9;i++)
		{
			mateb[i] = new JToggleButton();
			String s="/CustomBoyMaterial/f" + i +".jpg";
			URL url = getClass().getResource(s);
			mateb[i].setIcon(new ImageIcon(url));
			mateb[i].setBounds(0+i%3*127, 0+i/3*127, 125, 125);
			this.add(mateb[i]);
		}

	    mateb[0].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bfaceindex=0;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[1].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bfaceindex=1;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[2].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bfaceindex=2;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[3].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bfaceindex=3;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[4].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bfaceindex=4;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[5].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bfaceindex=5;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[6].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bfaceindex=6;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[7].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bfaceindex=7;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[8].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bfaceindex=8;
	    		CustomModel.repainting();
	        }
	    });

	}
}

class CustomBoyTopModel extends JPanel{
	CustomBoyTopModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JToggleButton mateb[] = new JToggleButton[9];
		for(int i=0;i<9;i++)
		{
			mateb[i] = new JToggleButton();
			String s="/CustomBoyMaterial/t" + i +".jpg";
			URL url = getClass().getResource(s);
			mateb[i].setIcon(new ImageIcon(url));
			mateb[i].setBounds(0+i%3*127, 0+i/3*127, 125, 125);
			this.add(mateb[i]);
		}

	    mateb[0].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.btopindex=0;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[1].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.btopindex=1;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[2].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.btopindex=2;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[3].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.btopindex=3;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[4].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.btopindex=4;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[5].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.btopindex=5;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[6].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.btopindex=6;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[7].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.btopindex=7;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[8].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.btopindex=8;
	    		CustomModel.repainting();
	        }
	    });

	}
}

class CustomBoyHatModel extends JPanel{
	CustomBoyHatModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JToggleButton mateb[] = new JToggleButton[9];
		for(int i=0;i<9;i++)
		{
			mateb[i] = new JToggleButton();
			String s="/CustomBoyMaterial/a" + i +".jpg";
			URL url = getClass().getResource(s);
			mateb[i].setIcon(new ImageIcon(url));
			mateb[i].setBounds(0+i%3*127, 0+i/3*127, 125, 125);
			this.add(mateb[i]);
		}

	    mateb[0].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhatindex=0;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[1].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhatindex=1;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[2].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhatindex=2;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[3].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhatindex=3;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[4].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhatindex=4;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[5].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhatindex=5;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[6].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhatindex=6;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[7].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhatindex=7;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[8].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.bhatindex=8;
	    		CustomModel.repainting();
	        }
	    });

	}
}

class CustomGirlHairModel extends JPanel{
	CustomGirlHairModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JToggleButton mateb[] = new JToggleButton[9];
		for(int i=0;i<9;i++)
		{
			mateb[i] = new JToggleButton();
			String s="/CustomGirlMaterial/h" + i +".jpg";
			URL url = getClass().getResource(s);
			mateb[i].setIcon(new ImageIcon(url));
			mateb[i].setBounds(0+i%3*127, 0+i/3*127, 125, 125);
			this.add(mateb[i]);
		}
		
	    mateb[0].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghairindex=0;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[1].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghairindex=1;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[2].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghairindex=2;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[3].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghairindex=3;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[4].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghairindex=4;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[5].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghairindex=5;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[6].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghairindex=6;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[7].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghairindex=7;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[8].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghairindex=8;
	    		CustomModel.repainting();
	        }
	    });

	}
}

class CustomGirlFaceModel extends JPanel{
	CustomGirlFaceModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JToggleButton mateb[] = new JToggleButton[9];
		for(int i=0;i<9;i++)
		{
			mateb[i] = new JToggleButton();
			String s="/CustomGirlMaterial/f" + i +".jpg";
			URL url = getClass().getResource(s);
			mateb[i].setIcon(new ImageIcon(url));
			mateb[i].setBounds(0+i%3*127, 0+i/3*127, 125, 125);
			this.add(mateb[i]);
		}

	    mateb[0].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gfaceindex=0;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[1].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gfaceindex=1;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[2].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gfaceindex=2;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[3].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gfaceindex=3;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[4].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gfaceindex=4;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[5].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gfaceindex=5;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[6].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gfaceindex=6;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[7].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gfaceindex=7;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[8].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gfaceindex=8;
	    		CustomModel.repainting();
	        }
	    });

	}
}

class CustomGirlTopModel extends JPanel{
	CustomGirlTopModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JToggleButton mateb[] = new JToggleButton[9];
		for(int i=0;i<9;i++)
		{
			mateb[i] = new JToggleButton();
			String s="/CustomGirlMaterial/t" + i +".jpg";
			URL url = getClass().getResource(s);
			mateb[i].setIcon(new ImageIcon(url));
			mateb[i].setBounds(0+i%3*127, 0+i/3*127, 125, 125);
			this.add(mateb[i]);
		}

	    mateb[0].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gtopindex=0;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[1].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gtopindex=1;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[2].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gtopindex=2;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[3].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gtopindex=3;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[4].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gtopindex=4;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[5].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gtopindex=5;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[6].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gtopindex=6;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[7].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gtopindex=7;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[8].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.gtopindex=8;
	    		CustomModel.repainting();
	        }
	    });

	}
}

class CustomGirlHatModel extends JPanel{
	CustomGirlHatModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JToggleButton mateb[] = new JToggleButton[9];
		for(int i=0;i<9;i++)
		{
			mateb[i] = new JToggleButton();
			String s="/CustomGirlMaterial/a" + i +".jpg";
			URL url = getClass().getResource(s);
			mateb[i].setIcon(new ImageIcon(url));
			mateb[i].setBounds(0+i%3*127, 0+i/3*127, 125, 125);
			this.add(mateb[i]);
		}

	    mateb[0].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghatindex=0;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[1].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghatindex=1;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[2].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghatindex=2;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[3].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghatindex=3;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[4].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghatindex=4;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[5].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghatindex=5;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[6].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghatindex=6;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[7].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghatindex=7;
	    		CustomModel.repainting();
	        }
	    });

	    mateb[8].addChangeListener(new ChangeListener() {    
	    	public void stateChanged(ChangeEvent e) {
	    		for(int i=0;i<9;i++)
	    		mateb[i].setSelected(false);
	    		ShowCustomModel.ghatindex=8;
	    		CustomModel.repainting();
	        }
	    });

	}
}

class FunctionalBlock extends JPanel{
	static ShowSelectModel showselectmodel;
	static ShowCustomModel showcustommodel;
	static int btncount=0;
	static int btncountsb=0;
	static int btncountsg=0;
	static int btncountcb=0;
	static int btncountcg=0;
	static SaveListSelectBoy savelistselectboy;
	static SaveListSelectGirl savelistselectgirl;
	static SaveListCustomBoy savelistcustomboy;
	static SaveListCustomGirl savelistcustomgirl;
	JButton saveb = new JButton();
	JButton resetb = new JButton();
	JButton randomb = new JButton();
	JButton exitb = new JButton();
	Image SaveImage[] = new Image[3];
	Image ResetImage[] = new Image[3];
	Image RandomImage[] = new Image[3];
	Image ExitImage[] = new Image[3];

	//static JPanel list;
	FunctionalBlock(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		String s[] = new String[12];
		URL url;
		s[0] = "/DesignIcon/save1.png";
		s[1] = "/DesignIcon/save2.png";
		s[2] = "/DesignIcon/save3.png";
		s[3] = "/DesignIcon/reset1.png";
		s[4] = "/DesignIcon/reset2.png";
		s[5] = "/DesignIcon/reset3.png";
		s[6] = "/DesignIcon/random1.png";
		s[7] = "/DesignIcon/random2.png";
		s[8] = "/DesignIcon/random3.png";
		s[9] = "/DesignIcon/exit1.png";
		s[10] = "/DesignIcon/exit2.png";
		s[11] = "/DesignIcon/exit3.png";
		try {
			url = getClass().getResource(s[0]);
			SaveImage[0] = ImageIO.read(url);
			url = getClass().getResource(s[1]);
			SaveImage[1] = ImageIO.read(url);
			url = getClass().getResource(s[2]);
			SaveImage[2] = ImageIO.read(url);
			
			
			url = getClass().getResource(s[3]);			
			ResetImage[0] = ImageIO.read(url);
			url = getClass().getResource(s[4]);
			ResetImage[1] = ImageIO.read(url);
			url = getClass().getResource(s[5]);
			ResetImage[2] = ImageIO.read(url);
			
			url = getClass().getResource(s[6]);
			RandomImage[0] = ImageIO.read(url);	
			url = getClass().getResource(s[7]);
			RandomImage[1] = ImageIO.read(url);
			url = getClass().getResource(s[8]);
			RandomImage[2] = ImageIO.read(url);
			
			url = getClass().getResource(s[9]);
			ExitImage[0] = ImageIO.read(url);
			url = getClass().getResource(s[10]);
			ExitImage[1] = ImageIO.read(url);
			url = getClass().getResource(s[11]);
			ExitImage[2] = ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		
		saveb.setBounds(0, 1, 95, 45);
		saveb.setContentAreaFilled(false);
		saveb.setBorderPainted(false);
		saveb.setFocusPainted(false);
		saveb.setIcon(new ImageIcon(SaveImage[0]));
		
		resetb.setBounds(95, 1, 95, 45);
		resetb.setContentAreaFilled(false);
		resetb.setBorderPainted(false);
		resetb.setFocusPainted(false);
		resetb.setIcon(new ImageIcon(ResetImage[0]));
		
		randomb.setBounds(190, 1, 95, 45);
		randomb.setContentAreaFilled(false);
		randomb.setBorderPainted(false);
		randomb.setFocusPainted(false);
		randomb.setIcon(new ImageIcon(RandomImage[0]));

		
		exitb.setBounds(285, 1, 95, 45);
		exitb.setContentAreaFilled(false);
		exitb.setBorderPainted(false);
		exitb.setFocusPainted(false);
		exitb.setIcon(new ImageIcon(ExitImage[0]));

		
		this.add(saveb);
		this.add(resetb);
		this.add(randomb);
		this.add(exitb);
		
		
		saveb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(StateTable.createmode==0)
				{
					if(StateTable.mate==0)
					{
						if(btncountsb<6 && SelectModel.nowboyindex!=-1)
						{
							SaveBtn t = new SaveBtn("" + (SelectModel.nowboyindex+1) + "-1.jpg");
							t.setBounds(80*btncountsb, 0, 80, 120);
							btncountsb++;
							savelistselectboy.add(t);
							savelistselectboy.repaint();
						}
						else
						{
							
						}
					}
					else if(StateTable.mate==1)
					{
						if(btncountsg<6 && SelectModel.nowgirlindex!=-1)
						{
							SaveBtn t = new SaveBtn("" + (SelectModel.nowgirlindex+1) + "-1.jpg");
							t.setBounds(80*btncountsg, 0, 80, 120);
							btncountsg++;
							savelistselectgirl.add(t);
							savelistselectgirl.repaint();

						}
						else
						{
							
						}
						
					}
				}
				else if(StateTable.createmode==1)
				{
					if(StateTable.mate==0)
					{
						if(btncountcb<6)
						{
							SaveBtn t = new SaveBtn("" + ShowCustomModel.bfaceindex + "-" + ShowCustomModel.bhairindex + "-" + ShowCustomModel.btopindex + "-" + ShowCustomModel.bhatindex + ".jpg");
							t.setBounds(80*btncountcb, 0, 80, 120);
							btncountcb++;
							savelistcustomboy.add(t);
							savelistcustomboy.repaint();
						}
						else
						{
							
						}
					
					}
					else if(StateTable.mate==1)
					{
						if(btncountcg<6)
						{
							SaveBtn t = new SaveBtn("" + ShowCustomModel.gfaceindex + "-" + ShowCustomModel.ghairindex + "-" + ShowCustomModel.gtopindex + "-" + ShowCustomModel.ghatindex + ".jpg");
							t.setBounds(80*btncountcg, 0, 80, 120);
							btncountcg++;
							savelistcustomgirl.add(t);
							savelistcustomgirl.repaint();
						}
						else
						{
							
						}
					
					}
				}
			}
		});
		
		saveb.addMouseListener(new MouseAdapter(){ 
			public void mouseClicked(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
			}
			
			public void mouseEntered(MouseEvent e)
			{
				saveb.setIcon(new ImageIcon(SaveImage[1]));
				SEmusicbox se = new SEmusicbox(0);
				se.start();
            }

			public void mouseExited(MouseEvent e) {
			   saveb.setIcon(new ImageIcon(SaveImage[0]));
			}
			
			public void mousePressed(MouseEvent e)
			{
               saveb.setIcon(new ImageIcon(SaveImage[2]));
			}
			
			public void mouseReleased(MouseEvent e)
			{
			   saveb.setIcon(new ImageIcon(SaveImage[1]));
			}
		}); 
		
		resetb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				SelectModel.nowboyindex=-1;
				SelectModel.nowgirlindex=-1;
				ShowCustomModel.bhairindex=0;
				ShowCustomModel.bfaceindex=0;
				ShowCustomModel.btopindex=0;
				ShowCustomModel.bhatindex=0;
				ShowCustomModel.ghairindex=0;
				ShowCustomModel.gfaceindex=0;
				ShowCustomModel.gtopindex=0;
				ShowCustomModel.ghatindex=0;
				savelistselectboy.removeAll();
				savelistselectgirl.removeAll();
				savelistcustomboy.removeAll();
				savelistcustomgirl.removeAll();
				savelistselectboy.repaint();
				savelistselectgirl.repaint();
				savelistcustomboy.repaint();
				savelistcustomgirl.repaint();
				btncountsb=0;
				btncountsg=0;
				btncountcb=0;
				btncountcg=0;
				showselectmodel.repaint();
				showcustommodel.repaint();
			}
		});

		resetb.addMouseListener(new MouseAdapter(){ 
			public void mouseClicked(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
			}
			
			public void mouseEntered(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(0);
				se.start();
				resetb.setIcon(new ImageIcon(ResetImage[1]));
            }

			public void mouseExited(MouseEvent e) {
				resetb.setIcon(new ImageIcon(ResetImage[0]));
			}

			public void mousePressed(MouseEvent e)
			{
               resetb.setIcon(new ImageIcon(ResetImage[2]));
			}
			
			public void mouseReleased(MouseEvent e)
			{
			   resetb.setIcon(new ImageIcon(ResetImage[1]));
			}
		}); 

		randomb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Random ran = new Random();
				if(StateTable.createmode==0)
				{
					if(StateTable.mate==0)
					{
						SelectModel.nowboyindex=ran.nextInt(SelectModel.boynum);
					}
					else if(StateTable.mate==1)
					{
						SelectModel.nowgirlindex=ran.nextInt(SelectModel.girlnum);
					}
					showselectmodel.repaint();
				}
				else if(StateTable.createmode==1)
				{
					if(StateTable.mate==0)
					{
						ShowCustomModel.bhairindex=ran.nextInt(9);
						ShowCustomModel.bfaceindex=ran.nextInt(9);
						ShowCustomModel.btopindex=ran.nextInt(9);
						ShowCustomModel.bhatindex=ran.nextInt(9);
					}
					else if(StateTable.mate==1)
					{
						ShowCustomModel.ghairindex=ran.nextInt(9);
						ShowCustomModel.gfaceindex=ran.nextInt(9);
						ShowCustomModel.gtopindex=ran.nextInt(9);
						ShowCustomModel.ghatindex=ran.nextInt(9);					
					}
					showcustommodel.repaint();
				}
			}
		});
		
		randomb.addMouseListener(new MouseAdapter(){ 
			public void mouseClicked(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
			}
			
			public void mouseEntered(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(0);
				se.start();
				randomb.setIcon(new ImageIcon(RandomImage[1]));
            }

			public void mouseExited(MouseEvent e) {
			   randomb.setIcon(new ImageIcon(RandomImage[0]));
			}

			public void mousePressed(MouseEvent e)
			{
               randomb.setIcon(new ImageIcon(RandomImage[2]));
			}
			
			public void mouseReleased(MouseEvent e)
			{
			   randomb.setIcon(new ImageIcon(RandomImage[1]));
			}
		}); 

		exitb.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});
		
		exitb.addMouseListener(new MouseAdapter(){ 
			public void mouseClicked(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(1);
				se.start();
			}
			
			public void mouseEntered(MouseEvent e)
			{
				SEmusicbox se = new SEmusicbox(0);
				se.start();
				exitb.setIcon(new ImageIcon(ExitImage[1]));
            }

			public void mouseExited(MouseEvent e) {
			   exitb.setIcon(new ImageIcon(ExitImage[0]));
			}

			public void mousePressed(MouseEvent e)
			{
               exitb.setIcon(new ImageIcon(ExitImage[2]));
			}
			
			public void mouseReleased(MouseEvent e)
			{
			   exitb.setIcon(new ImageIcon(ExitImage[1]));
			}
		}); 

	}
	
	public static void setshowselectmodel(ShowSelectModel t) {
		showselectmodel=t;
	}

	public static void setshowcustommodel(ShowCustomModel t) {
		showcustommodel=t;
	}
	
	/*
	public static void setlistmodel(JPanel t) {
		list=t;
	}
	*/
	public static void setalllist(SaveListSelectBoy a,SaveListSelectGirl b,SaveListCustomBoy c,SaveListCustomGirl d) {
		savelistselectboy=a;
		savelistselectgirl=b;
		savelistcustomboy=c;
		savelistcustomgirl=d;
	}
}

class SaveListBase extends JPanel{
	SaveListBase(){
		super();
		this.setLayout(new CardLayout());
		this.setOpaque(false);
		SaveListSelectBoy savelistselectboy = new SaveListSelectBoy();
		SaveListSelectGirl savelistselectgirl = new SaveListSelectGirl();
		SaveListCustomBoy savelistcustomboy = new SaveListCustomBoy();
		SaveListCustomGirl savelistcustomgirl = new SaveListCustomGirl();
		
		savelistselectboy.setBounds(0, 0, 480, 120);
		savelistselectgirl.setBounds(0, 0, 480, 120);
		savelistcustomboy.setBounds(0, 0, 480, 120);
		savelistcustomgirl.setBounds(0, 0, 480, 120);
		
		this.add(savelistselectboy, "SB");
		this.add(savelistselectgirl, "SG");
		this.add(savelistcustomboy, "CB");
		this.add(savelistcustomgirl, "CG");
		StateTable.setsavelistbase(this);
		StateTable.setsavelistcardlayout((CardLayout )this.getLayout());
		FunctionalBlock.setalllist(savelistselectboy, savelistselectgirl, savelistcustomboy, savelistcustomgirl);
	}
}

class SaveListSelectBoy extends JPanel{
	SaveListSelectBoy(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
	}
}

class SaveListSelectGirl extends JPanel{
	SaveListSelectGirl(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		
	}
}

class SaveListCustomBoy extends JPanel{
	SaveListCustomBoy(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		
	}
}

class SaveListCustomGirl extends JPanel{
	SaveListCustomGirl(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		
	}
}

class SaveBtn extends JButton{
	Image img;
	int nowboyindex;
	int nowgirlindex;
	int bhairindex;
	int bfaceindex;
	int btopindex;
	int bhatindex;
	int ghairindex;
	int gfaceindex;
	int gtopindex;
	int ghatindex;	
	SaveBtn(String btnname){
		super(btnname);
		String s=null;
		if(StateTable.createmode==0)
		{
			if(StateTable.mate==0)
			{
				s="/characterboyImage/" + btnname;
				nowboyindex = SelectModel.nowboyindex;
			}
			else if(StateTable.mate==1)
			{
				s="/charactergirlImage/" + btnname;
				nowgirlindex = SelectModel.nowgirlindex;
			}
			URL url = getClass().getResource(s);
			try {
				img = ImageIO.read(url);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		else if(StateTable.createmode==1)
		{
			if(StateTable.mate==0)
			{
				s="/CustomBoyImage/" + btnname;
				bfaceindex = ShowCustomModel.bfaceindex;
				bhairindex = ShowCustomModel.bhairindex;
				btopindex = ShowCustomModel.btopindex;
				bhatindex = ShowCustomModel.bhatindex;
			}
			else if(StateTable.mate==1)
			{
				s="/CustomGirlImage/" + btnname;
				gfaceindex = ShowCustomModel.gfaceindex;
				ghairindex = ShowCustomModel.ghairindex;
				gtopindex = ShowCustomModel.gtopindex;
				ghatindex = ShowCustomModel.ghatindex;
			}
			URL url = getClass().getResource(s);
			try {
				img = ImageIO.read(url);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		this.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String s=SaveBtn.this.getText();
				if(StateTable.createmode==0)
				{
					if(StateTable.mate==0)
					{					
						SelectModel.nowboyindex=nowboyindex;
					}
					else if(StateTable.mate==1)
					{
						SelectModel.nowgirlindex=nowgirlindex;
					}
					StateTable.showselectmodel.repaint();
				}
				else if(StateTable.createmode==1)
				{
					if(StateTable.mate==0)
					{
						ShowCustomModel.bfaceindex=bfaceindex;
						ShowCustomModel.bhairindex=bhairindex;
						ShowCustomModel.btopindex=btopindex;
						ShowCustomModel.bhatindex=bhatindex;
					}
					else if(StateTable.mate==1)
					{
						ShowCustomModel.gfaceindex=gfaceindex;
						ShowCustomModel.ghairindex=ghairindex;
						ShowCustomModel.gtopindex=gtopindex;
						ShowCustomModel.ghatindex=ghatindex;
						
					}
					StateTable.showcustommodel.repaint();
				}
			}
		});

	}
	
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.drawImage(img, 0, 0, 80, 120, 0, 0, 400, 600, this);
	}
}

class ModeModel extends JPanel{
	ModeModel(){
		super();
		this.setLayout(new CardLayout());
		this.setOpaque(false);
		CardLayout modelcardlayout = (CardLayout)this.getLayout();
		ShowSelectModel showselectmodel = new ShowSelectModel();
		ShowCustomModel showcustommodel = new ShowCustomModel();
		StateTable.setmodelayout(modelcardlayout);
		StateTable.setmodemodel(this);
		this.add(showselectmodel,"select");
		this.add(showcustommodel,"custom");
	}
}

class ShowSelectModel extends JPanel{
	static Image cgirlimages[] = new Image[SelectModel.girlnum];
	static Image cboyimages[] = new Image[SelectModel.boynum];
	static Image remove;
	ShowSelectModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//JPanel list = new JPanel();
		//list.setLayout(null);
		//list.setBounds(2, 625, 480, 120);
		//this.add(list);
		//FunctionalBlock.setpaintpanel(this);
		
		//DefaultListModel<JPanel> model = new DefaultListModel<>();
		//JList<JPanel> stlist;
		//stlist =new JList<>(model);
		//stlist.setBounds(GameUI.width/2-175, GameUI.height/2-150, 350, 300);
		//stlist.setBorder(BorderFactory.createLineBorder(Color.white,5));

		//stlist.setCellRenderer(new MyListCellRenderer());
		//stlist.setBackground(Color.getHSBColor(255, 255, 255));
		//stlist.setSelectedIndex(0);
		//stlist.setBounds(2, 625, 480, 120);
		
		for(int i=0;i<SelectModel.boynum;i++)
		{
			int g=i+1;
			String s = "/characterboyImage/"+ g + "-1.jpg";
			//File file = new File(s);
			try {
				//cboyimages[i]=ImageIO.read(getClass().getResourceAsStream(s));
				cboyimages[i]=ImageIO.read(getClass().getResource(s));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		for(int i=0;i<SelectModel.girlnum;i++)
		{
			int g=i+1;
			String s = "/charactergirlImage/"+ g + "-1.jpg";
			//File file = new File(s);
			try {
				//cgirlimages[i]=ImageIO.read(getClass().getResourceAsStream(s));
				cgirlimages[i]=ImageIO.read(getClass().getResource(s));
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		String s = "/InterfaceImage/interface15.png";
		URL url = getClass().getResource(s);
		try {
			remove=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//this.add(stlist);
		//FunctionalBlock.setlistmodel(list);
		FunctionalBlock.setshowselectmodel(this);
		SelectModel.setupdatescreen(this);
		StateTable.setshowselectmodel(this);
		//paintComponent(this.getGraphics());
	}
	
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		if(SelectModel.nowboyindex!=-1 && StateTable.mate==0)
		{
			g.drawImage(cboyimages[SelectModel.nowboyindex], 46, 20, 446, 620, 0, 0, 400, 600, null);
		}
		else if(SelectModel.nowgirlindex!=-1 && StateTable.mate==1)
		{
			g.drawImage(cgirlimages[SelectModel.nowgirlindex], 46, 20, 446, 620, 0, 0, 400, 600, null);
		}
		else
		{
			g.drawImage(remove, 46, 20, 446, 620, 352, 30, 752, 630, null);
		}
	}
	
}

class ShowCustomModel extends JPanel{
	//static int hairindex=0,faceindex=0,topindex=0,hatindex=0;
	static int bhairindex=0,bfaceindex=0,btopindex=0,bhatindex=0;
	static int ghairindex=0,gfaceindex=0,gtopindex=0,ghatindex=0;
	static Image showimage;
	//static Image Image[]=new Image[6561];
	ShowCustomModel(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		
		FunctionalBlock.setshowcustommodel(this);
		CustomModel.setshowcustommodel(this);
		StateTable.setshowcustommodel(this);
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		String s = null;
		if(StateTable.mate==0)
		{
			s ="/CustomBoyImage/"+ bfaceindex + "-" + bhairindex + "-" + btopindex + "-" + bhatindex + ".jpg";
		}
		else if(StateTable.mate==1)
		{
			s ="/CustomGirlImage/"+ gfaceindex + "-" + ghairindex + "-" + gtopindex + "-" + ghatindex + ".jpg";
		}
		URL url = getClass().getResource(s);
		try {
			showimage=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		g.drawImage(showimage, 46, 20, 446, 620, 0, 0, 400, 600,null);
	}
}




class Playing extends JPanel{
	//static Image img;
	static String playername = "";
	static int playerlevel = 1;
	static int playerexperience = 0;
	static int demandexperience = 540;
	static int playernowhp = 500;
	static float playermaxhp = 500;
	static int playernowmp = 200;
	static float playermaxmp = 200;
	static int playernowtp = 30;
	static int playermaxtp = 300;
	static boolean playerpaint = true;
	static Image BigMap;
	static Image TopBigMap;
	static Image transferimage;
	static int MapState[][][]= new int[305][205][205];
	static int IsRun[][][] = new int[][][] {
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //10
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,2,1,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,2,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,3,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,2,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,1,1,1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //11
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //12
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	   
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //13
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //14
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //15
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}  
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //16
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //17
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //18
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //19
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //20
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //21
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //22
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //23
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,2,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	   
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //24
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	   
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//25
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //26
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	 
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //27
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //28
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//29
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,1,1,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,1,1,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //30
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,1,1,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,1,1,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //31
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	   
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //32
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //33
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //34
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //35
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //36
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //37
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //38
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //39
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	   ,
	  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //40
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	};
	Random ran = new Random();	   
	static int nowmap=0;
	static Image npcimage[][] = new Image[20][20];
	static int npctoward[][] = new int[220][20];
	static int npccor[][]= new int[220][20];
	static int career = 1;
	static int counter214 = 0;
	static int counter215 = 0;
	static Image monsterimage;
	static Image skill214;
	static Image skill215;
	static int monstercor[][] = new int[20][2];
	Playing(){
		super();
		this.setLayout(null);
		PanelListenner.setplaying(this);
		PlayerInformationValue playerinformationvalue = new PlayerInformationValue();
		ExperienceValue experiencevalue = new ExperienceValue();
		InformationWindow informationwindow = new InformationWindow();
		TaskSystem tasksystem = new TaskSystem();
		PlayerAbilitySystem playerabilitysystem = new PlayerAbilitySystem();
		PlayerSubAbility playersubability = new PlayerSubAbility();
		MiniMap minimap = new MiniMap();
		NowMapInfo nowmapinfo = new NowMapInfo();
		SkillDisplayField skilldisplayfield = new SkillDisplayField();
		SkillDisplaySubField skilldisplaysubfield = new SkillDisplaySubField();
		FunctionList functionlist = new FunctionList();
		PlayerEquipmentInfo playerequipmentinfo = new PlayerEquipmentInfo();
		SkillPage skillpage = new SkillPage();
		SettingInfo settinginfo = new SettingInfo();
		CreatorList creatorlist = new CreatorList();

		TalkWindow talkwindow = new TalkWindow();
		NPCImageArea npcimagearea = new NPCImageArea();
		PanelListenner plt = new PanelListenner();
		String s;
		URL url;
		for(int i=0;i<9;i++)
		SkillImage.skillcd[i]=false;
		s = "/monster/Monster.png";
		url=getClass().getResource(s);
		try {
			monsterimage=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		s = "/SkillImage/Cure3.png";
		url=getClass().getResource(s);
		try {
			transferimage=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}

		s = "/SkillImage/214-2.png";
		url=getClass().getResource(s);
		try {
			skill214=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		s = "/SkillImage/215-2.png";
		url=getClass().getResource(s);
		try {
			skill215=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		s = "/BMap/map" + (nowmap+10) + ".png";
		url=getClass().getResource(s);
		try {
			BigMap=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		s = "/BMap/" + (nowmap+10) + "-2.png";
		url=getClass().getResource(s);
		try {
			TopBigMap=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
	
		///記憶體需求太大
		
		s="/npc/b0-walk.png";
		url=getClass().getResource(s);
		try {
			npcimage[0][0]=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
/*		
		s="/npc/b1-walk.png";
		url=getClass().getResource(s);
		try {
			npcimage[0][1]=ImageIO.read(url);
			npcimage[0][2]=ImageIO.read(url);
			npcimage[0][3]=ImageIO.read(url);
			npcimage[0][4]=ImageIO.read(url);
			npcimage[0][5]=ImageIO.read(url);
			npcimage[11][0]=ImageIO.read(url);
			npcimage[11][1]=ImageIO.read(url);
			npcimage[11][2]=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
*/		
		s="/npc/b2-walk.png";
		url=getClass().getResource(s);
		try {
			npcimage[0][1]=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
	
		s="/npc/b3-walk.png";
		url=getClass().getResource(s);
		try {
			npcimage[0][2]=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}

		s="/npc/b4-walk.png";
		url=getClass().getResource(s);
		try {
			npcimage[0][3]=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}

		for(int k=0;k<8;k++)
			 for(int i=0;i<Monster.monstercount;i++)
				Monster.monsteractive[k][i]=false;

		
		npctoward[0][0]=2;
		/*
		npctoward[0][1]=4;
		npctoward[0][2]=2;
		npctoward[0][3]=3;
		npctoward[0][4]=2;
		npctoward[0][5]=2;
		*/
		npctoward[0][1]=2;
		npctoward[0][2]=2;
		npctoward[0][3]=2;
/*
		npctoward[11][0]=2;
		npctoward[11][1]=2;
		npctoward[11][2]=4;
*/	
		
		npccor[0][0]=3431;
		/*
		npccor[0][1]=1325;//
		npccor[0][2]=5241;//
		npccor[0][3]=6026;//		
		npccor[0][4]=3615;//
		npccor[0][5]=5220;//
		*/
		npccor[0][1]=3030;
		npccor[0][2]=3531;
		npccor[0][3]=3631;
		/*
		npccor[11][0]=3609;
		npccor[11][1]=3709;
		npccor[11][2]=3808;
	*/
		/*
		npcimage[3][0]=npcimage[0][7];
				
		npctoward[0][0]=2; 
		npctoward[0][1]=2;
		npctoward[0][2]=2;
		npctoward[0][3]=2;
		npctoward[0][4]=3;
		npctoward[0][5]=3;
		npctoward[0][6]=3;
		npctoward[0][7]=2;
		npctoward[0][8]=2;
		npctoward[0][9]=2;
		npctoward[0][10]=3;
		
		npccor[0][0]=3926;
		npccor[0][1]=4026;
		npccor[0][2]=4126;
		npccor[0][3]=4226;		
		npccor[0][4]=4229;
		npccor[0][5]=4230;
		npccor[0][6]=4231;
		npccor[0][7]=3311;
		npccor[0][8]=2923;
		npccor[0][9]=2015;
		npccor[0][10]=4327;
		*/
		
		
		playerinformationvalue.setBounds(0, 0, 440, 145);
		informationwindow.setBounds(0, 250, 250, 305);	
		experiencevalue.setBounds(0, 753, 1200, 15);
		minimap.setBounds(1000, 0, 200, 200);
		nowmapinfo.setBounds(1000, 200, 200, 45);
		tasksystem.setBounds(TaskSystem.taskx,TaskSystem.tasky,550,400);
		playerabilitysystem.setBounds(PlayerAbilitySystem.abilityx, PlayerAbilitySystem.abilityy, 300, 530);
		playersubability.setBounds(PlayerAbilitySystem.abilityx+305, PlayerAbilitySystem.abilityy+220, 250, 310);
		skilldisplayfield.setBounds(skilldisplayfield.fieldx, skilldisplayfield.fieldy, 565, 70);
		skilldisplaysubfield.setBounds(skilldisplaysubfield.subfieldx, skilldisplaysubfield.subfieldy, 160, 130);
		functionlist.setBounds(FunctionList.listx, FunctionList.listy, 455, 80);
		playerequipmentinfo.setBounds(playerequipmentinfo.playerinfox, playerequipmentinfo.playerinfoy, 200, 310);
		skillpage.setBounds(skillpage.skillpagex, skillpage.skillpagey, 720, 450);
		settinginfo.setBounds(settinginfo.settingx, settinginfo.settingy, 570, 325);
		creatorlist.setBounds(150, 60, 900, 700);
		talkwindow.setBounds(1, 520, 1198, 248);
		npcimagearea.setBounds(800, 168, 400, 600);
		
		PanelListenner.talkwindow=talkwindow;
		PanelListenner.npcimagearea=npcimagearea;
		PanelListenner.playerinformationvalue=playerinformationvalue;
		PanelListenner.experiencevalue=experiencevalue;
		PanelListenner.skilldisplayfield=skilldisplayfield;
		PanelListenner.skilldisplaysubfield=skilldisplaysubfield;
		PanelListenner.playersubability=playersubability;
		PanelListenner.functionlist=functionlist;
		PanelListenner.settinginfo=settinginfo;
		
		//FloatControl volumecontrol = (FloatControl)SEmusicbox.clip.getControl(FloatControl.Type.MASTER_GAIN);
		//volumecontrol.setValue(-10);

		
		
		this.addKeyListener(plt);
		//this.add(talkwindow);
		this.add(minimap);
		this.add(nowmapinfo);
		this.add(playerinformationvalue);
		//this.add(informationwindow,2);
		this.add(experiencevalue);
		this.add(skilldisplayfield,4);
		this.add(skilldisplaysubfield);
		this.add(functionlist);
		//this.add(skillpage);
		this.setFocusable(true);
		this.requestFocusInWindow();
		//System.out.println(this.getComponentCount());
		PanelListenner.creatorlist=creatorlist;
		PanelListenner.settasksystem(tasksystem);
		PanelListenner.setinformationwindow(informationwindow);
		PanelListenner.setminimap(minimap);
		PanelListenner.setplayerabilitysystem(playerabilitysystem);
		PanelListenner.playerequipmentinfo=playerequipmentinfo;
		PanelListenner.skillpage=skillpage;
		PanelListenner.nowmapinfo=nowmapinfo;
		SkillImage.plt=plt;
		PlayerAbilitySystem.setsubability(playersubability);
		//PanelListenner.setplaying(this);
	}
	
	public void initital() {	
		Player player = new Player();
		player.start();
		Screenupdate screenupdate = new Screenupdate(this);
		screenupdate.start();
		Monster monster = new Monster();
		//monster.initial();
		monster.start();
		Player.monster=monster;
		//this.setFocusable(true);
		//this.requestFocusInWindow();
		//System.out.println("GGGGG");
		//System.out.println(KeyEvent.VK_UP);
	}
	/*
	public void paint(Graphics g)
	{
		super.paint(g);
	*/
	public void paintComponent(Graphics g)
	{
		//super.paintComponent(g);
		
		int x=0,y=0;
	
		for(int i=(Player.getplayerx()-12*48);i<=(Player.getplayerx()+13*48);i=i+48)
		{
			
			for(int j=(Player.getplayery()-8*48);j<=(Player.getplayery()+7*48);j=j+48)
			{
				
				g.drawImage(BigMap, x*48, y*48,(x+1)*48,(y+1)*48,i,j,i+48,j+48,null);
				for(int k=0;k<=3;k++)
				{
					if(i/48==npccor[nowmap][k]/100 && j/48==npccor[nowmap][k]%100)
					{
					//System.out.println("GGGG");
						if(npctoward[nowmap][k]==1)
						{
							g.drawImage(npcimage[nowmap][k], x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*3,48*2,48*4,null);
						}
						else if(npctoward[nowmap][k]==2)
						{
							g.drawImage(npcimage[nowmap][k], x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*0,48*2,48*1,null);
						}
						else if(npctoward[nowmap][k]==3)
						{
							g.drawImage(npcimage[nowmap][k], x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*1,48*2,48*2,null);
						}
						else if(npctoward[nowmap][k]==4)
						{
							g.drawImage(npcimage[nowmap][k], x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*2,48*2,48*3,null);
						}
					}
				}
				//Player.paint(g,12,8);

				if(Monster.monsterset[nowmap])
				{
					Monster.paint(g, i, j, x, y);
				}
				y++;
			}
			x++;
			y=0;
		}
	
		
		if(playerpaint)
		Player.paint(g,12,8);
		
		x=y=0;
		
		for(int i=(Player.getplayerx()-12*48);i<=(Player.getplayerx()+13*48);i=i+48)
		{
			for(int j=(Player.getplayery()-8*48);j<=(Player.getplayery()+7*48);j=j+48)
			{
			    g.drawImage(TopBigMap, x*48, y*48,(x+1)*48,(y+1)*48,i,j,i+48,j+48,null);
				y++;
			}
			x++;
			y=0;
		}

		x=y=0;

		for(int i=(Player.getplayerx()-12*48);i<=(Player.getplayerx()+13*48);i=i+48)
		{
			for(int j=(Player.getplayery()-8*48);j<=(Player.getplayery()+7*48);j=j+48)
			{
				if(MapState[nowmap][j/48+1][i/48+1]==214)
				{
					if(counter214%40==0)
					{
						SEmusicbox se = new SEmusicbox(2142);
						se.start();
					}
					//.
					//System.out.println("GGG");
					g.drawImage(skill214, x*48, y*48,(x+3)*48,(y+3)*48,counter214/10*144,0,counter214/10*144+144,144,null);			

					counter214++;
					counter214%=40;
				}
				else if(MapState[nowmap][j/48+1][i/48+1]==215)
				{
					//.
					if(counter215%60==0)
					{
						SEmusicbox se = new SEmusicbox(2152);
						se.start();
					}
					//.
					//System.out.println("GGG");
					g.drawImage(skill215, x*48, y*48,(x+3)*48,(y+3)*48,(counter215/10+1)%5*144,0+counter215/50*144,(counter215/10+1)%5*144+144,0+counter215/50*144+144,null);			

					counter215++;
					if(counter215==130)
					counter215-=70;
				}
				
			    y++;
			}
			x++;
			y=0;
		}

		x=y=0;		
	}
	//10~40
}

class Playing1{
static int IsRun[][][] = new int[][][] {
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //41
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //42
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //43
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,1,0,0,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //44
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	 
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //45
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //46
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //47
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //48
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //49
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //50
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //51
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //52
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //53
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //54
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //55
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //56
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //57
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,2,0,1,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,2,0,1,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,2,0,0,0,2,0,1,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,2,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //58
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //59
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //60
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	   
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //61
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //62
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //63
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //64
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //65
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //66
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //67
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //68
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //69
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
			   ,
			  {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //70
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}			   
	};

	//41~70
}

class Playing2{
static int IsRun[][][] = new int[][][] {
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //71      
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //72
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //73
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //74
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //75
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //76
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //77
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //78
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,1,1,1,1,1,1,1,1,2,0,0,1,1,0,0,2,1,1,1,1,1,1,1,1,2,0,0,1,1,0,0,2,1,1,1,1,1,1,1,1,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,2,1,1,1,0,0,0,0,2,1,1,1,0,0,0,0,2,1,1,1,1,1,1,2,0,0,0,0,1,1,1,2,0,0,0,0,1,1,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //79
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //80
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //81
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //82
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //83
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //84
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //85
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //86
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //87
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //88
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //89
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //90
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //91
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //92
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //93
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //94
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //95
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //96
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //97
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,1,1,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,1,0,0,0,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //98
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //99
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //100
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}    
};

    //71-100
}


class Playing3{
static int IsRun[][][] = new int[][][] {
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},   //101
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //102
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //103
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //104
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //105
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //106
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //107
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //108
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //109
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //110
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //111
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,1,1,1,1,1,0,0,0,0,0,2,1,1,1,1,1,1,1,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //112
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //113 
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,1,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //114
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //115
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //116
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //117
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //118
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //119
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //120
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //121
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //122
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //123
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //124
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //125
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,1,1,0,0,0,2,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,1,1,1,1,0,2,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,2,0,0,0,0,0,2,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,1,0,0,2,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //126
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //127
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //128
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //129
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //130
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
};

 //101-130
}

class Playing4{
static int IsRun[][][] = new int[][][] {
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //131
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //132
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //133
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //134
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //135
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //136
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //137
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //138
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //139
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //140
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //141
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,1,0,1,1,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},   //142
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //143
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //144
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //145
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //146
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //147
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //148
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},   //149
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //150
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //151
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //152
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //153
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},   //154
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,1,1,0,0,2,0,0,0,0,0,0,2,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,2,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,2,1,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //155
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //156
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //157
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},   //158
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //159
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
	,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //160
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}	
};

 //131-160
}

class Playing5{
static int IsRun[][][] = new int[][][] {
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //161
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //162
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2,0,1,1,1,1,0,0,2,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //163
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //164
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //165
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,2,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,2,2,2,2,2,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},   //166
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //167
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //168
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,2,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //169
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,2,2,2,0,0,0,0,0,0,0,2,2,2,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},   //170
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,2,2,2,0,0,0,0,0,0,0,2,2,2,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //171
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //172
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,2,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //173
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //174
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //175
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //176
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //177
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //178
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //179
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //180
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //181
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //182
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //183
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //184
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //185
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //186
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //187
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //188
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //189
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //190
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}   
};

 //161-190
}



class Playing6{
static int IsRun[][][] = new int[][][] {
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //191
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,2,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,2,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //192
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //193
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //194
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //195
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //196
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //197
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //198
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //199
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //200
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //201
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,2,2,2,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //202
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //203
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //204
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //205
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //206
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //207
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,2,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //208
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,2,2,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}    
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //209
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //210
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //211
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,1,1,1,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //212
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //213
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //214
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //215
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //216
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //217
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, //218
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
    ,
   {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //219
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}    	
};
 //191-219

}

class TalkWindow extends JPanel{
	JTextArea talk = new JTextArea();
	TalkWindow(){
		super();
		this.setOpaque(false);
		this.setLayout(null);
		JLabel background = new JLabel();
		//JTextArea talk = new JTextArea();
		String s = "/ListIcon/talk.png";
		URL url = getClass().getResource(s);
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		talk.setEditable(false);
		talk.setFocusable(false);
		talk.setOpaque(false);
		talk.setFont(new Font("標楷體",1,40));
		//talk.setText("GGGGGGGGG");
		background.setBounds(0, 0, 1198, 248);
		talk.setBounds(20, 20, 1198, 248);
		this.add(background);
		background.add(talk);
	}
}

class NPCImageArea extends JPanel{
	static JLabel image = new JLabel();
	static int size = 5;
	static Image npcimage[] = new Image[20]; 
	NPCImageArea(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		for(int i=0;i<size;i++)
		{
			String s = "/npc/b" + i +"-show.png";
			URL url = getClass().getResource(s);
			try {
				npcimage[i]=ImageIO.read(url);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		image.setBounds(0, 0, 400, 600);
		
		this.add(image);
	}
	
	public void setlabel(int index) {
		
		image.setIcon(new ImageIcon(npcimage[index]));
		/*
		if(index==1)
		image.setBounds(70, 0, 400, 600);
		else if(index==3)
		image.setBounds(120, 0, 400, 600);
		else if(index==4)
		image.setBounds(0, 150, 400, 600);
		else if(index==5 || index==6)
		image.setBounds(40, 0, 400, 600);
		else
		*/
		image.setBounds(0, 0, 400, 600);
	}
}

class MiniMap extends JPanel{

	MiniMap(){
		super();
		this.setLayout(null);
		this.setBorder(BorderFactory.createLineBorder(Color.black,1));
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		int x=0;
		int y=0;
		
		for(int i=Player.playerx-5;i<Player.playerx+5;i++)
		{
			for(int j=Player.playery-5;j<Player.playery+5;j++)
			{
				if(Playing.nowmap>=0 && Playing.nowmap<=30)
				{
				    if(Playing.IsRun[Playing.nowmap][j][i]==0) //不行走
					{
						g.setColor(new Color(160,160,160));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing.IsRun[Playing.nowmap][j][i]==1) //可行走
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing.IsRun[Playing.nowmap][j][i]==2) //藍色傳點
					{
						g.setColor(new Color(0,125,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing.IsRun[Playing.nowmap][j][i]==3) //NPC橘色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(255,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
					else if(Playing.IsRun[Playing.nowmap][j][i]==4) //怪物綠色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(100,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
				}
				else if(Playing.nowmap>=31 && Playing.nowmap<=60)
				{
				    if(Playing1.IsRun[Playing.nowmap-31][j][i]==0) //不行走
					{
						g.setColor(new Color(160,160,160));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing1.IsRun[Playing.nowmap-31][j][i]==1) //可行走
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing1.IsRun[Playing.nowmap-31][j][i]==2) //藍色傳點
					{
						g.setColor(new Color(0,125,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing1.IsRun[Playing.nowmap-31][j][i]==3) //NPC橘色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(255,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
					else if(Playing1.IsRun[Playing.nowmap-31][j][i]==4) //怪物綠色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(100,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
				}
				else if(Playing.nowmap>=61 && Playing.nowmap<=90)
				{
				    if(Playing2.IsRun[Playing.nowmap-61][j][i]==0) //不行走
					{
						g.setColor(new Color(160,160,160));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing2.IsRun[Playing.nowmap-61][j][i]==1) //可行走
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing2.IsRun[Playing.nowmap-61][j][i]==2) //藍色傳點
					{
						g.setColor(new Color(0,125,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing2.IsRun[Playing.nowmap-61][j][i]==3) //NPC橘色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(255,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
					else if(Playing2.IsRun[Playing.nowmap-61][j][i]==4) //怪物綠色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(100,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
				}
				else if(Playing.nowmap>=91 && Playing.nowmap<=120)
				{
				    if(Playing3.IsRun[Playing.nowmap-91][j][i]==0) //不行走
					{
						g.setColor(new Color(160,160,160));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing3.IsRun[Playing.nowmap-91][j][i]==1) //可行走
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing3.IsRun[Playing.nowmap-91][j][i]==2) //藍色傳點
					{
						g.setColor(new Color(0,125,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing3.IsRun[Playing.nowmap-91][j][i]==3) //NPC橘色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(255,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
					else if(Playing3.IsRun[Playing.nowmap-91][j][i]==4) //怪物綠色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(100,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
				}
				else if(Playing.nowmap>=121 && Playing.nowmap<=150)
				{
				    if(Playing4.IsRun[Playing.nowmap-121][j][i]==0) //不行走
					{
						g.setColor(new Color(160,160,160));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing4.IsRun[Playing.nowmap-121][j][i]==1) //可行走
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing4.IsRun[Playing.nowmap-121][j][i]==2) //藍色傳點
					{
						g.setColor(new Color(0,125,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing4.IsRun[Playing.nowmap-121][j][i]==3) //NPC橘色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(255,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
					else if(Playing4.IsRun[Playing.nowmap-121][j][i]==4) //怪物綠色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(100,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
				}
				else if(Playing.nowmap>=151 && Playing.nowmap<=180)
				{
				    if(Playing5.IsRun[Playing.nowmap-151][j][i]==0) //不行走
					{
						g.setColor(new Color(160,160,160));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing5.IsRun[Playing.nowmap-151][j][i]==1) //可行走
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing5.IsRun[Playing.nowmap-151][j][i]==2) //藍色傳點
					{
						g.setColor(new Color(0,125,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing5.IsRun[Playing.nowmap-151][j][i]==3) //NPC橘色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(255,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
					else if(Playing5.IsRun[Playing.nowmap-151][j][i]==4) //怪物綠色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(100,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
				}
				else if(Playing.nowmap>=181 && Playing.nowmap<=210)
				{
				    if(Playing6.IsRun[Playing.nowmap-181][j][i]==0) //不行走
					{
						g.setColor(new Color(160,160,160));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing6.IsRun[Playing.nowmap-181][j][i]==1) //可行走
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing6.IsRun[Playing.nowmap-181][j][i]==2) //藍色傳點
					{
						g.setColor(new Color(0,125,255));
						g.fillRect(x*20, y*20, 20, 20);
					}
					else if(Playing6.IsRun[Playing.nowmap-181][j][i]==3) //NPC橘色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(255,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
					else if(Playing6.IsRun[Playing.nowmap-181][j][i]==4) //怪物綠色
					{
						g.setColor(new Color(255,255,255));
						g.fillRect(x*20, y*20, 20, 20);
						g.setColor(new Color(100,182,12));
						g.fillOval(x*20, y*20, 20, 20);
	
					}
				}
				
				y++;
			}
			y=0;
			x++;
		}
		
		g.setColor(Color.red);
		g.fillOval(5*20, 5*20, 20, 20);
		x=y=0;
	}
	
}

class NowMapInfo extends JTextArea{
	NowMapInfo(){
		super();
		this.setEditable(false);
		this.setFocusable(false);
		this.setFont(new Font("標楷體",0,20));
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		String s="地圖：";
		String t=this.getText();
		s = s + "[X=" + Player.playerx + "][Y=" + Player.playery + "]\n";
		if(Playing.nowmap==0)
		{
			s = s + "春暮鎮";
		}
		else if(Playing.nowmap==1)
		{
			s = s + "春暮鎮-長老的家";
		}
		else if(Playing.nowmap==2)
		{
			s = s +"春暮鎮-武器販賣店";
		}
		else if(Playing.nowmap==3)
		{
			s = s +"春暮鎮-朋友的家";
		}
		else if(Playing.nowmap==4)
		{
			s = s +"春暮鎮-我的家";
		}
		else if(Playing.nowmap==5)
		{
			s = s +"春暮鎮-花店外圍";
		}
		else if(Playing.nowmap==6)
		{
			s = s +"春暮鎮-花店2樓外";
		}
		else if(Playing.nowmap==7)
		{
			s = s +"春暮鎮-花店2樓";
		}
		else if(Playing.nowmap==8)
		{
			s = s +"春暮鎮-花店1樓";
		}
		else if(Playing.nowmap==9)
		{
			s = s +"春暮鎮-護衛的家";
		}
		else if(Playing.nowmap==10)
		{
			s = s +"春暮鎮-倉庫";
		}
		else if(Playing.nowmap==11)
		{
			s = s +"森林";
		}
		else if(Playing.nowmap==12)
		{
			s = s +"森林墳墓";
		}
		else if(Playing.nowmap==13)
		{
			s = s +"寺廟";
		}
		else if(Playing.nowmap==14)
		{
			s = s +"寺廟內";
		}
		else if(Playing.nowmap==15)
		{
			s = s +"寺廟內";
		}
		else if(Playing.nowmap==16)
		{
			s = s +"寺廟內";
		}
		else if(Playing.nowmap==17)
		{
			s = s +"寺廟地下";
		}
		else if(Playing.nowmap==18)
		{
			s = s +"寺廟地下-2";
		}
		else if(Playing.nowmap==19)
		{
			s = s +"寺廟地下-3";
		}
		else if(Playing.nowmap==20)
		{
			s = s +"寺廟地下-3";
		}
		else if(Playing.nowmap==21)
		{
			s = s +"訓練森林";
		}
		else if(Playing.nowmap==22)
		{
			s = s +"訓練森林-2";
		}
		else if(Playing.nowmap==23)
		{
			s = s +"訓練森林-3";
		}
		else if(Playing.nowmap==24)
		{
			s = s +"訓練森林-4";
		}
		else if(Playing.nowmap==25)
		{
			s = s +"地下墳墓";
		}
		else if(Playing.nowmap==26)
		{
			s = s +"地下墳墓-2";
		}
		else if(Playing.nowmap==27)
		{
			s = s +"地下墳墓-3";
		}
		else if(Playing.nowmap==28)
		{
			s = s +"地下墳墓";
		}
		else if(Playing.nowmap==29)
		{
			s = s +"地下墳墓-2";
		}
		else if(Playing.nowmap==30)
		{
			s = s +"地下墳墓-3";
		}
		else if(Playing.nowmap==31)
		{
			s = s +"城堡內";
		}
		else if(Playing.nowmap==32)
		{
			s = s +"城堡二樓";
		}
		else if(Playing.nowmap==33)
		{
			s = s +"水池";
		}
		else if(Playing.nowmap==34)
		{
			s = s +"平民房間";
		}
		else if(Playing.nowmap==35)
		{
			s = s +"平民房間-2";
		}
		else if(Playing.nowmap==36)
		{
			s = s +"平民房間-3";
		}
		else if(Playing.nowmap==37)
		{
			s = s +"平民房間-4";
		}
		else if(Playing.nowmap==38)
		{
			s = s +"海灘";
		}
		else if(Playing.nowmap==39)
		{
			s = s +"後山森林";
		}
		else if(Playing.nowmap==40)
		{
			s = s +"晚上森林";
		}
		else if(Playing.nowmap==41)
		{
			s = s +"詭異的墳墓";
		}
		else if(Playing.nowmap==42)
		{
			s = s +"後山";
		}
		else if(Playing.nowmap==43)
		{
			s = s +"春暮鎮邊境";
		}
		else if(Playing.nowmap==44)
		{
			s = s +"春暮鎮邊界森林";
		}
		else if(Playing.nowmap==45)
		{
			s = s +"邊界森林";
		}
		else if(Playing.nowmap==46)
		{
			s = s +"農村邊界[東區]";
		}
		else if(Playing.nowmap==47)
		{
			s = s +"農村";
		}
		else if(Playing.nowmap==48)
		{
			s = s +"農民家";
		}
		else if(Playing.nowmap==49)
		{
			s = s +"農民家-2";
		}
		else if(Playing.nowmap==50)
		{
			s = s +"農民家-3";
		}
		else if(Playing.nowmap==51)
		{
			s = s +"農民家-4";
		}
		else if(Playing.nowmap==52)
		{
			s = s +"農民家-5";
		}
		else if(Playing.nowmap==53)
		{
			s = s +"農民家-6";
		}
		else if(Playing.nowmap==54)
		{
			s = s +"農村休息區";
		}
		else if(Playing.nowmap==55)
		{
			s = s +"農村管理者";
		}
		else if(Playing.nowmap==56)
		{
			s = s +"農村邊界[西區]";
		}
		else if(Playing.nowmap==57)
		{
			s = s +"峽谷";
		}
		else if(Playing.nowmap==58)
		{
			s = s +"小鎮邊境[東區]";
		}
		else if(Playing.nowmap==59)
		{
			s = s +"洞穴";
		}
		else if(Playing.nowmap==60)
		{
			s = s +"洞穴-2";
		}
		else if(Playing.nowmap==61)
		{
			s = s +"洞穴-2";
		}
		else if(Playing.nowmap==62)
		{
			s = s +"洞穴-3";
		}
		else if(Playing.nowmap==63)
		{
			s = s +"洞穴-4";
		}
		else if(Playing.nowmap==64)
		{
			s = s +"小鎮";
		}
		else if(Playing.nowmap==65)
		{
			s = s +"小鎮邊境[北區]";
		}
		else if(Playing.nowmap==66)
		{
			s = s +"職業邊界";
		}
		else if(Playing.nowmap==67)
		{
			s = s +"水之國邊境";
		}
		else if(Playing.nowmap==68)
		{
			s = s +"水之國";
		}
		else if(Playing.nowmap==69)
		{
			s = s +"水之國秘境";
		}
		else if(Playing.nowmap==70)
		{
			s = s +"水之國居民家-1[地下室]";
		}
		else if(Playing.nowmap==71)
		{
			s = s +"水之國居民家-2[地下室]";
		}
		else if(Playing.nowmap==72)
		{
			s = s +"水之國居民家-3[地下室]";
		}
		else if(Playing.nowmap==73)
		{
			s = s +"水之國居民家-4[地下室]";
		}
		else if(Playing.nowmap==74)
		{
			s = s +"水之國居民家-5[地下室]";
		}
		else if(Playing.nowmap==75)
		{
			s = s +"水之國居民家-6[地下室]";
		}
		else if(Playing.nowmap==76)
		{
			s = s +"水之國居民家-1";
		}
		else if(Playing.nowmap==77)
		{
			s = s +"水之國居民家-2";
		}
		else if(Playing.nowmap==78)
		{
			s = s +"水之國居民家-3";
		}
		else if(Playing.nowmap==79)
		{
			s = s +"水之國居民家-4";
		}
		else if(Playing.nowmap==80)
		{
			s = s +"水之國居民家-5";
		}
		else if(Playing.nowmap==81)
		{
			s = s +"水之國居民家-6";
		}
		else if(Playing.nowmap==82)
		{
			s = s +"水之國自助吧地下室";
		}
		else if(Playing.nowmap==83)
		{
			s = s +"水之國自助吧";
		}
		else if(Playing.nowmap==84)
		{
			s = s +"水之國武器商店地下室";
		}
		else if(Playing.nowmap==85)
		{
			s = s +"水之國武器商店";
		}
		else if(Playing.nowmap==86)
		{
			s = s +"水之國療傷所地下室";
		}
		else if(Playing.nowmap==87)
		{
			s = s +"水之國療傷所";
		}
		else if(Playing.nowmap==88)
		{
			s = s +"水之國戰士同盟會地下室";
		}
		else if(Playing.nowmap==89)
		{
			s = s +"水之國射手同盟會地下室";
		}
		else if(Playing.nowmap==90)
		{
			s = s +"水之國法師同盟會地下室";
		}
		else if(Playing.nowmap==91)
		{
			s = s +"水之國戰士同盟會";
		}
		else if(Playing.nowmap==92)
		{
			s = s +"水之國射手同盟會";
		}
		else if(Playing.nowmap==93)
		{
			s = s +"水之國法師同盟會";
		}
		else if(Playing.nowmap==94)
		{
			s = s +"水之國地下室穿越道-1";
		}
		else if(Playing.nowmap==95)
		{
			s = s +"水之國地下室穿越道-2";
		}
		else if(Playing.nowmap==96)
		{
			s = s +"水之國同盟穿越道-1";
		}
		else if(Playing.nowmap==97)
		{
			s = s +"水之國同盟穿越道-2";
		}
		else if(Playing.nowmap==98)
		{
			s = s +"小鎮邊境[南區]";
		}
		else if(Playing.nowmap==99)
		{
			s = s +"檢查關卡";
		}
		else if(Playing.nowmap==100)
		{
			s = s +"機械國邊境";
		}
		else if(Playing.nowmap==101)
		{
			s = s +"機械國";
		}
		else if(Playing.nowmap==102)
		{
			s = s +"機械國研究所";
		}
		else if(Playing.nowmap==103)
		{
			s = s +"機械國便利商店";
		}
		else if(Playing.nowmap==104)
		{
			s = s +"機械國餐廳";
		}
		else if(Playing.nowmap==105)
		{
			s = s +"機械國居民家-1";
		}
		else if(Playing.nowmap==106)
		{
			s = s +"機械國居民家-2";
		}
		else if(Playing.nowmap==107)
		{
			s = s +"機械國居民家-3";
		}
		else if(Playing.nowmap==108)
		{
			s = s +"機械國維修廠";
		}
		else if(Playing.nowmap==109)
		{
			s = s +"小鎮邊境[西區]";
		}
		else if(Playing.nowmap==110)
		{
			s = s +"夢幻城鎮邊境";
		}
		else if(Playing.nowmap==111)
		{
			s = s +"冰地";
		}
		else if(Playing.nowmap==112)
		{
			s = s +"冰地居民家-1";
		}
		else if(Playing.nowmap==113)
		{
			s = s +"冰地居民家-2";
		}
		else if(Playing.nowmap==114)
		{
			s = s +"冰地居民倉庫";
		}
		else if(Playing.nowmap==115)
		{
			s = s +"雪之國";
		}
		else if(Playing.nowmap==116)
		{
			s = s +"雪之國小房-1";
		}
		else if(Playing.nowmap==117)
		{
			s = s +"雪之國小房-2";
		}
		else if(Playing.nowmap==118)
		{
			s = s +"雪之國小房-3";
		}
		else if(Playing.nowmap==119)
		{
			s = s +"雪之國木房-1";
		}
		else if(Playing.nowmap==120)
		{
			s = s +"雪之國木房-2";
		}
		else if(Playing.nowmap==121)
		{
			s = s +"雪之國-紅磚醫院";
		}
		else if(Playing.nowmap==122)
		{
			s = s +"雪之國武器屋";
		}
		else if(Playing.nowmap==123)
		{
			s = s +"雪之國消耗品屋";
		}
		else if(Playing.nowmap==124)
		{
			s = s +"雪之國磚塊房-1";
		}
		else if(Playing.nowmap==125)
		{
			s = s +"雪之國磚塊房-1[地下室]";
		}
		else if(Playing.nowmap==126)
		{
			s = s +"雪之國磚塊房-2";
		}
		else if(Playing.nowmap==127)
		{
			s = s +"雪之國磚塊房-2[地下室]";
		}
		else if(Playing.nowmap==128)
		{
			s = s +"雪之國騎士屋";
		}
		else if(Playing.nowmap==129)
		{
			s = s +"雪之國騎士屋1F[左]";
		}
		else if(Playing.nowmap==130)
		{
			s = s +"雪之國騎士屋1F[右]";
		}
		else if(Playing.nowmap==131)
		{
			s = s +"雪之國騎士屋2F";
		}
		else if(Playing.nowmap==132)
		{
			s = s +"雪之國城內";
		}
		else if(Playing.nowmap==133)
		{
			s = s +"雪之國城左";
		}
		else if(Playing.nowmap==134)
		{
			s = s +"雪之國城左側";
		}
		else if(Playing.nowmap==135)
		{
			s = s +"雪之國城右";
		}
		else if(Playing.nowmap==136)
		{
			s = s +"雪之國城右側";
		}
		else if(Playing.nowmap==137)
		{
			s = s +"雪之國城後院";
		}
		else if(Playing.nowmap==138)
		{
			s = s +"雪之國城內1F";
		}
		else if(Playing.nowmap==139)
		{
			s = s +"雪之國城內2F";
		}
		else if(Playing.nowmap==140)
		{
			s = s +"雪之國路徑-1";
		}
		else if(Playing.nowmap==141)
		{
			s = s +"雪之國路徑-2";
		}
		else if(Playing.nowmap==142)
		{
			s = s +"雪之國路徑-2路上房子";
		}
		else if(Playing.nowmap==143)
		{
			s = s +"雪之國路徑-3";
		}
		else if(Playing.nowmap==144)
		{
			s = s +"雪之村";
		}
		else if(Playing.nowmap==145)
		{
			s = s +"雪之村酒吧";
		}
		else if(Playing.nowmap==146)
		{
			s = s +"雪之村村長家1F";
		}
		else if(Playing.nowmap==147)
		{
			s = s +"雪之村房子-1";
		}
		else if(Playing.nowmap==148)
		{
			s = s +"雪之村房子-2";
		}
		else if(Playing.nowmap==149)
		{
			s = s +"雪之村農民屋";
		}
		else if(Playing.nowmap==150)
		{
			s = s +"雪之村田地";
		}
		else if(Playing.nowmap==151)
		{
			s = s +"雪之村路徑-1";
		}
		else if(Playing.nowmap==152)
		{
			s = s +"雪之村路徑-2";
		}
		else if(Playing.nowmap==153)
		{
			s = s +"雪之村路徑-3";
		}
		else if(Playing.nowmap==154)
		{
			s = s +"夢幻城鎮";
		}
		else if(Playing.nowmap==155)
		{
			s = s +"沙之村路徑-1";
		}
		else if(Playing.nowmap==156)
		{
			s = s +"沙之村路徑-2";
		}
		else if(Playing.nowmap==157)
		{
			s = s +"沙之村路徑-2[右]";
		}
		else if(Playing.nowmap==158)
		{
			s = s +"沙之村路徑-2[右2]";
		}
		else if(Playing.nowmap==159)
		{
			s = s +"沙之村路徑-2[右2]房內1F";
		}
		else if(Playing.nowmap==160)
		{
			s = s +"沙之村路徑-2[右2]房內2F";
		}
		else if(Playing.nowmap==161)
		{
			s = s +"沙之村路徑-3";
		}
		else if(Playing.nowmap==162)
		{
			s = s +"沙之村";
		}
		else if(Playing.nowmap==163)
		{
			s = s +"沙之村洞穴";
		}
		else if(Playing.nowmap==164)
		{
			s = s +"沙之村房子-1";
		}
		else if(Playing.nowmap==165)
		{
			s = s +"沙之村房子-2";
		}
		else if(Playing.nowmap==166)
		{
			s = s +"沙之村房子-3";
		}
		else if(Playing.nowmap==167)
		{
			s = s +"沙之村房子-4";
		}
		else if(Playing.nowmap==168)
		{
			s = s +"沙之村武器店";
		}
		else if(Playing.nowmap==169)
		{
			s = s +"沙之村營地-1";
		}
		else if(Playing.nowmap==170)
		{
			s = s +"沙之村消耗品屋";
		}
		else if(Playing.nowmap==171)
		{
			s = s +"沙之國路徑-1";
		}
		else if(Playing.nowmap==172)
		{
			s = s +"沙之國路徑-2";
		}
		else if(Playing.nowmap==173)
		{
			s = s +"沙之國路徑-2地下1F";
		}
		else if(Playing.nowmap==174)
		{
			s = s +"沙之國路徑-2地下2F";
		}
		else if(Playing.nowmap==175)
		{
			s = s +"沙之國路徑-2地下房間";
		}
		else if(Playing.nowmap==176)
		{
			s = s +"沙之國路徑-2地下圖書館";
		}
		else if(Playing.nowmap==177)
		{
			s = s +"沙之國路徑-2地下武器庫";
		}
		else if(Playing.nowmap==178)
		{
			s = s +"沙之國路徑-2地下稻田";
		}
		else if(Playing.nowmap==179)
		{
			s = s +"沙之國路徑-2地下出口";
		}
		else if(Playing.nowmap==180)
		{
			s = s +"沙之國路徑-3";
		}
		else if(Playing.nowmap==181)
		{
			s = s +"沙之國";
		}
		else if(Playing.nowmap==182)
		{
			s = s +"沙之國房子-1";
		}
		else if(Playing.nowmap==183)
		{
			s = s +"沙之國房子-2";
		}
		else if(Playing.nowmap==184)
		{
			s = s +"沙之國房子-3";
		}
		else if(Playing.nowmap==185)
		{
			s = s +"沙之國房子-4";
		}
		else if(Playing.nowmap==186)
		{
			s = s +"沙之國郵局";
		}
		else if(Playing.nowmap==187)
		{
			s = s +"沙之國醫院";
		}
		else if(Playing.nowmap==188)
		{
			s = s +"沙之國木學校1F";
		}
		else if(Playing.nowmap==189)
		{
			s = s +"沙之國木學校2F";
		}
		else if(Playing.nowmap==190)
		{
			s = s +"沙之國學院1F";
		}
		else if(Playing.nowmap==191)
		{
			s = s +"沙之國學院2F";
		}
		else if(Playing.nowmap==192)
		{
			s = s +"沙之國學院3F";
		}
		else if(Playing.nowmap==193)
		{
			s = s +"雪之國三步塔1F";
		}
		else if(Playing.nowmap==194)
		{
			s = s +"雪之國三步塔2F";
		}
		else if(Playing.nowmap==195)
		{
			s = s +"雪之國三步塔3F";
		}
		else if(Playing.nowmap==196)
		{
			s = s +"雪之國三步塔3F結束點";
		}
		else if(Playing.nowmap==197)
		{
			s = s +"雪之國三步塔結束點";
		}
		else if(Playing.nowmap==198)
		{
			s = s +"雪之國紅磚市場";
		}
		else if(Playing.nowmap==199)
		{
			s = s +"雪之村路徑-2[營地-2]";
		}
		else if(Playing.nowmap==200)
		{
			s = s +"雪之村路徑-2[營地-1]";
		}
		else if(Playing.nowmap==201)
		{
			s = s +"雪之村路徑-2洞穴";
		}
		else if(Playing.nowmap==202)
		{
			s = s +"雪之村武器店";
		}
		else if(Playing.nowmap==203)
		{
			s = s +"沙之國學院競技場";
		}
		else if(Playing.nowmap==204)
		{
			s = s +"沙之村路徑-2[營地-1]";
		}
		else if(Playing.nowmap==205)
		{
			s = s +"沙之村路徑-2[房子-1]";
		}
		else if(Playing.nowmap==206)
		{
			s = s +"沙之村路徑-2[房子-2]";
		}
		else if(Playing.nowmap==207)
		{
			s = s +"沙之村路徑-2[房子-3]";
		}
		else if(Playing.nowmap==208)
		{
			s = s +"沙之村路徑-2[房子-4]";
		}
		else if(Playing.nowmap==209)
		{
			s = s +"雪之村村長家2F";
		}
		
		if(!s.equals(t))
		this.setText(s);
	}
}

class MovableAreaAndClose extends JLabel{
	JButton closebtn = new JButton();
	Image closeimage[] = new Image[2];
	MovableAreaAndClose(){
		super();
		String s = "/Ability/x.png";
		URL url = getClass().getResource(s);
		try {
			closeimage[0]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/Ability/x2.png";
		url = getClass().getResource(s);
		try {
			closeimage[1]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		closebtn.setIcon(new ImageIcon(closeimage[0]));
		//this.setOpaque(true);
		//this.setBackground(new Color(255,179,38));
		//JButton closebtn = new JButton();
		closebtn.setFocusable(false);
		closebtn.setContentAreaFilled(false);
		closebtn.setBorderPainted(false);
		closebtn.setFocusPainted(false);

		this.add(closebtn);
		
		closebtn.addMouseListener(new MouseAdapter() {
			public void mouseEntered(MouseEvent e) {
				closebtn.setIcon(new ImageIcon(closeimage[1]));

			}
			
			public void mouseExited(MouseEvent e) {
				closebtn.setIcon(new ImageIcon(closeimage[0]));

			}
			
		});

	}
}

class PlayerAbilitySystem extends JPanel{
	static int abilityx=450,abilityy=170,clickx,clicky;
	//static boolean detailshow = false;
	static PlayerSubAbility playersubability;
	static int playerstr = 10;
	static int playerdex = 10;
	static int playervit = 10;
	static int playerint = 10;
	static int playerluk = 10;
	static int usablepoint = 0;
	static int externalstr = 0;
	static int externaldex = 0;
	static int externalvit = 0;
	static int externalint = 0;
	static int externalluk = 0;
	static float playeratk = 10; //物理攻擊
	static float playermatk = 10; //魔法攻擊
	static float playerdef = 10; //物理防禦
	static float playermdef = 10; //魔法防禦
	static int playeraar = 100; //物理迴避
	static int playersar = 100; //魔法迴避
	static int playercri = 100; //爆擊率
	static int playeracri = 100; //抗暴擊率
	static int playercridamage = 100; //爆擊傷害
	static int playeracc = 100; //物理命中
	static int playersac = 100; //魔法命中
	static int playerblocking = 100; //格檔
	static float externalplayeratk = 0; //物理攻擊
	static float externalplayermatk = 0; //魔法攻擊
	static float externalplayerdef = 0; //物理防禦
	static float externalplayermdef = 0; //魔法防禦
	static int externalplayeraar = 0; //物理迴避
	static int externalplayersar = 0; //魔法迴避
	static int externalplayercri = 0; //爆擊率
	static int externalplayeracri = 0; //抗暴擊率
	static int externalplayercridamage = 0; //爆擊傷害
	static int externalplayeracc = 0; //物理命中
	static int externalplayersac = 0; //魔法命中
	static int externalplayerblocking = 0; //格檔
	
	Image showimage[] = new Image[2];
	PlayerAbilitySystem(){
		super();
		this.setLayout(null);
		this.setBackground(new Color(220,220,220));
		JLabel background = new JLabel();
		MovableAreaAndClose movableareaandclose = new MovableAreaAndClose();
		IdInformation idinformation = new IdInformation();
		CareerInformation careerinformation = new CareerInformation();
		LevelInformation levelinformation = new LevelInformation();
		HpInformation hpinformation = new HpInformation();
		MpInformation mpinformation = new MpInformation();
		TpInformation tpinformation = new TpInformation();
		ExpInformation expinformation = new ExpInformation();
		AbilityPointArea abilitypointarea = new AbilityPointArea();
		StrInformation strinformation = new StrInformation();
		DexInformation dexinformation = new DexInformation();
		VitInformation vitinformation = new VitInformation();
		IntInformation intinformation = new IntInformation();
		LukInformation lukinformation = new LukInformation();
		JToggleButton showdetailbtn = new JToggleButton();
		String s = "/Ability/bk.png";
		URL url = getClass().getResource(s);
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/Ability/sd1.png";
		url = getClass().getResource(s);
		try {
			showimage[0]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/Ability/sd2.png";
		url = getClass().getResource(s);
		try {
			showimage[1]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	
		
		movableareaandclose.setBounds(0, 0, 300, 25);
		movableareaandclose.closebtn.setBounds(260, 0, 40, 25);
		//movableareaandclose.closebtn.setText("x");
		//movableareaandclose.closebtn.setFont(new Font("標楷體",0,10));
		//movableareaandclose.closebtn.setIcon(new ImageIcon(closeimage[0]));
		//movableareaandclose.closebtn.setContentAreaFilled(false);
		//movableareaandclose.closebtn.setBorderPainted(false);
		//movableareaandclose.closebtn.setFocusPainted(false);
		
		background.setBounds(0, 0, 300, 530);
		
		idinformation.setBounds(0, 30, 260, 25);
		careerinformation.setBounds(0, 60, 260, 25);
		levelinformation.setBounds(0, 90, 260, 25);
		hpinformation.setBounds(0, 120, 260, 25);
		mpinformation.setBounds(0, 150, 260, 25);
		tpinformation.setBounds(0, 180, 260, 25);
		expinformation.setBounds(0, 210, 260, 25);
		abilitypointarea.setBounds(15, 238, 270, 74);
		strinformation.setBounds(0, 315, 260, 35);
		dexinformation.setBounds(0, 355, 260, 35);
		vitinformation.setBounds(0, 395, 260, 35);
		intinformation.setBounds(0, 435, 260, 35);
		lukinformation.setBounds(0, 475, 260, 35);
		showdetailbtn.setFocusable(false);
		showdetailbtn.setBounds(280,323,17,179);
		showdetailbtn.setSelected(false);
		showdetailbtn.setIcon(new ImageIcon(showimage[0]));
		showdetailbtn.setContentAreaFilled(false);
		showdetailbtn.setBorderPainted(false);
		showdetailbtn.setFocusPainted(false);

		this.add(background);
		
		background.add(idinformation);
		background.add(careerinformation);
		background.add(levelinformation);
		background.add(hpinformation);
		background.add(mpinformation);
		background.add(tpinformation);
		background.add(expinformation);
		background.add(movableareaandclose);
		background.add(abilitypointarea);
		background.add(strinformation);
		background.add(dexinformation);
		background.add(vitinformation);
		background.add(intinformation);
		background.add(lukinformation);
		background.add(showdetailbtn);
		
		movableareaandclose.closebtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PanelListenner.abilityshow=false;
				PanelListenner.w.remove(PlayerAbilitySystem.this);
				if(showdetailbtn.isSelected()==true)
				{
					showdetailbtn.setSelected(false);
					PanelListenner.w.remove(playersubability);
				}
			}
		});
		
	
		movableareaandclose.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				clickx=e.getX();
				clicky=e.getY();
			}
		});
		
		movableareaandclose.addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				int x=e.getX();
				int y=e.getY();
				if((abilityx+x-clickx)>=0 && (abilityx+x-clickx)+300<=1200 && (abilityy+y-clicky)>=0 && (abilityy+y-clicky)+545<=768)
				{
					PlayerAbilitySystem.this.setBounds(abilityx=abilityx+x-clickx, abilityy=abilityy+y-clicky, 300, 530);
				}
				else if((abilityx+x-clickx)<0)
				{
					if((abilityy+y-clicky)>=0 && (abilityy+y-clicky)+545<=768)
					PlayerAbilitySystem.this.setBounds(abilityx=0, abilityy=abilityy+y-clicky, 300, 530);
					else if((abilityy+y-clicky)+545>768)
					PlayerAbilitySystem.this.setBounds(abilityx=0, abilityy=223, 300, 530);
					else if((abilityy+y-clicky)<0)
					PlayerAbilitySystem.this.setBounds(abilityx=0, abilityy=0, 300, 530);
				}
				else if((abilityx+x-clickx)+300>1200)
				{
					if((abilityy+y-clicky)>=0 && (abilityy+y-clicky)+545<=768)
					PlayerAbilitySystem.this.setBounds(abilityx=900, abilityy=abilityy+y-clicky, 300, 530);
					else if((abilityy+y-clicky)+545>768)
					PlayerAbilitySystem.this.setBounds(abilityx=900, abilityy=223, 300, 530);
					else if((abilityy+y-clicky)<0)
					PlayerAbilitySystem.this.setBounds(abilityx=900, abilityy=0, 300, 530);				
				}
				else if((abilityy+y-clicky)<0)
				{
					if((abilityx+x-clickx)+300<=1200)
					PlayerAbilitySystem.this.setBounds(abilityx=abilityx+x-clickx, abilityy=0, 300, 530);
				}
				else if((abilityy+y-clicky)+545>768)
				{
					if((abilityx+x-clickx)>=0)
					PlayerAbilitySystem.this.setBounds(abilityx=abilityx+x-clickx, abilityy=223, 300, 530);
				}
				
			}
		});


		showdetailbtn.addChangeListener(new ChangeListener() {			
			public void stateChanged(ChangeEvent e) {
				if(showdetailbtn.isSelected()==true)
				{
					showdetailbtn.setIcon(new ImageIcon(showimage[1]));
					playersubability.setBounds(PlayerAbilitySystem.abilityx+305, PlayerAbilitySystem.abilityy+345, 250, 185);
					PanelListenner.w.add(playersubability,0);
					
				}
				else if(showdetailbtn.isSelected()==false)
				{
					showdetailbtn.setIcon(new ImageIcon(showimage[0]));
					PanelListenner.w.remove(playersubability);
				}
			}		
		});

	}
	
	public static void setsubability(PlayerSubAbility t) {
		playersubability=t;
	}
}

class PlayerSubAbility extends JLabel{
	PlayerSubAbility(){
		super();
		this.setLayout(null);
		//this.setOpaque(false);
		//this.setBackground(new Color(220,220,220));
		JLabel background = new JLabel();
		String s = "/Ability/bk1.png";
		URL url = getClass().getResource(s);
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		AtkInformation atkinformation = new AtkInformation();
		MatkInformation matkinformation = new MatkInformation();
		DefInformation definformation = new DefInformation();
		MdefInformation mdefinformation = new MdefInformation();
		AarInformation aarinformation = new AarInformation();
		SarInformation sarinformation = new SarInformation();
		CriInformation criinformation = new CriInformation();
		AcriInformation acriinformation = new AcriInformation();
		CriDamageInformation cridamageinformation = new CriDamageInformation();
		AccInformation accinformation = new AccInformation();
		SacInformation sacinformation = new SacInformation();
		BlockingInformation blockinginformation = new BlockingInformation();
		DetailStatementWindow Atkdetailstatementwindow = new DetailStatementWindow("Atk");
		DetailStatementWindow Matkdetailstatementwindow = new DetailStatementWindow("Matk");
		DetailStatementWindow Defdetailstatementwindow = new DetailStatementWindow("Def");
		DetailStatementWindow Mdefdetailstatementwindow = new DetailStatementWindow("Mdef");
		DetailStatementWindow Aardetailstatementwindow = new DetailStatementWindow("Aar");
		DetailStatementWindow Sardetailstatementwindow = new DetailStatementWindow("Sar");
		DetailStatementWindow Cridetailstatementwindow = new DetailStatementWindow("Cri");
		DetailStatementWindow Acridetailstatementwindow = new DetailStatementWindow("Acri");
		DetailStatementWindow CriDamagedetailstatementwindow = new DetailStatementWindow("CriDamage");
		DetailStatementWindow Accdetailstatementwindow = new DetailStatementWindow("Acc");
		DetailStatementWindow Sacdetailstatementwindow = new DetailStatementWindow("Sac");
		DetailStatementWindow Blockingdetailstatementwindow = new DetailStatementWindow("Blocking");

		
		atkinformation.setBounds(5, 5, 120, 25);
		matkinformation.setBounds(125, 5, 120, 25);
		definformation.setBounds(5, 35, 120, 25);
		mdefinformation.setBounds(125, 35, 120, 25);
		aarinformation.setBounds(5, 65, 120, 25);
		sarinformation.setBounds(125, 65, 120, 25);
		criinformation.setBounds(5, 95, 120, 25);
		acriinformation.setBounds(125, 95, 120, 25);
		cridamageinformation.setBounds(5, 125, 120, 25);	
		blockinginformation.setBounds(125, 125, 120, 25);
		sacinformation.setBounds(125, 155, 120, 25);
		accinformation.setBounds(5, 155, 120, 25);
		background.setBounds(0, 0, 250, 185);
		
		this.add(background);
		
		background.add(atkinformation);
		background.add(matkinformation);
		background.add(definformation);
		background.add(mdefinformation);
		background.add(aarinformation);
		background.add(sarinformation);
		background.add(criinformation);
		background.add(acriinformation);
		background.add(cridamageinformation);
		background.add(accinformation);
		background.add(sacinformation);
		background.add(blockinginformation);
		
		atkinformation.textimage.addMouseListener(new MouseListener() {
			public void mouseClicked(MouseEvent e)
			{
				
			}
			
			public void mouseEntered(MouseEvent e)
			{
				PanelListenner.w.add(Atkdetailstatementwindow);
				Atkdetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+340, 135, 40);
            }
			public void mouseExited(MouseEvent e)
			{
				PanelListenner.w.remove(Atkdetailstatementwindow);
			}
			
			public void mousePressed(MouseEvent e)
			{
      
			}
			
			public void mouseReleased(MouseEvent e) {
				
			}
			
		});
	
	matkinformation.textimage.addMouseListener(new MouseListener() {
		public void mouseClicked(MouseEvent e)
		{
			
		}
		
		public void mouseEntered(MouseEvent e)
		{
			PanelListenner.w.add(Matkdetailstatementwindow);
			Matkdetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+340, 135, 40);
        }
		public void mouseExited(MouseEvent e)
		{
			PanelListenner.w.remove(Matkdetailstatementwindow);
		}
		
		public void mousePressed(MouseEvent e)
		{
  
		}
		
		public void mouseReleased(MouseEvent e) {
			
		}
		
	});

	definformation.textimage.addMouseListener(new MouseListener() {
		public void mouseClicked(MouseEvent e)
		{
			
		}
		
		public void mouseEntered(MouseEvent e)
		{
			PanelListenner.w.add(Defdetailstatementwindow);
			Defdetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+370, 135, 40);
        }
		public void mouseExited(MouseEvent e)
		{
			PanelListenner.w.remove(Defdetailstatementwindow);
		}
		
		public void mousePressed(MouseEvent e)
		{
  
		}
		
		public void mouseReleased(MouseEvent e) {
			
		}
		
	});

	mdefinformation.textimage.addMouseListener(new MouseListener() {
		public void mouseClicked(MouseEvent e)
		{
			
		}
		
		public void mouseEntered(MouseEvent e)
		{
			PanelListenner.w.add(Mdefdetailstatementwindow);
			Mdefdetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+370, 135, 40);
        }
		public void mouseExited(MouseEvent e)
		{
			PanelListenner.w.remove(Mdefdetailstatementwindow);
		}
		
		public void mousePressed(MouseEvent e)
		{
  
		}
		
		public void mouseReleased(MouseEvent e) {
			
		}
		
	});

	aarinformation.textimage.addMouseListener(new MouseListener() {
		public void mouseClicked(MouseEvent e)
		{
			
		}
		
		public void mouseEntered(MouseEvent e)
		{
			PanelListenner.w.add(Aardetailstatementwindow);
			Aardetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+400, 135, 40);
        }
		public void mouseExited(MouseEvent e)
		{
			PanelListenner.w.remove(Aardetailstatementwindow);
		}
		
		public void mousePressed(MouseEvent e)
		{
			
		}
		
		public void mouseReleased(MouseEvent e) {
			
		}
		
	});

	sarinformation.textimage.addMouseListener(new MouseListener() {
		public void mouseClicked(MouseEvent e)
		{
			
		}
		
		public void mouseEntered(MouseEvent e)
		{
			PanelListenner.w.add(Sardetailstatementwindow);
			Sardetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+400, 135, 40);
        }
		public void mouseExited(MouseEvent e)
		{
			PanelListenner.w.remove(Sardetailstatementwindow);
		}
		
		public void mousePressed(MouseEvent e)
		{
  
		}
		
		public void mouseReleased(MouseEvent e) {
			
		}
		
	});

	criinformation.textimage.addMouseListener(new MouseListener() {
		public void mouseClicked(MouseEvent e)
		{
			
		}
		
		public void mouseEntered(MouseEvent e)
		{
			PanelListenner.w.add(Cridetailstatementwindow);
			Cridetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+430, 135, 40);
        }
		public void mouseExited(MouseEvent e)
		{
			PanelListenner.w.remove(Cridetailstatementwindow);
		}
		
		public void mousePressed(MouseEvent e)
		{
			
		}
		
		public void mouseReleased(MouseEvent e) {
			
		}
		
	});

	acriinformation.textimage.addMouseListener(new MouseListener() {
		public void mouseClicked(MouseEvent e)
		{
			
		}
		
		public void mouseEntered(MouseEvent e)
		{
			PanelListenner.w.add(Acridetailstatementwindow);
			Acridetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+430, 135, 40);
        }
		public void mouseExited(MouseEvent e)
		{
			PanelListenner.w.remove(Acridetailstatementwindow);
		}
		
		public void mousePressed(MouseEvent e)
		{
  
		}
		
		public void mouseReleased(MouseEvent e) {
			
		}
		
	});

	cridamageinformation.textimage.addMouseListener(new MouseListener() {
		public void mouseClicked(MouseEvent e)
		{
			
		}
		
		public void mouseEntered(MouseEvent e)
		{
			PanelListenner.w.add(CriDamagedetailstatementwindow);
			CriDamagedetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+470, 135, 60);
        }
		public void mouseExited(MouseEvent e)
		{
			PanelListenner.w.remove(CriDamagedetailstatementwindow);
		}
		
		public void mousePressed(MouseEvent e)
		{
			
		}
		
		public void mouseReleased(MouseEvent e) {
			
		}
		
	});

	blockinginformation.textimage.addMouseListener(new MouseListener() {
		public void mouseClicked(MouseEvent e)
		{
			
		}
		
		public void mouseEntered(MouseEvent e)
		{
			PanelListenner.w.add(Blockingdetailstatementwindow);
			Blockingdetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+470, 135, 60);
        }
		public void mouseExited(MouseEvent e)
		{
			PanelListenner.w.remove(Blockingdetailstatementwindow);
		}
		
		public void mousePressed(MouseEvent e)
		{
  
		}
		
		public void mouseReleased(MouseEvent e) {
			
		}
		
	});

	accinformation.textimage.addMouseListener(new MouseListener() {
		public void mouseClicked(MouseEvent e)
		{
			
		}
		
		public void mouseEntered(MouseEvent e)
		{
			PanelListenner.w.add(Accdetailstatementwindow);
			Accdetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+470, 135, 40);
        }
		public void mouseExited(MouseEvent e)
		{
			PanelListenner.w.remove(Accdetailstatementwindow);
		}
		
		public void mousePressed(MouseEvent e)
		{
			
		}
		
		public void mouseReleased(MouseEvent e) {
			
		}
		
	});

	sacinformation.textimage.addMouseListener(new MouseListener() {
		public void mouseClicked(MouseEvent e)
		{
			
		}
		
		public void mouseEntered(MouseEvent e)
		{
			PanelListenner.w.add(Sacdetailstatementwindow);
			Sacdetailstatementwindow.setBounds(PlayerAbilitySystem.abilityx+555, PlayerAbilitySystem.abilityy+470, 135, 40);
        }
		public void mouseExited(MouseEvent e)
		{
			PanelListenner.w.remove(Sacdetailstatementwindow);
		}
		
		public void mousePressed(MouseEvent e)
		{
  
		}
		
		public void mouseReleased(MouseEvent e) {
			
		}
		
	});

	}
	
	
}

class DetailStatementWindow extends JTextArea{
	DetailStatementWindow(String s){
		super();
		this.setBackground(new Color(255,255,255,128));
		this.setEditable(false);
		this.setBorder(BorderFactory.createLineBorder(Color.black,1));
		this.setFocusable(false);
		if(s.equals("Atk"))
		{
			this.setText("物理攻擊提升的來源為：\n力量、敏捷");
		}
		else if(s.equals("Matk"))
		{
			this.setText("魔法攻擊提升的來源為：\n智力");
		}
		else if(s.equals("Def"))
		{
			this.setText("物理防禦提升的來源為：\n力量、體質");
		}
		else if(s.equals("Mdef"))
		{
			this.setText("魔法防禦提升的來源為：\n體質、智力、幸運");
		}
		else if(s.equals("Aar"))
		{
			this.setText("物理閃避提升的來源為：\n力量、敏捷、體質、幸運");
		}
		else if(s.equals("Sar"))
		{
			this.setText("魔法閃避提升的來源為：\n敏捷、體質、智力、幸運");			
		}
		else if(s.equals("Cri"))
		{
			this.setText("爆擊率提升的來源為：\n力量、敏捷、智力、幸運");	
		}
		else if(s.equals("Acri"))
		{
			this.setText("抗爆擊率提升的來源為：\n無(只有被動技能及裝備)");	
		}
		else if(s.equals("CriDamage"))
		{
			this.setText("爆擊傷害提升的來源為：\n無(只有被動技能及裝備)\n爆擊傷害基礎值為150%");
		}
		else if(s.equals("Acc"))
		{
			this.setText("物理命中提升的來源為：\n力量、敏捷、幸運");
		}
		else if(s.equals("Sac"))
		{
			this.setText("魔法命中提升的來源為：\n幸運、智力");

		}
		else if(s.equals("Blocking"))
		{
			this.setText("格檔提升的來源為：\n力量、敏捷、體質、智力\n格檔即為減免50%傷害");
		}
	}
	
}

class AbilityPointArea extends JLabel{
	Image autoimage[] = new Image[2];
	AbilityPointArea(){
		super();

		JLabel lastpoint = new JLabel("",SwingConstants.RIGHT);
		JButton savepoint = new JButton();
		String s = "/Ability/center.png";
		URL url = getClass().getResource(s);
		try {
			this.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/Ability/auto1.png";
		url = getClass().getResource(s);
		try {
			autoimage[0]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/Ability/auto2.png";
		url = getClass().getResource(s);
		try {
			autoimage[1]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		
		lastpoint.setOpaque(true);
		lastpoint.setBackground(new Color(255,255,255));
		lastpoint.setFont(new Font("標楷體",0,15));
		lastpoint.setText("" + PlayerAbilitySystem.usablepoint);
		lastpoint.setBounds(142, 37, 40, 20);
		
		
		savepoint.setIcon(new ImageIcon(autoimage[0]));
		savepoint.setContentAreaFilled(false);
		savepoint.setBorderPainted(false);
		savepoint.setFocusPainted(false);
		savepoint.setFocusable(false);
		savepoint.setFont(new Font("標楷體",0,15));
		savepoint.setBounds(210, 15, 50, 43);
		

		this.add(lastpoint);
		this.add(savepoint);
		
		InformationPowerUpdate.setlastpoint(lastpoint);
		
		savepoint.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PlayerAbilitySystem.playerstr+=PlayerAbilitySystem.usablepoint/2;
	
				Playing.playermaxhp+=150*PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playeratk+=10*PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playerdef+=8*PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playeraar+=6*PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playercri+=8*PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playerblocking+=6*PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playeracc+=9*PlayerAbilitySystem.usablepoint/2;

				PlayerAbilitySystem.usablepoint-=PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playerdex+=PlayerAbilitySystem.usablepoint/2;
				
				PlayerAbilitySystem.playeratk+=7*PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playeraar+=16*PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playersar+=12*PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playercri+=15*PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playerblocking+=3*PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playeracc+=5*PlayerAbilitySystem.usablepoint/2;

				PlayerAbilitySystem.usablepoint-=PlayerAbilitySystem.usablepoint/2;
				PlayerAbilitySystem.playervit+=PlayerAbilitySystem.usablepoint;
				
				Playing.playermaxhp+=250*PlayerAbilitySystem.usablepoint;
				Playing.playermaxmp+=70*PlayerAbilitySystem.usablepoint;
				PlayerAbilitySystem.playeraar+=4*PlayerAbilitySystem.usablepoint;
				PlayerAbilitySystem.playersar+=4*PlayerAbilitySystem.usablepoint;
				PlayerAbilitySystem.playerdef+=20*PlayerAbilitySystem.usablepoint;
				PlayerAbilitySystem.playermdef+=16*PlayerAbilitySystem.usablepoint;
				PlayerAbilitySystem.playerblocking+=4*PlayerAbilitySystem.usablepoint;

				PlayerAbilitySystem.usablepoint=0;
				//savepoint.setFocusable(false);
			}
		});
		
		savepoint.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				savepoint.setIcon(new ImageIcon(autoimage[1]));
			}
			
			public void mouseReleased(MouseEvent e) {
				savepoint.setIcon(new ImageIcon(autoimage[0]));
			}
		});


	}
}

class IdInformation extends JLabel{
	IdInformation(){
		super();
		JLabel textimage = new JLabel();
		//JProgressBar hpinfo = new JProgressBar();
		JLabel idinfo = new JLabel("",SwingConstants.LEFT);
		String s = "/Ability/0-1.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("名稱");
		
		textimage.setBounds(20, 0, 45, 25);
		idinfo.setOpaque(true);
		idinfo.setBackground(new Color(255,255,255));
		idinfo.setFont(new Font("標楷體",0,15));
		
		idinfo.setBounds(65, 0, 195, 25);
		idinfo.setText("" + Playing.playername);
		
		
		this.add(textimage);
		this.add(idinfo);
		InformationPowerUpdate.setidinfo(idinfo);

	}
}

class CareerInformation extends JLabel{
	CareerInformation(){
		super();
		JLabel textimage = new JLabel();
		//JProgressBar hpinfo = new JProgressBar();
		JLabel careerinfo = new JLabel("",SwingConstants.LEFT);
		String s = "/Ability/1-1.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("職業");
		textimage.setBounds(20, 0, 45, 25);
		
		careerinfo.setOpaque(true);
		careerinfo.setBackground(new Color(255,255,255));
		careerinfo.setFont(new Font("標楷體",0,15));
		
		careerinfo.setBounds(65, 0, 195, 25);
		careerinfo.setText("見習者");
		
		
		this.add(textimage);
		this.add(careerinfo);
		InformationPowerUpdate.setcareerinfo(careerinfo);

	}
}


class LevelInformation extends JLabel{
	LevelInformation(){
		super();
		JLabel textimage = new JLabel();
		//JProgressBar hpinfo = new JProgressBar();
		JLabel levelinfo = new JLabel("",SwingConstants.LEFT);
		String s = "/Ability/2-1.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("等級");
		textimage.setBounds(20, 0, 45, 25);
		
		levelinfo.setOpaque(true);
		levelinfo.setBackground(new Color(255,255,255));
		levelinfo.setFont(new Font("標楷體",0,15));
		
		levelinfo.setBounds(65, 0, 195, 25);
		levelinfo.setText("" + Playing.playerlevel);
		
		
		this.add(textimage);
		this.add(levelinfo);
		InformationPowerUpdate.setlevelinfo(levelinfo);

	}
}


class HpInformation extends JLabel{
	HpInformation(){
		super();
		JLabel textimage = new JLabel();
		//JProgressBar hpinfo = new JProgressBar();
		JLabel hpinfo = new JLabel("",SwingConstants.LEFT);
		String s = "/Ability/3-1.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("血量");
		textimage.setBounds(20, 0, 45, 25);
		
		hpinfo.setOpaque(true);
		hpinfo.setBackground(new Color(255,255,255));
		hpinfo.setFont(new Font("標楷體",0,15));
		
		hpinfo.setBounds(65, 0, 195, 25);
		hpinfo.setText("" + (int)Playing.playernowhp + "/" + (int)Playing.playermaxhp);
		
		
		this.add(textimage);
		this.add(hpinfo);
		InformationPowerUpdate.sethpinfo(hpinfo);

	}
}

class MpInformation extends JLabel{
	MpInformation(){
		super();
		JLabel textimage = new JLabel();
		//JProgressBar hpinfo = new JProgressBar();
		JLabel mpinfo = new JLabel("",SwingConstants.LEFT);
		String s = "/Ability/4-1.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("魔力");
		textimage.setBounds(20, 0, 45, 25);
		
		mpinfo.setOpaque(true);
		mpinfo.setBackground(new Color(255,255,255));
		mpinfo.setFont(new Font("標楷體",0,15));
		
		mpinfo.setBounds(65, 0, 195, 25);
		mpinfo.setText("" + (int)Playing.playernowmp + "/" + (int)Playing.playermaxmp);
		
		
		this.add(textimage);
		this.add(mpinfo);
		InformationPowerUpdate.setmpinfo(mpinfo);

	}
}

class TpInformation extends JLabel{
	TpInformation(){
		super();
		JLabel textimage = new JLabel();
		//JProgressBar hpinfo = new JProgressBar();
		JLabel tpinfo = new JLabel("",SwingConstants.LEFT);
		String s = "/Ability/5-1.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("疲勞值");
		textimage.setBounds(20, 0, 45, 25);
		
		tpinfo.setOpaque(true);
		tpinfo.setBackground(new Color(255,255,255));
		tpinfo.setFont(new Font("標楷體",0,15));
		
		tpinfo.setBounds(65, 0, 195, 25);
		tpinfo.setText("" + (int)Playing.playernowtp + "/" + (int)Playing.playermaxtp);
		
		
		this.add(textimage);
		this.add(tpinfo);
		InformationPowerUpdate.settpinfo(tpinfo);

	}
}

class ExpInformation extends JLabel{
	ExpInformation(){
		super();
		JLabel textimage = new JLabel();
		//JProgressBar hpinfo = new JProgressBar();
		JLabel expinfo = new JLabel("",SwingConstants.LEFT);
		String s = "/Ability/6-1.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("經驗值");
		textimage.setBounds(20, 0, 45, 25);
		
		expinfo.setOpaque(true);
		expinfo.setBackground(new Color(255,255,255));
		expinfo.setFont(new Font("標楷體",0,15));
		
		expinfo.setBounds(65, 0, 195, 25);
		expinfo.setText("" + (int)Playing.playerexperience + "/" + (int)Playing.demandexperience);
		
		
		this.add(textimage);
		this.add(expinfo);
		InformationPowerUpdate.setexpinfo(expinfo);

	}
}

class StrInformation extends JLabel{
	static Image addimage[] = new Image[2];
	StrInformation(){
		super();
		JLabel textimage = new JLabel();
		JLabel strinfo = new JLabel();
		JButton addbtn = new JButton();
		JTextArea description = new JTextArea();
		String s = "/Ability/0-2.png";
		URL url = getClass().getResource(s);
		
		description.setBackground(new Color(255,255,255));
		description.setEditable(false);
		description.setBorder(BorderFactory.createLineBorder(Color.black,1));
		description.setText("每升1點的力量的增加能力如下：\n血量+150\n物理攻擊力+10\n"
				+ "物理防禦+8\n物理閃避+0.06%\n爆擊率+0.08%\n格檔+0.06%\n物理命中+0.09%");
		description.setFocusable(false);

		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("力量");
		textimage.setBounds(20, 0, 45, 35);
		
		strinfo.setOpaque(true);
		strinfo.setBackground(new Color(255,255,255));
		strinfo.setFont(new Font("標楷體",0,15));
		//strinfo.setEditable(false);
		//strinfo.setFocusable(false);
		
		strinfo.setBounds(65, 0, 145, 35);
		strinfo.setText((PlayerAbilitySystem.playerstr+PlayerAbilitySystem.externalstr) + " (" + PlayerAbilitySystem.playerstr + "+" + PlayerAbilitySystem.externalstr + ")");
		s = "/Ability/add.png";
		url = getClass().getResource(s);
		try {
			addimage[0] = ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/Ability/add1.png";
		url = getClass().getResource(s);
		try {
			addimage[1] = ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	
		addbtn.setIcon(new ImageIcon(addimage[0]));
		addbtn.setContentAreaFilled(false);
		addbtn.setBorderPainted(false);
		addbtn.setFocusPainted(false);

		addbtn.setBounds(215, 0, 45, 33);
		addbtn.setFocusable(false);
		this.add(textimage);
		this.add(strinfo);
		this.add(addbtn);
		
		InformationPowerUpdate.setstrinfo(strinfo);
		
		textimage.addMouseListener(new MouseListener() {
			public void mouseClicked(MouseEvent e)
			{
				
			}
			
			public void mouseEntered(MouseEvent e)
			{
				//StrInformation.this.add(description);
				PanelListenner.w.add(description,0);
				description.setBounds(PlayerAbilitySystem.abilityx-180, PlayerAbilitySystem.abilityy+320, 180, 150);
            }
			public void mouseExited(MouseEvent e)
			{
				PanelListenner.w.remove(description);
			}
			
			public void mousePressed(MouseEvent e)
			{
      
			}
			
			public void mouseReleased(MouseEvent e) {
				
			}
			
		});

		addbtn.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if(PlayerAbilitySystem.usablepoint>0)
				{
					PlayerAbilitySystem.usablepoint--;
					PlayerAbilitySystem.playerstr++;
					Playing.playermaxhp+=150;
					PlayerAbilitySystem.playeratk+=10;
					PlayerAbilitySystem.playerdef+=8;
					PlayerAbilitySystem.playeraar+=6;
					PlayerAbilitySystem.playercri+=8;
					PlayerAbilitySystem.playerblocking+=6;
					PlayerAbilitySystem.playeracc+=9;
				}
				addbtn.setIcon(new ImageIcon(addimage[1]));
			}
			
			public void mouseReleased(MouseEvent e) {
				addbtn.setIcon(new ImageIcon(addimage[0]));
			}
		});
		
		
	}
}

class DexInformation extends JLabel{
	DexInformation(){
		super();
		JLabel textimage = new JLabel();
		JLabel dexinfo = new JLabel();
		JButton addbtn = new JButton();
		JTextArea description = new JTextArea();
		String s = "/Ability/1-2.png";
		URL url = getClass().getResource(s);

		description.setBackground(new Color(255,255,255));
		description.setEditable(false);
		description.setBorder(BorderFactory.createLineBorder(Color.black,1));
		description.setText("每升1點的敏捷的增加能力如下：\n物理攻擊力+7\n綜合閃避率+0.07%\n"
				+ "物理閃避+0.09%\n魔法閃避+0.05%\n爆擊率+0.15%\n格檔+0.03%\n物理命中+0.05%");
		description.setFocusable(false);

		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("敏捷");
		textimage.setBounds(20, 0, 45, 35);
		
		
		dexinfo.setOpaque(true);
		dexinfo.setBackground(new Color(255,255,255));
		dexinfo.setFont(new Font("標楷體",0,15));
		//strinfo.setEditable(false);
		//strinfo.setFocusable(false);
		
		dexinfo.setBounds(65, 0, 145, 35);
		dexinfo.setText((PlayerAbilitySystem.playerdex+PlayerAbilitySystem.externaldex) + " (" + PlayerAbilitySystem.playerdex + "+" + PlayerAbilitySystem.externaldex + ")");
		
		addbtn.setIcon(new ImageIcon(StrInformation.addimage[0]));
		addbtn.setContentAreaFilled(false);
		addbtn.setBorderPainted(false);
		addbtn.setFocusPainted(false);
		addbtn.setFocusable(false);
		addbtn.setBounds(215, 0, 45, 33);
		
		this.add(textimage);
		this.add(dexinfo);
		this.add(addbtn);
		
		InformationPowerUpdate.setdexinfo(dexinfo);
		
		textimage.addMouseListener(new MouseListener() {
			public void mouseClicked(MouseEvent e)
			{
				
			}
			
			public void mouseEntered(MouseEvent e)
			{
				//StrInformation.this.add(description);
				PanelListenner.w.add(description,0);
				description.setBounds(PlayerAbilitySystem.abilityx-180, PlayerAbilitySystem.abilityy+320, 180, 150);
            }
			public void mouseExited(MouseEvent e)
			{
				PanelListenner.w.remove(description);
			}
			
			public void mousePressed(MouseEvent e)
			{
      
			}
			
			public void mouseReleased(MouseEvent e) {
				
			}
			
		});


		addbtn.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if(PlayerAbilitySystem.usablepoint>0)
				{
					PlayerAbilitySystem.usablepoint--;
					PlayerAbilitySystem.playerdex++;
					PlayerAbilitySystem.playeratk+=7;
					PlayerAbilitySystem.playeraar+=16;
					PlayerAbilitySystem.playersar+=12;
					PlayerAbilitySystem.playercri+=15;
					PlayerAbilitySystem.playerblocking+=3;
					PlayerAbilitySystem.playeracc+=5;
				}
				addbtn.setIcon(new ImageIcon(StrInformation.addimage[1]));
			}
			
			public void mouseReleased(MouseEvent e) {
				addbtn.setIcon(new ImageIcon(StrInformation.addimage[0]));
			}
		});

		
	}
}

class VitInformation extends JLabel{
	VitInformation(){
		super();
		JLabel textimage = new JLabel();
		JLabel vitinfo = new JLabel();
		JButton addbtn = new JButton();
		JTextArea description = new JTextArea();
		String s = "/Ability/2-2.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		description.setBackground(new Color(255,255,255));
		description.setEditable(false);
		description.setBorder(BorderFactory.createLineBorder(Color.black,1));
		description.setText("每升1點的體質的增加能力如下：\n血量+250\n綜合閃避率+0.04%\n"
				+ "魔力+70%\n物理防禦+20\n魔法防禦+16\n格檔+0.04%");
		description.setFocusable(false);
		
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("體質");
		textimage.setBounds(20, 0, 45, 35);
		
		
		vitinfo.setOpaque(true);
		vitinfo.setBackground(new Color(255,255,255));
		vitinfo.setFont(new Font("標楷體",0,15));
		//strinfo.setEditable(false);
		//strinfo.setFocusable(false);
		
		vitinfo.setBounds(65, 0, 145, 35);
		vitinfo.setText((PlayerAbilitySystem.playervit+PlayerAbilitySystem.externalvit) + " (" + PlayerAbilitySystem.playervit + "+" + PlayerAbilitySystem.externalvit + ")");
		
		addbtn.setIcon(new ImageIcon(StrInformation.addimage[0]));
		addbtn.setContentAreaFilled(false);
		addbtn.setBorderPainted(false);
		addbtn.setFocusPainted(false);
		addbtn.setFocusable(false);
		addbtn.setBounds(215, 0, 45, 33);
		
		this.add(textimage);
		this.add(vitinfo);
		this.add(addbtn);
		
		InformationPowerUpdate.setvitinfo(vitinfo);
		textimage.addMouseListener(new MouseListener() {
			public void mouseClicked(MouseEvent e)
			{
				
			}
			
			public void mouseEntered(MouseEvent e)
			{
				//StrInformation.this.add(description);
				PanelListenner.w.add(description,0);
				description.setBounds(PlayerAbilitySystem.abilityx-180, PlayerAbilitySystem.abilityy+320, 180, 150);
            }
			public void mouseExited(MouseEvent e)
			{
				PanelListenner.w.remove(description);
			}
			
			public void mousePressed(MouseEvent e)
			{
      
			}
			
			public void mouseReleased(MouseEvent e) {
				
			}
			
		});

				
		addbtn.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if(PlayerAbilitySystem.usablepoint>0)
				{
					PlayerAbilitySystem.usablepoint--;
					PlayerAbilitySystem.playervit++;
					Playing.playermaxhp+=250;
					Playing.playermaxmp+=70;
					PlayerAbilitySystem.playeraar+=4;
					PlayerAbilitySystem.playersar+=4;
					PlayerAbilitySystem.playerdef+=20;
					PlayerAbilitySystem.playermdef+=16;
					PlayerAbilitySystem.playerblocking+=4;
				}
				addbtn.setIcon(new ImageIcon(StrInformation.addimage[1]));
			}
			
			public void mouseReleased(MouseEvent e) {
				addbtn.setIcon(new ImageIcon(StrInformation.addimage[0]));
			}
		});

		
	}
}

class IntInformation extends JLabel{
	IntInformation(){
		super();
		JLabel textimage = new JLabel();
		JLabel intinfo = new JLabel();
		JButton addbtn = new JButton();
		JTextArea description = new JTextArea();
		String s = "/Ability/3-2.png";
		URL url = getClass().getResource(s);

		description.setBackground(new Color(255,255,255));
		description.setEditable(false);
		description.setBorder(BorderFactory.createLineBorder(Color.black,1));
		description.setText("每升1點的智力的增加能力如下：\n魔力+180\n魔法攻擊力+9\n"
				+ "魔法防禦+8\n魔法迴避+0.09%\n爆擊率+0.04%\n格檔+0.02%\n魔法命中+0.06%");
		description.setFocusable(false);

		
		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("智力");
		textimage.setBounds(20, 0, 45, 35);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		intinfo.setOpaque(true);
		intinfo.setBackground(new Color(255,255,255));
		intinfo.setFont(new Font("標楷體",0,15));
		//strinfo.setEditable(false);
		//strinfo.setFocusable(false);
		
		intinfo.setBounds(65, 0, 145, 35);
		intinfo.setText((PlayerAbilitySystem.playerint+PlayerAbilitySystem.externalint) + " (" + PlayerAbilitySystem.playerint + "+" + PlayerAbilitySystem.externalint + ")");
		
		addbtn.setIcon(new ImageIcon(StrInformation.addimage[0]));
		addbtn.setContentAreaFilled(false);
		addbtn.setBorderPainted(false);
		addbtn.setFocusPainted(false);
		addbtn.setFocusable(false);
		addbtn.setBounds(215, 0, 45, 33);
		
		this.add(textimage);
		this.add(intinfo);
		this.add(addbtn);
		
		InformationPowerUpdate.setintinfo(intinfo);
		textimage.addMouseListener(new MouseListener() {
			public void mouseClicked(MouseEvent e)
			{
				
			}
			
			public void mouseEntered(MouseEvent e)
			{
				//StrInformation.this.add(description);
				PanelListenner.w.add(description,0);
				description.setBounds(PlayerAbilitySystem.abilityx-180, PlayerAbilitySystem.abilityy+320, 180, 150);
            }
			public void mouseExited(MouseEvent e)
			{
				PanelListenner.w.remove(description);
			}
			
			public void mousePressed(MouseEvent e)
			{
      
			}
			
			public void mouseReleased(MouseEvent e) {
				
			}
			
		});
		
		addbtn.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if(PlayerAbilitySystem.usablepoint>0)
				{
					PlayerAbilitySystem.usablepoint--;
					PlayerAbilitySystem.playerint++;
					Playing.playermaxmp+=180;
					PlayerAbilitySystem.playermatk+=9;
					PlayerAbilitySystem.playermdef+=8;
					PlayerAbilitySystem.playersar+=9;
					PlayerAbilitySystem.playercri+=4;
					PlayerAbilitySystem.playerblocking+=2;
					PlayerAbilitySystem.playersac+=6;					
				}
				addbtn.setIcon(new ImageIcon(StrInformation.addimage[1]));
			}
			
			public void mouseReleased(MouseEvent e) {
				addbtn.setIcon(new ImageIcon(StrInformation.addimage[0]));
			}
		});


	}
}

class LukInformation extends JLabel{
	LukInformation(){
		super();
		JLabel textimage = new JLabel();
		JLabel lukinfo = new JLabel();
		JButton addbtn = new JButton();
		JTextArea description = new JTextArea();
		String s = "/Ability/4-2.png";
		URL url = getClass().getResource(s);

		description.setBackground(new Color(255,255,255));
		description.setEditable(false);
		description.setBorder(BorderFactory.createLineBorder(Color.black,1));
		description.setText("每升1點的幸運的增加能力如下：\n綜合閃避率+0.05%\n物理閃避+0.07%\n"
				+ "魔法防禦+18\n魔法迴避+0.04%\n爆擊率+0.03%\n物理命中+0.02%\n魔法命中+0.03%");
		description.setFocusable(false);

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("幸運");
		textimage.setBounds(20, 0, 45, 35);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		lukinfo.setOpaque(true);
		//strinfo.setBorder(border);
		lukinfo.setBackground(new Color(255,255,255));
		lukinfo.setFont(new Font("標楷體",0,15));
		//strinfo.setEditable(false);
		//strinfo.setFocusable(false);
		
		lukinfo.setBounds(65, 0, 145, 35);
		lukinfo.setText((PlayerAbilitySystem.playerluk+PlayerAbilitySystem.externalluk) + " (" + PlayerAbilitySystem.playerluk + "+" + PlayerAbilitySystem.externalluk + ")");
		
		addbtn.setIcon(new ImageIcon(StrInformation.addimage[0]));
		addbtn.setContentAreaFilled(false);
		addbtn.setBorderPainted(false);
		addbtn.setFocusPainted(false);
		addbtn.setFocusable(false);
		addbtn.setBounds(215, 0, 45, 33);
		
		this.add(textimage);
		this.add(lukinfo);
		this.add(addbtn);
		
		InformationPowerUpdate.setlukinfo(lukinfo);
		
		textimage.addMouseListener(new MouseListener() {
			public void mouseClicked(MouseEvent e)
			{
				
			}
			
			public void mouseEntered(MouseEvent e)
			{
				//StrInformation.this.add(description);
				PanelListenner.w.add(description,0);
				description.setBounds(PlayerAbilitySystem.abilityx-180, PlayerAbilitySystem.abilityy+320, 180, 150);
            }
			public void mouseExited(MouseEvent e)
			{
				PanelListenner.w.remove(description);
			}
			
			public void mousePressed(MouseEvent e)
			{
      
			}
			
			public void mouseReleased(MouseEvent e) {
				
			}
			
		});
		
		addbtn.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if(PlayerAbilitySystem.usablepoint>0)
				{
					PlayerAbilitySystem.usablepoint--;
					PlayerAbilitySystem.playerluk++;
					PlayerAbilitySystem.playeraar+=12;
					PlayerAbilitySystem.playermdef+=18;
					PlayerAbilitySystem.playersar+=11;
					PlayerAbilitySystem.playercri+=3;
					PlayerAbilitySystem.playeracc+=2;
					PlayerAbilitySystem.playersac+=3;					
				}
				addbtn.setIcon(new ImageIcon(StrInformation.addimage[1]));
			}
			
			public void mouseReleased(MouseEvent e) {
				addbtn.setIcon(new ImageIcon(StrInformation.addimage[0]));
			}
		});

	}
}

class AtkInformation extends JLabel{
	JLabel textimage = new JLabel();
	//JLabel atkinfo = new JLabel("",SwingConstants.RIGHT);
	AtkInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel atkinfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/0-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("物理攻擊");
		textimage.setBounds(0, 0, 60, 25);
		
		
		atkinfo.setOpaque(true);
		atkinfo.setBackground(new Color(255,255,255));
		atkinfo.setFont(new Font("標楷體",0,15));
		
		atkinfo.setBounds(60, 0, 60, 25);
		atkinfo.setText("" + (int)PlayerAbilitySystem.playeratk);
		
		this.add(textimage);
		this.add(atkinfo);
		InformationPowerUpdate.setatkinfo(atkinfo);

	}
}

class MatkInformation extends JLabel{
	JLabel textimage = new JLabel();
	MatkInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel matkinfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/1-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("魔法攻擊");
		textimage.setBounds(0, 0, 60, 25);
		
		
		matkinfo.setOpaque(true);
		matkinfo.setBackground(new Color(255,255,255));
		matkinfo.setFont(new Font("標楷體",0,15));
		
		matkinfo.setBounds(60, 0, 60, 25);
		matkinfo.setText("" + (int)PlayerAbilitySystem.playermatk);
			
		this.add(textimage);
		this.add(matkinfo);
		InformationPowerUpdate.setmatkinfo(matkinfo);

	}
}

class DefInformation extends JLabel{
	JLabel textimage = new JLabel();
	DefInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel definfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/2-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("物理防禦");
		textimage.setBounds(0, 0, 60, 25);
		
		
		definfo.setOpaque(true);
		definfo.setBackground(new Color(255,255,255));
		definfo.setFont(new Font("標楷體",0,15));
		
		definfo.setBounds(60, 0, 60, 25);
		definfo.setText("" + (int)PlayerAbilitySystem.playerdef);
			
		this.add(textimage);
		this.add(definfo);
		InformationPowerUpdate.setdefinfo(definfo);
	}
}

class MdefInformation extends JLabel{
	JLabel textimage = new JLabel();
	MdefInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel mdefinfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/3-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("魔法防禦");
		textimage.setBounds(0, 0, 60, 25);
		
		
		mdefinfo.setOpaque(true);
		mdefinfo.setBackground(new Color(255,255,255));
		mdefinfo.setFont(new Font("標楷體",0,15));
		
		mdefinfo.setBounds(60, 0, 60, 25);
		mdefinfo.setText("" + (int)PlayerAbilitySystem.playermdef);
			
		this.add(textimage);
		this.add(mdefinfo);
		InformationPowerUpdate.setmdefinfo(mdefinfo);
	}
}

class AarInformation extends JLabel{
	JLabel textimage = new JLabel();
	AarInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel aarinfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/4-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("物理閃避");
		textimage.setBounds(0, 0, 60, 25);
		
		
		aarinfo.setOpaque(true);
		aarinfo.setBackground(new Color(255,255,255));
		aarinfo.setFont(new Font("標楷體",0,15));
		
		aarinfo.setBounds(60, 0, 60, 25);
		aarinfo.setText("" + PlayerAbilitySystem.playeraar/100 + "." + PlayerAbilitySystem.playeraar/10%10 + PlayerAbilitySystem.playeraar%10 + "%");
			
		this.add(textimage);
		this.add(aarinfo);
		InformationPowerUpdate.setaarinfo(aarinfo);

	}
}

class SarInformation extends JLabel{
	JLabel textimage = new JLabel();
	SarInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel sarinfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/5-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("魔法閃避");
		textimage.setBounds(0, 0, 60, 25);
		
		
		sarinfo.setOpaque(true);
		sarinfo.setBackground(new Color(255,255,255));
		sarinfo.setFont(new Font("標楷體",0,15));
		
		sarinfo.setBounds(60, 0, 60, 25);
		sarinfo.setText("" + PlayerAbilitySystem.playersar/100 + "." + PlayerAbilitySystem.playersar/10%10 + PlayerAbilitySystem.playersar%10 + "%");
			
		this.add(textimage);
		this.add(sarinfo);
		InformationPowerUpdate.setsarinfo(sarinfo);

	}
}

class CriInformation extends JLabel{
	JLabel textimage = new JLabel();
	CriInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel criinfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/8-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("爆擊率");
		textimage.setBounds(0, 0, 60, 25);
		
		
		criinfo.setOpaque(true);
		criinfo.setBackground(new Color(255,255,255));
		criinfo.setFont(new Font("標楷體",0,15));
		
		criinfo.setBounds(60, 0, 60, 25);
		criinfo.setText("" + PlayerAbilitySystem.playercri/100 + "." + PlayerAbilitySystem.playercri/10%10 + PlayerAbilitySystem.playercri%10 + "%");
			
		this.add(textimage);
		this.add(criinfo);
		InformationPowerUpdate.setcriinfo(criinfo);

	}
}

class AcriInformation extends JLabel{
	JLabel textimage = new JLabel();
	AcriInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel acriinfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/9-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("抗爆擊率");
		textimage.setBounds(0, 0, 60, 25);
		
		
		acriinfo.setOpaque(true);
		acriinfo.setBackground(new Color(255,255,255));
		acriinfo.setFont(new Font("標楷體",0,15));
		
		acriinfo.setBounds(60, 0, 60, 25);
		acriinfo.setText("" + "" + PlayerAbilitySystem.playeracri/100 + "." + PlayerAbilitySystem.playeracri/10%10 + PlayerAbilitySystem.playeracri%10 + "%");
			
		this.add(textimage);
		this.add(acriinfo);
		InformationPowerUpdate.setacriinfo(acriinfo);
	}
}

class CriDamageInformation extends JLabel{
	JLabel textimage = new JLabel();
	CriDamageInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel cridamageinfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/10-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("爆擊傷害");
		textimage.setBounds(0, 0, 60, 25);
		
		
		cridamageinfo.setOpaque(true);
		cridamageinfo.setBackground(new Color(255,255,255));
		cridamageinfo.setFont(new Font("標楷體",0,15));
		
		cridamageinfo.setBounds(60, 0, 60, 25);
		cridamageinfo.setText("" + PlayerAbilitySystem.playercridamage/100 + "." + PlayerAbilitySystem.playercridamage/10%10 + PlayerAbilitySystem.playercridamage%10 + "%");
			
		this.add(textimage);
		this.add(cridamageinfo);
		InformationPowerUpdate.setcridamageinfo(cridamageinfo);
	}
}

class AccInformation extends JLabel{
	JLabel textimage = new JLabel();
	AccInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel accinfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/7-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("物理命中");
		textimage.setBounds(0, 0, 60, 25);
		
		
		accinfo.setOpaque(true);
		accinfo.setBackground(new Color(255,255,255));
		accinfo.setFont(new Font("標楷體",0,15));
		
		accinfo.setBounds(60, 0, 60, 25);
		accinfo.setText("" + PlayerAbilitySystem.playeracc/100 + "." + PlayerAbilitySystem.playeracc/10%10 + PlayerAbilitySystem.playeracc%10 + "%");
			
		this.add(textimage);
		this.add(accinfo);
		InformationPowerUpdate.setaccinfo(accinfo);

	}
}

class SacInformation extends JLabel{
	JLabel textimage = new JLabel();
	SacInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel sacinfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/6-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("魔法命中");
		textimage.setBounds(0, 0, 60, 25);
		
		
		sacinfo.setOpaque(true);
		sacinfo.setBackground(new Color(255,255,255));
		sacinfo.setFont(new Font("標楷體",0,15));
		
		sacinfo.setBounds(60, 0, 60, 25);
		sacinfo.setText("" + PlayerAbilitySystem.playersac/100 + "." + PlayerAbilitySystem.playersac/10%10 + PlayerAbilitySystem.playersac%10 + "%");
			
		this.add(textimage);
		this.add(sacinfo);
		InformationPowerUpdate.setsacinfo(sacinfo);
	}
}

class BlockingInformation extends JLabel{
	JLabel textimage = new JLabel();
	BlockingInformation(){
		super();
		//JLabel textimage = new JLabel();
		JLabel blockinginfo = new JLabel("",SwingConstants.RIGHT);
		String s = "/Ability/11-3.png";
		URL url = getClass().getResource(s);
		try {
			textimage.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		//textimage.setOpaque(true);
		//textimage.setBackground(new Color(0,208,0));
		//textimage.setFont(new Font("標楷體",0,15));
		//textimage.setText("格檔");
		textimage.setBounds(0, 0, 60, 25);
		
		
		blockinginfo.setOpaque(true);
		blockinginfo.setBackground(new Color(255,255,255));
		blockinginfo.setFont(new Font("標楷體",0,15));
		
		blockinginfo.setBounds(60, 0, 60, 25);
		blockinginfo.setText("" + PlayerAbilitySystem.playerblocking/100 + "." + PlayerAbilitySystem.playerblocking/10%10 + PlayerAbilitySystem.playerblocking%10 + "%");
			
		this.add(textimage);
		this.add(blockinginfo);
		InformationPowerUpdate.setblockinginfo(blockinginfo);

	}
}


class TaskSystem extends JPanel{
	static int taskx=300,tasky=220,clickx,clicky;
	TaskSystem(){
		super();
		this.setLayout(null);
		MovableAreaAndClose movableareaandclose = new MovableAreaAndClose();
		TaskTopArea tasktoparea = new TaskTopArea();
		TaskLeftAreaBase taskleftareabase = new TaskLeftAreaBase();
		TaskRightInformationArea taskrightinformationarea = new TaskRightInformationArea();
		//JViewport viewport = new JViewport();
		//viewport.setView(taskleftareabase);
		//viewport.setOpaque(false);
		//viewport.setPreferredSize(new Dimension(185,335));
		JScrollPane scr1 = new JScrollPane(taskleftareabase,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scr1.getViewport().setOpaque(false);
		//JScrollPane scr2 = new JScrollPane(taskrightinformationarea,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		JLabel background = new JLabel();
		String s;
		URL url;
		s = "/Task/bk.png";
		url = getClass().getResource(s);
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		background.setBounds(0, 0, 550, 400);
		movableareaandclose.setBounds(0, 0, 550, 25);
		movableareaandclose.closebtn.setBounds(510, 0, 40, 25);
		//movableareaandclose.closebtn.setText("x");
		//movableareaandclose.closebtn.setFont(new Font("標楷體",0,10));
		tasktoparea.setBounds(5, 25, 540, 35);
		tasktoparea.taskcardlayout=taskleftareabase.taskcardlayout;
		tasktoparea.taskleftareabase=taskleftareabase;
		//taskleftarea.setSize(200,630);
		taskleftareabase.setPreferredSize(new Dimension(185,335));
		scr1.setBounds(5, 60, 200, 335);
		scr1.setOpaque(false);
		taskrightinformationarea.setBounds(205, 60, 340, 335);
		//scr2.setBounds(205, 60, 340, 335);
		
		//this.add(comp)
		taskleftareabase.updateUI();
		//scr1.updateUI();
		//scr2.updateUI();
		this.add(background);
		background.add(scr1);
		//background.add(taskleftareabase);
		background.add(taskrightinformationarea);
		//this.add(scr2);
		background.add(movableareaandclose);
		background.add(tasktoparea);
		
		movableareaandclose.closebtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PanelListenner.taskshow=false;
				PanelListenner.w.remove(TaskSystem.this);
			}

		});

		
		movableareaandclose.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				clickx=e.getX();
				clicky=e.getY();
			}
		});
		
		movableareaandclose.addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				int x=e.getX();
				int y=e.getY();
				if((taskx+x-clickx)>=0 && (taskx+x-clickx)+550<=1200 && (tasky+y-clicky)>=0 && (tasky+y-clicky)+400<=768)
				{	
					TaskSystem.this.setBounds(taskx=taskx+x-clickx, tasky=tasky+y-clicky, 550, 400);
				}
				else if((taskx+x-clickx)<0)
				{
					if((tasky+y-clicky)>=0 && (tasky+y-clicky)+400<=768)
					TaskSystem.this.setBounds(taskx=0, tasky=tasky+y-clicky, 550, 400);
					else if((tasky+y-clicky)<0)
					TaskSystem.this.setBounds(taskx=0, tasky=0, 550, 400);
					else if((tasky+y-clicky)+400>768)
					TaskSystem.this.setBounds(taskx=0, tasky=368, 550, 400);
				}
				else if((taskx+x-clickx)+550>1200)
				{
					if((tasky+y-clicky)>=0 && (tasky+y-clicky)+400<=768)
					TaskSystem.this.setBounds(taskx=650, tasky=tasky+y-clicky, 550, 400);
					else if((tasky+y-clicky)<0)
					TaskSystem.this.setBounds(taskx=650, tasky=0, 550, 400);
					else if((tasky+y-clicky)+400>768)
					TaskSystem.this.setBounds(taskx=650, tasky=368, 550, 400);
				}
				else if((tasky+y-clicky)<0)
				{
					if((taskx+x-clickx)>=0 && (taskx+x-clickx)+550<=1200)
					TaskSystem.this.setBounds(taskx=taskx+x-clickx, tasky=0, 550, 400);
				}
				else if((tasky+y-clicky)+400>768)
				{
					if((taskx+x-clickx)>=0 && (taskx+x-clickx)+550<=1200)
					TaskSystem.this.setBounds(taskx=taskx+x-clickx, tasky=368, 550, 400);					
				}
			}
		});

	}
}

class TaskTopArea extends JPanel{
	CardLayout taskcardlayout;
	TaskLeftAreaBase taskleftareabase;
	Image nowimage[] = new Image[2];
	Image alrimage[] = new Image[2];
	TaskTopArea(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//this.setBackground(new Color(150,150,150));
		JToggleButton NowBtn = new JToggleButton();
		JToggleButton AlreadyBtn = new JToggleButton();
		String s[] = new String[2];
		URL url[] = new URL[2];
		
		s[0] = "/Task/0-1.png";
		s[1] = "/Task/1-1.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		try {
			nowimage[0] = ImageIO.read(url[0]);
			nowimage[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s[0] = "/Task/0-2.png";
		s[1] = "/Task/1-2.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		try {
			alrimage[0] = ImageIO.read(url[0]);
			alrimage[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		NowBtn.setIcon(new ImageIcon(nowimage[1]));
		AlreadyBtn.setIcon(new ImageIcon(alrimage[0]));
		
		NowBtn.setBorderPainted(false);
		NowBtn.setFocusPainted(false);
		NowBtn.setContentAreaFilled(false);
		AlreadyBtn.setBorderPainted(false);
		AlreadyBtn.setFocusPainted(false);
		AlreadyBtn.setContentAreaFilled(false);
		NowBtn.setFocusable(false);
		AlreadyBtn.setFocusable(false);
		NowBtn.setSelected(true);
		NowBtn.setBounds(0, 5, 100, 30);
		AlreadyBtn.setBounds(100, 5, 100, 30);
		this.add(NowBtn);
		this.add(AlreadyBtn);
		
		NowBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(NowBtn.isSelected()==false && AlreadyBtn.isSelected()==false)
				{
					NowBtn.setSelected(true);
				}
				if(NowBtn.isSelected())
				{
					NowBtn.setIcon(new ImageIcon(nowimage[1]));
					AlreadyBtn.setIcon(new ImageIcon(alrimage[0]));
					AlreadyBtn.setSelected(false);
					taskcardlayout.show(taskleftareabase, "Now");
				}
			}
		});

		AlreadyBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(NowBtn.isSelected()==false && AlreadyBtn.isSelected()==false)
				{
					AlreadyBtn.setSelected(true);
				}
				if(AlreadyBtn.isSelected())
				{
					NowBtn.setIcon(new ImageIcon(nowimage[0]));
					AlreadyBtn.setIcon(new ImageIcon(alrimage[1]));
					NowBtn.setSelected(false);
					taskcardlayout.show(taskleftareabase, "Already");
				}
			}
		});
	
	}
}

class TaskLeftAreaBase extends JPanel{
	CardLayout taskcardlayout;
	TaskLeftAreaBase(){
		super();
		this.setLayout(new CardLayout());
		this.setOpaque(false);
		NowTaskLeftArea nowtaskleftarea = new NowTaskLeftArea();
		AlreadyTaskLeftArea alreadytaskleftarea = new AlreadyTaskLeftArea();
		
		
		nowtaskleftarea.taskleftareabase=this;
		alreadytaskleftarea.taskleftareabase=this;
		taskcardlayout = (CardLayout)this.getLayout();
		this.add(nowtaskleftarea,"Now");
		this.add(alreadytaskleftarea, "Already");
	}
}

class NowTaskLeftArea extends JPanel{
	TaskLeftAreaBase taskleftareabase;
	static DefaultListModel<String> MainTaskModel = new DefaultListModel<>();
	static DefaultListModel<String> SubTaskModel = new DefaultListModel<>();
	static DefaultListModel<String> CareerTaskModel = new DefaultListModel<>();	
	static Image mainimage[] = new Image[2];
	static Image subimage[] = new Image[2];
	static Image carimage[] = new Image[2];

	NowTaskLeftArea(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		this.setBackground(new Color(40,40,40));
		JToggleButton MainTaskBtn = new JToggleButton();
		JToggleButton SubTaskBtn = new JToggleButton();
		JToggleButton CareerTaskBtn = new JToggleButton();
		JList<String> MainTaskList = new JList<>(MainTaskModel);
		JList<String> SubTaskList = new JList<>(SubTaskModel);
		JList<String> CareerTaskList = new JList<>(CareerTaskModel);
		MyListCellRenderer render = new MyListCellRenderer();
		String s[] = new String[2];
		URL url[] = new URL[2];
		s[0] = "/Task/2-1.png";
		s[1] = "/Task/3-1.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);		
		try {
			mainimage[0] = ImageIO.read(url[0]);
			mainimage[1] = ImageIO.read(url[1]);
		} catch (IOException e) {
			e.printStackTrace();
		}
		s[0] = "/Task/2-2.png";
		s[1] = "/Task/3-2.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);		
		try {
			subimage[0] = ImageIO.read(url[0]);
			subimage[1] = ImageIO.read(url[1]);
		} catch (IOException e) {
			e.printStackTrace();
		}
		s[0] = "/Task/2-3.png";
		s[1] = "/Task/3-3.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);		
		try {
			carimage[0] = ImageIO.read(url[0]);
			carimage[1] = ImageIO.read(url[1]);
		} catch (IOException e) {
			e.printStackTrace();
		}

		
		
		MainTaskList.setBackground(new Color(205,157,93));
		MainTaskList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		MainTaskList.setCellRenderer(render);
		SubTaskList.setBackground(new Color(205,157,93));
		SubTaskList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		SubTaskList.setCellRenderer(render);
		CareerTaskList.setBackground(new Color(205,157,93));
		CareerTaskList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		CareerTaskList.setCellRenderer(render);
		
		MainTaskBtn.setBounds(0, 0, 185, 50);
		SubTaskBtn.setBounds(0, 50, 185, 50);
		CareerTaskBtn.setBounds(0, 100, 185, 50);

		
		MainTaskList.setFocusable(false);
		SubTaskList.setFocusable(false);
		CareerTaskList.setFocusable(false);
		
		MainTaskBtn.setIcon(new ImageIcon(mainimage[0]));
		MainTaskBtn.setBorderPainted(false);
		MainTaskBtn.setFocusPainted(false);
		MainTaskBtn.setContentAreaFilled(false);
		MainTaskBtn.setFocusable(false);
		
		SubTaskBtn.setIcon(new ImageIcon(subimage[0]));
		SubTaskBtn.setBorderPainted(false);
		SubTaskBtn.setFocusPainted(false);
		SubTaskBtn.setContentAreaFilled(false);
		SubTaskBtn.setFocusable(false);
		
		CareerTaskBtn.setIcon(new ImageIcon(carimage[0]));
		CareerTaskBtn.setBorderPainted(false);
		CareerTaskBtn.setFocusPainted(false);
		CareerTaskBtn.setContentAreaFilled(false);
		CareerTaskBtn.setFocusable(false);
		
		/*
		for(int i=0;i<5;i++)
		MainTaskModel.addElement("GGGGG");
		for(int i=0;i<4;i++)
		SubTaskModel.addElement("TTTT");
		for(int i=0;i<3;i++)
		CareerTaskModel.addElement("AAAAA");
		*/
		
		this.setPreferredSize(new Dimension(185,330));
		this.updateUI();
		this.add(MainTaskBtn);
		this.add(SubTaskBtn);
		this.add(CareerTaskBtn);
		
		MainTaskBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				int len=50;
				if(MainTaskBtn.isSelected())
				{
					MainTaskBtn.setIcon(new ImageIcon(mainimage[1]));
					MainTaskList.setBounds(0, 50, 185, 40*MainTaskModel.getSize());	
					len+=40*MainTaskModel.getSize();
					NowTaskLeftArea.this.add(MainTaskList);
				}
				else
				{
					MainTaskBtn.setIcon(new ImageIcon(mainimage[0]));
					NowTaskLeftArea.this.remove(MainTaskList);
				}
				SubTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(SubTaskBtn.isSelected())
				{
					SubTaskList.setBounds(0, len, 185, 40*SubTaskModel.getSize());
					len+=40*SubTaskModel.getSize();
				}
				CareerTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(CareerTaskBtn.isSelected())
				{
					CareerTaskList.setBounds(0, len, 185, 40*CareerTaskModel.getSize());
					len+=40*CareerTaskModel.getSize();
				}
				taskleftareabase.setPreferredSize(new Dimension(185,len));
				NowTaskLeftArea.this.setPreferredSize(new Dimension(185,len));
				NowTaskLeftArea.this.updateUI();
			}
		});

		MainTaskList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				//SubTaskList.setSelectedIndex(-1);
				//CareerTaskList.setSelectedIndex(-1);	
				//System.out.println("GGGG");
				if(MainTaskList.getSelectedIndex()!=-1)
				{
					SubTaskList.clearSelection();
					CareerTaskList.clearSelection();
					String s = MainTaskModel.getElementAt(MainTaskList.getSelectedIndex());
					s=TaskRightInformationArea.taskmap.get(s);
					TaskRightInformationArea.taskinfo.setText(s);
				}
			}
		});
		
		SubTaskBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				int len=50;
				if(MainTaskBtn.isSelected())
				{
					MainTaskList.setBounds(0, 50, 185, 40*MainTaskModel.getSize());	
					len+=40*MainTaskModel.getSize();
				}
				SubTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(SubTaskBtn.isSelected())
				{
					SubTaskBtn.setIcon(new ImageIcon(subimage[1]));
					SubTaskList.setBounds(0, len, 185, 40*SubTaskModel.getSize());
					len+=40*SubTaskModel.getSize();
					NowTaskLeftArea.this.add(SubTaskList);
				}
				else
				{
					SubTaskBtn.setIcon(new ImageIcon(subimage[0]));
					NowTaskLeftArea.this.remove(SubTaskList);
				}
				CareerTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(CareerTaskBtn.isSelected())
				{
					CareerTaskList.setBounds(0, len, 185, 40*CareerTaskModel.getSize());
					len+=40*CareerTaskModel.getSize();
				}
				taskleftareabase.setPreferredSize(new Dimension(185,len));
				NowTaskLeftArea.this.setPreferredSize(new Dimension(185,len));
				NowTaskLeftArea.this.updateUI();
			}
		});

		SubTaskList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				//MainTaskList.setSelectedIndex(-1);
				//CareerTaskList.setSelectedIndex(-1);	
				if(SubTaskList.getSelectedIndex()!=-1)
				{
					MainTaskList.clearSelection();
					CareerTaskList.clearSelection();
					String s = SubTaskModel.getElementAt(SubTaskList.getSelectedIndex());
					s=TaskRightInformationArea.taskmap.get(s);
					TaskRightInformationArea.taskinfo.setText(s);
				}
			}
		});

		
		CareerTaskBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				int len=50;
				if(MainTaskBtn.isSelected())
				{
					MainTaskList.setBounds(0, 50, 185, 40*MainTaskModel.getSize());	
					len+=40*MainTaskModel.getSize();
				}
				SubTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(SubTaskBtn.isSelected())
				{
					SubTaskList.setBounds(0, len, 185, 40*SubTaskModel.getSize());
					len+=40*SubTaskModel.getSize();
				}
				CareerTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(CareerTaskBtn.isSelected())
				{
					CareerTaskBtn.setIcon(new ImageIcon(carimage[1]));
					CareerTaskList.setBounds(0, len, 185, 40*CareerTaskModel.getSize());
					len+=40*CareerTaskModel.getSize();
					NowTaskLeftArea.this.add(CareerTaskList);
				}
				else
				{
					CareerTaskBtn.setIcon(new ImageIcon(carimage[0]));
					NowTaskLeftArea.this.remove(CareerTaskList);				
				}
				taskleftareabase.setPreferredSize(new Dimension(185,len));
				NowTaskLeftArea.this.setPreferredSize(new Dimension(185,len));
				NowTaskLeftArea.this.updateUI();
			}
		});

		CareerTaskList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				//SubTaskList.setSelectedIndex(-1);
				//SubTaskList.clearSelection();
				//MainTaskList.setSelectedIndex(-1);	
				//MainTaskList.clearSelection();
				if(CareerTaskList.getSelectedIndex()!=-1)
				{
					MainTaskList.clearSelection();
					SubTaskList.clearSelection();
					String s = CareerTaskModel.getElementAt(CareerTaskList.getSelectedIndex());
					s=TaskRightInformationArea.taskmap.get(s);
					TaskRightInformationArea.taskinfo.setText(s);
				}
			}
		});

	
		
	}
}

class AlreadyTaskLeftArea extends JPanel{
	TaskLeftAreaBase taskleftareabase;
	static DefaultListModel<String> MainTaskModel = new DefaultListModel<>();
	static DefaultListModel<String> SubTaskModel = new DefaultListModel<>();
	static DefaultListModel<String> CareerTaskModel = new DefaultListModel<>();	
	AlreadyTaskLeftArea(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//this.setBackground(new Color(240,240,240));
		JToggleButton MainTaskBtn = new JToggleButton();
		JToggleButton SubTaskBtn = new JToggleButton();
		JToggleButton CareerTaskBtn = new JToggleButton();
		JList<String> MainTaskList = new JList<>(MainTaskModel);
		JList<String> SubTaskList = new JList<>(SubTaskModel);
		JList<String> CareerTaskList = new JList<>(CareerTaskModel);
		MyListCellRenderer render = new MyListCellRenderer();
		
		MainTaskList.setBackground(new Color(205,157,93));
		MainTaskList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		MainTaskList.setCellRenderer(render);
		SubTaskList.setBackground(new Color(205,157,93));
		SubTaskList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		SubTaskList.setCellRenderer(render);
		CareerTaskList.setBackground(new Color(205,157,93));
		CareerTaskList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		CareerTaskList.setCellRenderer(render);

		//System.out.println(MainTaskList.getSelectedIndex());
		//CareerTaskList.setSe
		MainTaskBtn.setBounds(0, 0, 185, 50);
		SubTaskBtn.setBounds(0, 50, 185, 50);
		CareerTaskBtn.setBounds(0, 100, 185, 50);
		
		
		MainTaskList.setFocusable(false);
		SubTaskList.setFocusable(false);
		CareerTaskList.setFocusable(false);
		
		MainTaskBtn.setIcon(new ImageIcon(NowTaskLeftArea.mainimage[0]));
		MainTaskBtn.setBorderPainted(false);
		MainTaskBtn.setFocusPainted(false);
		MainTaskBtn.setContentAreaFilled(false);
		MainTaskBtn.setFocusable(false);
		
		SubTaskBtn.setIcon(new ImageIcon(NowTaskLeftArea.subimage[0]));
		SubTaskBtn.setBorderPainted(false);
		SubTaskBtn.setFocusPainted(false);
		SubTaskBtn.setContentAreaFilled(false);		
		SubTaskBtn.setFocusable(false);
		
		CareerTaskBtn.setIcon(new ImageIcon(NowTaskLeftArea.carimage[0]));
		CareerTaskBtn.setBorderPainted(false);
		CareerTaskBtn.setFocusPainted(false);
		CareerTaskBtn.setContentAreaFilled(false);
		CareerTaskBtn.setFocusable(false);
		
		/*
		for(int i=0;i<3;i++)
		MainTaskModel.addElement("EEE");
		for(int i=0;i<4;i++)
		SubTaskModel.addElement("AAA");
		for(int i=0;i<5;i++)
		CareerTaskModel.addElement("QQQQQ");
	*/
		this.setPreferredSize(new Dimension(185,330));
		this.updateUI();
		this.add(MainTaskBtn);
		this.add(SubTaskBtn);
		this.add(CareerTaskBtn);
		
		MainTaskBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				int len=50;
				if(MainTaskBtn.isSelected())
				{
					MainTaskBtn.setIcon(new ImageIcon(NowTaskLeftArea.mainimage[1]));
					MainTaskList.setBounds(0, 50, 185, 40*MainTaskModel.getSize());	
					len+=40*MainTaskModel.getSize();
					AlreadyTaskLeftArea.this.add(MainTaskList);
				}
				else
				{
					MainTaskBtn.setIcon(new ImageIcon(NowTaskLeftArea.mainimage[0]));
					AlreadyTaskLeftArea.this.remove(MainTaskList);
				}
				SubTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(SubTaskBtn.isSelected())
				{
					SubTaskList.setBounds(0, len, 185, 40*SubTaskModel.getSize());
					len+=40*SubTaskModel.getSize();
				}
				CareerTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(CareerTaskBtn.isSelected())
				{
					CareerTaskList.setBounds(0, len, 185, 40*CareerTaskModel.getSize());
					len+=40*CareerTaskModel.getSize();
				}
				taskleftareabase.setPreferredSize(new Dimension(185,len));
				AlreadyTaskLeftArea.this.setPreferredSize(new Dimension(185,len));
				AlreadyTaskLeftArea.this.updateUI();
			}
		});

		
		MainTaskList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				//SubTaskList.setSelectedIndex(-1);
				//CareerTaskList.setSelectedIndex(-1);	
				//System.out.println("GGGG");
				if(MainTaskList.getSelectedIndex()!=-1)
				{
					SubTaskList.clearSelection();
					CareerTaskList.clearSelection();
					String s = MainTaskModel.getElementAt(MainTaskList.getSelectedIndex());
					s=TaskRightInformationArea.taskmap.get(s);
					TaskRightInformationArea.taskinfo.setText(s);
				}
			}
		});

		SubTaskBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				int len=50;
				if(MainTaskBtn.isSelected())
				{
					MainTaskList.setBounds(0, 50, 185, 40*MainTaskModel.getSize());	
					len+=40*MainTaskModel.getSize();
				}
				SubTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(SubTaskBtn.isSelected())
				{
					SubTaskBtn.setIcon(new ImageIcon(NowTaskLeftArea.subimage[1]));
					SubTaskList.setBounds(0, len, 185, 40*SubTaskModel.getSize());
					len+=40*SubTaskModel.getSize();
					AlreadyTaskLeftArea.this.add(SubTaskList);
				}
				else
				{
					SubTaskBtn.setIcon(new ImageIcon(NowTaskLeftArea.subimage[0]));
					AlreadyTaskLeftArea.this.remove(SubTaskList);
				}
				CareerTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(CareerTaskBtn.isSelected())
				{
					CareerTaskList.setBounds(0, len, 185, 40*CareerTaskModel.getSize());
					len+=40*CareerTaskModel.getSize();
				}
				taskleftareabase.setPreferredSize(new Dimension(185,len));
				AlreadyTaskLeftArea.this.setPreferredSize(new Dimension(185,len));
				AlreadyTaskLeftArea.this.updateUI();
			}
		});

		SubTaskList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				//MainTaskList.setSelectedIndex(-1);
				//CareerTaskList.setSelectedIndex(-1);	
				if(SubTaskList.getSelectedIndex()!=-1)
				{
					MainTaskList.clearSelection();
					CareerTaskList.clearSelection();
					String s = SubTaskModel.getElementAt(SubTaskList.getSelectedIndex());
					s=TaskRightInformationArea.taskmap.get(s);
					TaskRightInformationArea.taskinfo.setText(s);
				}
			}
		});

		
		CareerTaskBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				int len=50;
				if(MainTaskBtn.isSelected())
				{
					MainTaskList.setBounds(0, 50, 185, 40*MainTaskModel.getSize());	
					len+=40*MainTaskModel.getSize();
				}
				SubTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(SubTaskBtn.isSelected())
				{
					SubTaskList.setBounds(0, len, 185, 40*SubTaskModel.getSize());
					len+=40*SubTaskModel.getSize();
				}
				CareerTaskBtn.setBounds(0, len, 185, 50);
				len+=50;
				if(CareerTaskBtn.isSelected())
				{
					CareerTaskBtn.setIcon(new ImageIcon(NowTaskLeftArea.carimage[1]));
					CareerTaskList.setBounds(0, len, 185, 40*CareerTaskModel.getSize());
					len+=40*CareerTaskModel.getSize();
					AlreadyTaskLeftArea.this.add(CareerTaskList);
				}
				else
				{
					CareerTaskBtn.setIcon(new ImageIcon(NowTaskLeftArea.carimage[0]));
					AlreadyTaskLeftArea.this.remove(CareerTaskList);				
				}
				taskleftareabase.setPreferredSize(new Dimension(185,len));
				AlreadyTaskLeftArea.this.setPreferredSize(new Dimension(185,len));
				AlreadyTaskLeftArea.this.updateUI();
			}
		});

		CareerTaskList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				//SubTaskList.setSelectedIndex(-1);
				//SubTaskList.clearSelection();
				//MainTaskList.setSelectedIndex(-1);	
				//MainTaskList.clearSelection();
				if(CareerTaskList.getSelectedIndex()!=-1)
				{
					MainTaskList.clearSelection();
					SubTaskList.clearSelection();
					String s = CareerTaskModel.getElementAt(CareerTaskList.getSelectedIndex());
					s=TaskRightInformationArea.taskmap.get(s);
					TaskRightInformationArea.taskinfo.setText(s);
				}
			}
		});

	}
}


class MyListCellRenderer extends DefaultListCellRenderer{

	public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus) {
        JLabel c = (JLabel)super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        this.setHorizontalAlignment(SwingConstants.LEFT);
        c.setFont(new Font("標楷體",0,31));
        if(isSelected)
		{
        	//MainTaskModel
        	//System.out.println(list.getSe);
        	//TaskRightInformationArea.taskinfo.setText(TaskRightInformationArea.taskmap.get(list.getSelectionModel()));
        	c.setBackground(new Color(255,182,12));
        	this.setHorizontalAlignment(SwingConstants.CENTER);
        	
		}

		return c;
	}
}
/*
class MyListCellRendererNS extends DefaultListCellRenderer{

	public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus) {
        JLabel c = (JLabel)super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        this.setHorizontalAlignment(SwingConstants.LEFT);
        c.setFont(new Font("標楷體",0,31));
        if(isSelected)
		{
        	//MainTaskModel
        	//System.out.println(list.getSe);
        	//TaskRightInformationArea.taskinfo.setText(TaskRightInformationArea.taskmap.get(list.getSelectionModel()));
        	c.setBackground(new Color(255,182,12));
        	this.setHorizontalAlignment(SwingConstants.CENTER);
        	
		}

		return c;
	}
}

class MyListCellRendererNC extends DefaultListCellRenderer{

	public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus) {
        JLabel c = (JLabel)super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        this.setHorizontalAlignment(SwingConstants.LEFT);
        c.setFont(new Font("標楷體",0,31));
        if(isSelected)
		{
        	//MainTaskModel
        	//System.out.println(list.getSe);
        	//TaskRightInformationArea.taskinfo.setText(TaskRightInformationArea.taskmap.get(list.getSelectionModel()));
        	c.setBackground(new Color(255,182,12));
        	this.setHorizontalAlignment(SwingConstants.CENTER);
        	
		}

		return c;
	}
}

class MyListCellRendererAM extends DefaultListCellRenderer{

	public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus) {
        JLabel c = (JLabel)super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        this.setHorizontalAlignment(SwingConstants.LEFT);
        c.setFont(new Font("標楷體",0,31));
        if(isSelected)
		{
        	//MainTaskModel
        	//System.out.println(list.getSe);
        	//TaskRightInformationArea.taskinfo.setText(TaskRightInformationArea.taskmap.get(list.getSelectionModel()));
        	c.setBackground(new Color(255,182,12));
        	this.setHorizontalAlignment(SwingConstants.CENTER);
        	
		}

		return c;
	}
}

class MyListCellRendererAS extends DefaultListCellRenderer{

	public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus) {
        JLabel c = (JLabel)super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        this.setHorizontalAlignment(SwingConstants.LEFT);
        c.setFont(new Font("標楷體",0,31));
        if(isSelected)
		{
        	//MainTaskModel
        	//System.out.println(list.getSe);
        	//TaskRightInformationArea.taskinfo.setText(TaskRightInformationArea.taskmap.get(list.getSelectionModel()));
        	c.setBackground(new Color(255,182,12));
        	this.setHorizontalAlignment(SwingConstants.CENTER);
        	
		}

		return c;
	}
}

*/
/*
class MyListCellRendererAC extends DefaultListCellRenderer{

	public Component getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus) {
        JLabel c = (JLabel)super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        this.setHorizontalAlignment(SwingConstants.LEFT);
        c.setFont(new Font("標楷體",0,31));
        if(isSelected)
		{
        	//MainTaskModel
        	//System.out.println(list.getSe);
        	//TaskRightInformationArea.taskinfo.setText(TaskRightInformationArea.taskmap.get(list.getSelectionModel()));
        	c.setBackground(new Color(255,182,12));
        	this.setHorizontalAlignment(SwingConstants.CENTER);
        	
		}

		return c;
	}
}
*/

class TaskRightInformationArea extends JPanel{
	static boolean mainset[] = new boolean[20];
	static boolean mainfin[] = new boolean[20];
	static boolean subset[] = new boolean[20];
	static boolean subfin[] = new boolean[20];
	static boolean carset[] = new boolean[20];
	static boolean carfin[] = new boolean[20];
	static String mainn[] = new String[20];
	static String mains[] = new String[20];
	static String subn[] = new String[20];
	static String subs[] = new String[20];
	static String carn[] = new String[20];
	static String cars[] = new String[20];
	static JTextArea taskinfo = new JTextArea();
	static Map<String,String> taskmap = new HashMap<>();
	TaskRightInformationArea(){
		super();
		this.setLayout(null);
		//this.setBackground(new Color(255,255,255));
		this.setOpaque(false);

		for(int i=0;i<20;i++)
		{
			mainset[i]=false;
			mainfin[i]=false;
			subset[i]=false;
			subfin[i]=false;
			carset[i]=false;
			carfin[i]=false;
		}
		taskinfo.setOpaque(false);
		taskinfo.setBounds(0, 0, 340, 335);
		taskinfo.setEditable(false);
		taskinfo.setFocusable(false);
		taskinfo.setFont(new Font("標楷體",1,20));
		
		mainn[0]="初入世界";
		mains[0]="\n 任務名稱：" + mainn[0] + "\n\n 任務目標：\n 請找到春暮鎮大使(春暮鎮[34,31])並\n 進行對話\n\n 任務描述：\n 歡迎"
				+ "來到春暮鎮，來去找找春暮鎮\n 大使進行對話吧！\n\n 任務獎勵：\n 金錢：500 經驗值：600";
		mainn[1]="認識世界";
		mains[1]="\n 任務名稱：" + mainn[1] + "\n\n 任務目標：\n 請找到遊戲大使(校門口[39,26])並\n 進行對話\n\n 任務描述：\n 遊戲"
				+ "大使將為妳講解世界觀，請找\n 遊戲大使進行對話吧！\n\n 任務獎勵：\n 金錢：600 經驗值：700";
		mainn[2]="介紹世界";
		mains[2]="\n 任務名稱：" + mainn[2] + "\n\n 任務目標：\n 請找到遊戲大使(校門口[39,26])並\n 進行對話\n\n 任務描述：\n 遊戲"
				+ "大使將為你介紹這個世界，請\n 找遊戲大使進行對話吧！\n\n 任務獎勵：\n 金錢：600 經驗值：700";
		mainn[3]="教學指導1";
		mains[3]="\n 任務名稱：" + mainn[3] + "\n\n 任務目標：\n 開啟人物資訊後，請找到遊戲大使\n (校門口[39,26])並進行對話\n\n 任務描述：\n 遊戲"
				+ "大使將指導妳如何操作介面，\n 請找遊戲大使進行對話吧！\n\n 任務獎勵：\n 金錢：600 經驗值：700";
		mainn[4]="教學指導2";
		mains[4]="\n 任務名稱：" + mainn[4] + "\n\n 任務目標：\n 開啟道具欄後，請找到遊戲大使\n (校門口[39,26])並進行對話\n\n 任務描述：\n 遊戲"
				+ "大使將指導妳如何操作介面，\n 請找遊戲大使進行對話吧！\n\n 任務獎勵：\n 金錢：600 經驗值：700";
		mainn[5]="教學指導3";
		mains[5]="\n 任務名稱：" + mainn[5] + "\n\n 任務目標：\n 開啟技能頁後，請找到遊戲大使\n (校門口[39,26])並進行對話\n\n 任務描述：\n 遊戲"
				+ "大使將指導妳如何操作介面，\n 請找遊戲大使進行對話吧！\n\n 任務獎勵：\n 金錢：600 經驗值：700";
		mainn[6]="教學指導4";
		mains[6]="\n 任務名稱：" + mainn[6] + "\n\n 任務目標：\n 開啟人物素質後，請找到遊戲大使\n (校門口[39,26])並進行對話 \n\n 任務描述：\n 遊戲"
				+ "大使將指導妳如何操作介面，\n 請找遊戲大使進行對話吧！\n\n 任務獎勵：\n 金錢：600 經驗值：700";
		mainn[7]="教學指導5";
		mains[7]="\n 任務名稱：" + mainn[7] + "\n\n 任務目標：\n 開啟任務頁後，請找到遊戲大使\n (校門口[39,26])並進行對話\n\n 任務描述：\n 遊戲"
				+ "大使將指導妳如何操作介面，\n 請找遊戲大使進行對話吧！\n\n 任務獎勵：\n 金錢：600 經驗值：700";
		mainn[8]="教學指導6";
		mains[8]="\n 任務名稱：" + mainn[8] + "\n\n 任務目標：\n 開啟設定後，請找到遊戲大使\n (校門口[39,26])並進行對話\n\n 任務描述：\n 遊戲"
				+ "大使將指導妳如何操作介面，\n 請找遊戲大使進行對話吧！\n\n 任務獎勵：\n 金錢：600 經驗值：700";
		mainn[9]="教學指導7";
		mains[9]="\n 任務名稱：" + mainn[9] + "\n\n 任務目標：\n 開啟開發者人員名單後，請找到遊\n 戲大使(校門口[39,26])並進行對話\n\n 任務描述：\n 遊戲"
				+ "大使將指導妳如何操作介面，\n 請找遊戲大使進行對話吧！\n\n 任務獎勵：\n 金錢：600 經驗值：700";
		mainn[10]="開發者們1";
		mains[10]="\n 任務名稱：" + mainn[10] + "\n\n 任務目標：\n 與開發者蟒蛇(校門口[40,26])進行\n 對話吧！\n\n 任務描述：\n 拜訪"
				+ "一下這個世界的開發者們吧！\n\n 任務獎勵：\n 金錢：2000 經驗值：3000";
		mainn[11]="開發者們2";
		mains[11]="\n 任務名稱：" + mainn[11] + "\n\n 任務目標：\n 與開發者萬花筒六道輪迴(校門口\n [41,26])進行對話吧！\n\n 任務描述：\n 拜訪"
				+ "一下這個世界的開發者們吧！\n\n 任務獎勵：\n 金錢：2000 經驗值：3000";
		mainn[12]="開發者們3";
		mains[12]="\n 任務名稱：" + mainn[12] + "\n\n 任務目標：\n 與開發者紫水晶(校門口[42,26])進\n 行對話吧！\n\n 任務描述：\n 拜訪"
				+ "一下這個世界的開發者們吧！\n\n 任務獎勵：\n 金錢：2000 經驗值：3000";
		mainn[13]="開發者們4";
		mains[13]="\n 任務名稱：" + mainn[13] + "\n\n 任務目標：\n 與開發者哦莫(校門口[42,29])進行\n 對話吧！\n\n 任務描述：\n 拜訪"
				+ "一下這個世界的開發者們吧！\n\n 任務獎勵：\n 金錢：2000 經驗值：3000";
		mainn[14]="開發者們5";
		mains[14]="\n 任務名稱：" + mainn[14] + "\n\n 任務目標：\n 與開發者桐人(校門口[42,30])進行\n 對話吧！\n\n 任務描述：\n 拜訪"
				+ "一下這個世界的開發者們吧！\n\n 任務獎勵：\n 金錢：2000 經驗值：3000";
		mainn[15]="開發者們6";
		mains[15]="\n 任務名稱：" + mainn[15] + "\n\n 任務目標：\n 與開發者惡魔(校門口[42,31])進行\n 對話吧！\n\n 任務描述：\n 拜訪"
				+ "一下這個世界的開發者們吧！\n\n 任務獎勵：\n 金錢：2000 經驗值：3000";
		mainn[16]="旅途啟航";
		mains[16]="\n 任務名稱：" + mainn[16] + "\n\n 任務目標：\n 請找到遊戲大使(校門口[39,26])\n 並進行對話\n\n 任務描述：\n 介紹結束了，請"
				+ "找遊戲大使進行下\n 一階段的旅程吧！\n\n 任務獎勵：\n 金錢：10000 經驗值：12000";
		mainn[17]="陌生男子";
		mains[17]="\n 任務名稱：" + mainn[17] + "\n\n 任務目標：\n 請找到陌生男子(校門口[33,11])\n 並且與他進行對話\n\n 任務描述：\n 經遊戲大使告知，有"
				+ "一處有一個陌\n 生男子等著我，還是去找找吧！\n\n 任務獎勵：\n 金錢：20000 經驗值：30000";
		mainn[18]="開發者們7";
		mains[18]="\n 任務名稱：" + mainn[18] + "\n\n 任務目標：\n 與開發者雪人胖胖(校門口[42,31])進\n   行對話吧！\n\n 任務描述：\n 拜訪"
				+ "一下這個世界的開發者們吧！\n\n 任務獎勵：\n 金錢：2000 經驗值：3000";

				
		subn[0]="拜訪教授";
		subs[0]="\n 任務名稱：" + subn[0] + "\n\n 任務目標：\n 拜訪吳卓俊教授(校園左方C區域\n [39,18])\n\n 任務描述：\n 吳卓俊教授"
				+ "是一位傑出優秀的教授\n 去找他進行交談吧！\n\n 任務獎勵：\n 金錢：50000 經驗值：60000";
		subn[1]="挑戰教授";
		subs[1]="\n 任務名稱：" + subn[1] + "\n\n 任務目標：\n 對吳卓俊教授(校園左方C區域\n [39,18])提出挑戰的要求\n\n 任務描述：\n 教授給了一個可以挑戰"
				+ "他的機會\n ，不如就試試吧！\n\n 任務獎勵：\n 金錢：200000 經驗值：300000";

		carn[0]="了解戰士";
		cars[0]="\n 任務名稱：" + carn[0] + "\n\n 任務目標：\n 請去尋找戰士導師(校門口[20,15])\n 進行交談\n\n 任務描述：\n 為了"
				+ "了解何謂戰士必須去尋找戰士\n 導師\n\n 任務獎勵：\n 金錢：10000 經驗值：20000";
		carn[1]="成為戰士";
		cars[1]="\n 任務名稱：" + carn[1] + "\n\n 任務目標：\n 與戰士導師(校門口[39,26])進行轉\n 職\n\n 任務描述：\n 為了"
				+ "成為戰士，這是最重要的一步\n\n 任務獎勵：\n 金錢：15000 經驗值：25000";
			
		//taskmap.put(mainn[0], mains[0]);
		//taskmap.put(mainn[1], mains[1]);
		
		for(int i=0;i<20;i++)
		taskmap.put(mainn[i], mains[i]);
		for(int i=0;i<2;i++)
		taskmap.put(subn[i],subs[i]);
		for(int i=0;i<2;i++)
		taskmap.put(carn[i],cars[i]);
	
		/*
		for(int i=0;i<18;i++)
		NowTaskLeftArea.MainTaskModel.addElement(mainn[i]);
		
		for(int i=0;i<2;i++)
		NowTaskLeftArea.SubTaskModel.addElement(subn[i]);
		for(int i=0;i<2;i++)
		NowTaskLeftArea.CareerTaskModel.addElement(carn[i]);
		*/
		NowTaskLeftArea.MainTaskModel.addElement(mainn[0]);
		//NowTaskLeftArea.MainTaskModel.addElement(mainn[1]);
		mainset[0]=true;
		
		//background.setBounds(0, 0, 340, 335);
		//this.add(background);
		this.add(taskinfo);
	}
}

class SkillDisplayField extends JPanel{
	static Image testimg = null;
	static SkillDisplaySubField skilldisplaysubfield;
	static int fieldx=20,fieldy=683,clickx,clicky;
	static JLabel skillimage[] = new JLabel[12];
	static JLabel move[] = new JLabel[12];
	static boolean set[] = new boolean[12];
	static int cormove[][] = new int[18][2];
	static int number[] = new int[18];
	static Image numberimage[] = new Image[18];
	SkillDisplayField(){
		super();
		this.setLayout(null);
		this.setOpaque(true);
		this.setBackground(new Color(100,100,100));
		SkillDisplaySubField.skilldisplayfield=this;
		int distance[] = new int[18]; 
		JLabel background = new JLabel();
		/*
		JPanel t = new JPanel();
		t.setLayout(null);
		t.setBackground(new Color(255,255,255,0));
		JLabel g = new JLabel("Q",SwingConstants.LEFT);
		*/
		String s = "";
		URL url;
		/*
		s = "/Skill/skill.png";
		URL url = getClass().getResource(s);
		
		try {
			testimg=ImageIO.read(url);
		} catch (IOException e) {

			e.printStackTrace();
		}
		*/
		s = "/Display/left.png";
		url = getClass().getResource(s);
		
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {

			e.printStackTrace();
		}
	
		for(int i=0;i<18;i++)
		{
			number[i]=-1;
		}
		for(int i=0;i<12;i++)
		{
			skillimage[i] = new JLabel();
			skillimage[i].setOpaque(true);
			skillimage[i].setBackground(new Color(240,240,240));
			skillimage[i].setBounds(15+45*i, 10, 40, 40);
			skillimage[i].setFocusable(false);
			set[i] = false;
			cormove[i][0]=15+45*i+fieldx;
			cormove[i][1]=10+fieldy;
			move[i] = new JLabel();
			move[i].setBounds(15+45*i+fieldx, 10+fieldy, 40, 40);
			move[i].setOpaque(true);
			move[i].setFocusable(false);
			PanelListenner.w.add(move[i],0);
			move[i].setVisible(false);
			background.add(skillimage[i]);
		}
		background.setBounds(0, 0, 565, 70);
		this.add(background);
		/*
		test.setOpaque(true);
		test.setBackground(new Color(255,255,255));
		test.setIcon(new ImageIcon(testimg));
		test.setBounds(5, 10, 40, 40);
		//move.setIcon(new ImageIcon(testimg));
		//move.setBounds(230, 610, 40, 40);
		//move.setVisible(false);
		
		test1.setOpaque(true);
		test1.setBackground(new Color(255,255,255));
		//test1.setIcon(new ImageIcon(testimg));
		test1.setBounds(50, 10, 40, 40);
		
		//PanelListenner.w.add(move,0);
		this.add(test);
		this.add(test1);
		*/
		/*
		skillimage[0].setIcon(new ImageIcon(testimg));
		move[0].setIcon(new ImageIcon(testimg));
		move[0].setVisible(true);
		set[0] = true;
		*/
		//System.out.println(PanelListenner.w.getComponentCount());
		//PanelListenner.w.add(move[0],0);
		
		
		move[0].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[0],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[0])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[0][0]+20))*((15+45*i+20+fieldx)-(cormove[0][0]+20))+((10+20+fieldy)-(cormove[0][1]+20))*((10+20+fieldy)-(cormove[0][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[0][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[0][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[0][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[0][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[0]));
							move[t].setIcon(new ImageIcon(numberimage[0]));
							set[t]=true;
							move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[0]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[0]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[0];
						number[t]=number[0];
					}
					else if(t==-1)
					{
						skillimage[0].setIcon(null);
						move[0].setVisible(false);
						set[0]=false;
						number[0]=-1;
					}
					move[0].setBounds(15+45*0+fieldx, 10+fieldy, 40, 40);
					cormove[0][0]=15+45*0+fieldx;
					cormove[0][1]=10+fieldy;
				}
			}
		});
		
		move[0].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[0])
				{
					if((cormove[0][0]-clickx+e.getX())>=0 && (cormove[0][1]-clicky+e.getY())>=0 && (cormove[0][0]-clickx+e.getX()+40)<=1200 && (cormove[0][1]-clicky+e.getY()+40)<=768)
					move[0].setBounds(cormove[0][0]=cormove[0][0]-clickx+e.getX(), cormove[0][1]=cormove[0][1]-clicky+e.getY(), 40, 40);
					else if((cormove[0][0]-clickx+e.getX())<0)
					{
						if((cormove[0][1]-clicky+e.getY())>=0 && (cormove[0][1]-clicky+e.getY()+40)<=768)
						move[0].setBounds(cormove[0][0]=0,cormove[0][1]=cormove[0][1]-clicky+e.getY(),40,40);
						else if((cormove[0][1]-clicky+e.getY())<0)
						move[0].setBounds(cormove[0][0]=0,cormove[0][1]=0,40,40);
						else if((cormove[0][1]-clicky+e.getY()+40)>768)
						move[0].setBounds(cormove[0][0]=0,cormove[0][1]=728,40,40);
					}
					else if((cormove[0][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[0][1]-clicky+e.getY())>=0 && (cormove[0][1]-clicky+e.getY()+40)<=768)
						move[0].setBounds(cormove[0][0]=1160,cormove[0][1]=cormove[0][1]-clicky+e.getY(),40,40);
						else if((cormove[0][1]-clicky+e.getY())<0)
						move[0].setBounds(cormove[0][0]=1160,cormove[0][1]=0,40,40);
						else if((cormove[0][1]-clicky+e.getY()+40)>768)
						move[0].setBounds(cormove[0][0]=1160,cormove[0][1]=728,40,40);
					}
					else if((cormove[0][1]-clicky+e.getY())<0)
					{
						if((cormove[0][0]-clickx+e.getX())>=0 && (cormove[0][0]-clickx+e.getX()+40)<=1200)
						move[0].setBounds(cormove[0][0]=cormove[0][0]-clickx+e.getX(), cormove[0][1]=0, 40, 40);
					}
					else if((cormove[0][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[0][0]-clickx+e.getX())>=0 && (cormove[0][0]-clickx+e.getX()+40)<=1200)
						move[0].setBounds(cormove[0][0]=cormove[0][0]-clickx+e.getX(), cormove[0][1]=728, 40, 40);
					}
				}
			}
		});
		
		move[1].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[1],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[1])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[1][0]+20))*((15+45*i+20+fieldx)-(cormove[1][0]+20))+((10+20+fieldy)-(cormove[1][1]+20))*((10+20+fieldy)-(cormove[1][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[1][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[1][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[1][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[1][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[1]));
						    move[t].setIcon(new ImageIcon(numberimage[1]));
							set[t]=true;
						    move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[1]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[1]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[1];
						number[t]=number[1];

					}
					else if(t==-1)
					{
						skillimage[1].setIcon(null);
						move[1].setVisible(false);
						set[1] = false;
						number[1]=-1;
					}
					move[1].setBounds(15+45*1+fieldx, 10+fieldy, 40, 40);
					cormove[1][0]=15+45*1+fieldx;
					cormove[1][1]=10+fieldy;

				}
			}
		});
		
		move[1].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[1])
				{
					if((cormove[1][0]-clickx+e.getX())>=0 && (cormove[1][1]-clicky+e.getY())>=0 && (cormove[1][0]-clickx+e.getX()+40)<=1200 && (cormove[1][1]-clicky+e.getY()+40)<=768)
					move[1].setBounds(cormove[1][0]=cormove[1][0]-clickx+e.getX(), cormove[1][1]=cormove[1][1]-clicky+e.getY(), 40, 40);
					else if((cormove[1][0]-clickx+e.getX())<0)
					{
						if((cormove[1][1]-clicky+e.getY())>=0 && (cormove[1][1]-clicky+e.getY()+40)<=768)
						move[1].setBounds(cormove[1][0]=0,cormove[1][1]=cormove[1][1]-clicky+e.getY(),40,40);
						else if((cormove[1][1]-clicky+e.getY())<0)
						move[1].setBounds(cormove[1][0]=0,cormove[1][1]=0,40,40);
						else if((cormove[1][1]-clicky+e.getY()+40)>768)
						move[1].setBounds(cormove[1][0]=0,cormove[1][1]=728,40,40);
					}
					else if((cormove[1][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[1][1]-clicky+e.getY())>=0 && (cormove[1][1]-clicky+e.getY()+40)<=768)
						move[1].setBounds(cormove[1][0]=1160,cormove[1][1]=cormove[1][1]-clicky+e.getY(),40,40);
						else if((cormove[1][1]-clicky+e.getY())<0)
						move[1].setBounds(cormove[1][0]=1160,cormove[1][1]=0,40,40);
						else if((cormove[1][1]-clicky+e.getY()+40)>768)
						move[1].setBounds(cormove[1][0]=1160,cormove[1][1]=728,40,40);
					}
					else if((cormove[1][1]-clicky+e.getY())<0)
					{
						if((cormove[1][0]-clickx+e.getX())>=0 && (cormove[1][0]-clickx+e.getX()+40)<=1200)
						move[1].setBounds(cormove[1][0]=cormove[1][0]-clickx+e.getX(), cormove[1][1]=0, 40, 40);
					}
					else if((cormove[1][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[1][0]-clickx+e.getX())>=0 && (cormove[1][0]-clickx+e.getX()+40)<=1200)
						move[1].setBounds(cormove[1][0]=cormove[1][0]-clickx+e.getX(), cormove[1][1]=728, 40, 40);
					}
				}	
			}
		});
	
		move[2].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[2],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[2])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[2][0]+20))*((15+45*i+20+fieldx)-(cormove[2][0]+20))+((10+20+fieldy)-(cormove[2][1]+20))*((10+20+fieldy)-(cormove[2][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[2][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[2][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[2][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[2][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[2]));
						    move[t].setIcon(new ImageIcon(numberimage[2]));
							set[t]=true;
						    move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[2]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[2]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[2];
						number[t]=number[2];

					}
					else if(t==-1)
					{
						skillimage[2].setIcon(null);
						move[2].setVisible(false);
						set[2]=false;
						number[2]=-1;
					}
					move[2].setBounds(15+45*2+fieldx, 10+fieldy, 40, 40);
					cormove[2][0]=15+45*2+fieldx;
					cormove[2][1]=10+fieldy;

				}
			}
		});
		
		move[2].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[2])
				{
					if((cormove[2][0]-clickx+e.getX())>=0 && (cormove[2][1]-clicky+e.getY())>=0 && (cormove[2][0]-clickx+e.getX()+40)<=1200 && (cormove[2][1]-clicky+e.getY()+40)<=768)
					move[2].setBounds(cormove[2][0]=cormove[2][0]-clickx+e.getX(), cormove[2][1]=cormove[2][1]-clicky+e.getY(), 40, 40);
					else if((cormove[2][0]-clickx+e.getX())<0)
					{
						if((cormove[2][1]-clicky+e.getY())>=0 && (cormove[2][1]-clicky+e.getY()+40)<=768)
						move[2].setBounds(cormove[2][0]=0,cormove[2][1]=cormove[2][1]-clicky+e.getY(),40,40);
						else if((cormove[2][1]-clicky+e.getY())<0)
						move[2].setBounds(cormove[2][0]=0,cormove[2][1]=0,40,40);
						else if((cormove[2][1]-clicky+e.getY()+40)>768)
						move[2].setBounds(cormove[2][0]=0,cormove[2][1]=728,40,40);
					}
					else if((cormove[2][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[2][1]-clicky+e.getY())>=0 && (cormove[2][1]-clicky+e.getY()+40)<=768)
						move[2].setBounds(cormove[2][0]=1160,cormove[2][1]=cormove[2][1]-clicky+e.getY(),40,40);
						else if((cormove[2][1]-clicky+e.getY())<0)
						move[2].setBounds(cormove[2][0]=1160,cormove[2][1]=0,40,40);
						else if((cormove[2][1]-clicky+e.getY()+40)>768)
						move[2].setBounds(cormove[2][0]=1160,cormove[2][1]=728,40,40);
					}
					else if((cormove[2][1]-clicky+e.getY())<0)
					{
						if((cormove[2][0]-clickx+e.getX())>=0 && (cormove[2][0]-clickx+e.getX()+40)<=1200)
						move[2].setBounds(cormove[2][0]=cormove[2][0]-clickx+e.getX(), cormove[2][1]=0, 40, 40);
					}
					else if((cormove[2][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[2][0]-clickx+e.getX())>=0 && (cormove[2][0]-clickx+e.getX()+40)<=1200)
						move[2].setBounds(cormove[2][0]=cormove[2][0]-clickx+e.getX(), cormove[2][1]=728, 40, 40);
					}
			    }	
			}
		});

		move[3].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[3],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[3])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[3][0]+20))*((15+45*i+20+fieldx)-(cormove[3][0]+20))+((10+20+fieldy)-(cormove[3][1]+20))*((10+20+fieldy)-(cormove[3][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[3][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[3][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[3][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[3][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[3]));
						    move[t].setIcon(new ImageIcon(numberimage[3]));
							set[t]=true;
						    move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[3]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[3]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[3];
						number[t]=number[3];

					}
					else if(t==-1)
					{
						skillimage[3].setIcon(null);
						move[3].setVisible(false);
						set[3]=false;
						number[3]=-1;
					}
					move[3].setBounds(15+45*3+fieldx, 10+fieldy, 40, 40);
					cormove[3][0]=15+45*3+fieldx;
					cormove[3][1]=10+fieldy;

				}
			}
		});
		
		move[3].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[3])
				{
					if((cormove[3][0]-clickx+e.getX())>=0 && (cormove[3][1]-clicky+e.getY())>=0 && (cormove[3][0]-clickx+e.getX()+40)<=1200 && (cormove[3][1]-clicky+e.getY()+40)<=768)
					move[3].setBounds(cormove[3][0]=cormove[3][0]-clickx+e.getX(), cormove[3][1]=cormove[3][1]-clicky+e.getY(), 40, 40);
					else if((cormove[3][0]-clickx+e.getX())<0)
					{
						if((cormove[3][1]-clicky+e.getY())>=0 && (cormove[3][1]-clicky+e.getY()+40)<=768)
						move[3].setBounds(cormove[3][0]=0,cormove[3][1]=cormove[3][1]-clicky+e.getY(),40,40);
						else if((cormove[3][1]-clicky+e.getY())<0)
						move[3].setBounds(cormove[3][0]=0,cormove[3][1]=0,40,40);
						else if((cormove[3][1]-clicky+e.getY()+40)>768)
						move[3].setBounds(cormove[3][0]=0,cormove[3][1]=728,40,40);
					}
					else if((cormove[3][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[3][1]-clicky+e.getY())>=0 && (cormove[3][1]-clicky+e.getY()+40)<=768)
						move[3].setBounds(cormove[3][0]=1160,cormove[3][1]=cormove[3][1]-clicky+e.getY(),40,40);
						else if((cormove[3][1]-clicky+e.getY())<0)
						move[3].setBounds(cormove[3][0]=1160,cormove[3][1]=0,40,40);
						else if((cormove[3][1]-clicky+e.getY()+40)>768)
						move[3].setBounds(cormove[3][0]=1160,cormove[3][1]=728,40,40);
					}
					else if((cormove[3][1]-clicky+e.getY())<0)
					{
						if((cormove[3][0]-clickx+e.getX())>=0 && (cormove[3][0]-clickx+e.getX()+40)<=1200)
						move[3].setBounds(cormove[3][0]=cormove[3][0]-clickx+e.getX(), cormove[3][1]=0, 40, 40);
					}
					else if((cormove[3][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[3][0]-clickx+e.getX())>=0 && (cormove[3][0]-clickx+e.getX()+40)<=1200)
						move[3].setBounds(cormove[3][0]=cormove[3][0]-clickx+e.getX(), cormove[3][1]=728, 40, 40);
					}
				}
			}
		});

		move[4].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[4],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[4])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[4][0]+20))*((15+45*i+20+fieldx)-(cormove[4][0]+20))+((10+20+fieldy)-(cormove[4][1]+20))*((10+20+fieldy)-(cormove[4][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[4][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[4][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[4][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[4][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[4]));
						    move[t].setIcon(new ImageIcon(numberimage[4]));
							set[t]=true;
						    move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[4]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[4]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[4];
						number[t]=number[4];

					}
					else if(t==-1)
					{
						skillimage[4].setIcon(null);
						move[4].setVisible(false);
						set[4]=false;
						number[4]=-1;
					}
					move[4].setBounds(15+45*4+fieldx, 10+fieldy, 40, 40);
					cormove[4][0]=15+45*4+fieldx;
					cormove[4][1]=10+fieldy;

				}
			}
		});
		
		move[4].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[4])
				{
					if((cormove[4][0]-clickx+e.getX())>=0 && (cormove[4][1]-clicky+e.getY())>=0 && (cormove[4][0]-clickx+e.getX()+40)<=1200 && (cormove[4][1]-clicky+e.getY()+40)<=768)
					move[4].setBounds(cormove[4][0]=cormove[4][0]-clickx+e.getX(), cormove[4][1]=cormove[4][1]-clicky+e.getY(), 40, 40);
					else if((cormove[4][0]-clickx+e.getX())<0)
					{
						if((cormove[4][1]-clicky+e.getY())>=0 && (cormove[4][1]-clicky+e.getY()+40)<=768)
						move[4].setBounds(cormove[4][0]=0,cormove[4][1]=cormove[4][1]-clicky+e.getY(),40,40);
						else if((cormove[4][1]-clicky+e.getY())<0)
						move[4].setBounds(cormove[4][0]=0,cormove[4][1]=0,40,40);
						else if((cormove[4][1]-clicky+e.getY()+40)>768)
						move[4].setBounds(cormove[4][0]=0,cormove[4][1]=728,40,40);
					}
					else if((cormove[4][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[4][1]-clicky+e.getY())>=0 && (cormove[4][1]-clicky+e.getY()+40)<=768)
						move[4].setBounds(cormove[4][0]=1160,cormove[4][1]=cormove[4][1]-clicky+e.getY(),40,40);
						else if((cormove[4][1]-clicky+e.getY())<0)
						move[4].setBounds(cormove[4][0]=1160,cormove[4][1]=0,40,40);
						else if((cormove[4][1]-clicky+e.getY()+40)>768)
						move[4].setBounds(cormove[4][0]=1160,cormove[4][1]=728,40,40);
					}
					else if((cormove[4][1]-clicky+e.getY())<0)
					{
						if((cormove[4][0]-clickx+e.getX())>=0 && (cormove[4][0]-clickx+e.getX()+40)<=1200)
						move[4].setBounds(cormove[4][0]=cormove[4][0]-clickx+e.getX(), cormove[4][1]=0, 40, 40);
					}
					else if((cormove[4][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[4][0]-clickx+e.getX())>=0 && (cormove[4][0]-clickx+e.getX()+40)<=1200)
						move[4].setBounds(cormove[4][0]=cormove[4][0]-clickx+e.getX(), cormove[4][1]=728, 40, 40);
					}
				}
			}
		});

		move[5].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[5],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[5])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[5][0]+20))*((15+45*i+20+fieldx)-(cormove[5][0]+20))+((10+20+fieldy)-(cormove[5][1]+20))*((10+20+fieldy)-(cormove[5][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[5][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[5][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[5][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[5][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[5]));
						    move[t].setIcon(new ImageIcon(numberimage[5]));
							set[t]=true;
						    move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[5]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[5]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[5];
						number[t]=number[5];

					}
					else if(t==-1)
					{
						skillimage[5].setIcon(null);
						move[5].setVisible(false);
						set[5]=false;
						number[5]=-1;
					}
					move[5].setBounds(15+45*5+fieldx, 10+fieldy, 40, 40);
					cormove[5][0]=15+45*5+fieldx;
					cormove[5][1]=10+fieldy;

				}
			}
		});
		
		move[5].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[5])
				{
					if((cormove[5][0]-clickx+e.getX())>=0 && (cormove[5][1]-clicky+e.getY())>=0 && (cormove[5][0]-clickx+e.getX()+40)<=1200 && (cormove[5][1]-clicky+e.getY()+40)<=768)
					move[5].setBounds(cormove[5][0]=cormove[5][0]-clickx+e.getX(), cormove[5][1]=cormove[5][1]-clicky+e.getY(), 40, 40);
					else if((cormove[5][0]-clickx+e.getX())<0)
					{
						if((cormove[5][1]-clicky+e.getY())>=0 && (cormove[5][1]-clicky+e.getY()+40)<=768)
						move[5].setBounds(cormove[5][0]=0,cormove[5][1]=cormove[5][1]-clicky+e.getY(),40,40);
						else if((cormove[5][1]-clicky+e.getY())<0)
						move[5].setBounds(cormove[5][0]=0,cormove[5][1]=0,40,40);
						else if((cormove[5][1]-clicky+e.getY()+40)>768)
						move[5].setBounds(cormove[5][0]=0,cormove[5][1]=728,40,40);
					}
					else if((cormove[5][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[5][1]-clicky+e.getY())>=0 && (cormove[5][1]-clicky+e.getY()+40)<=768)
						move[5].setBounds(cormove[5][0]=1160,cormove[5][1]=cormove[5][1]-clicky+e.getY(),40,40);
						else if((cormove[5][1]-clicky+e.getY())<0)
						move[5].setBounds(cormove[5][0]=1160,cormove[5][1]=0,40,40);
						else if((cormove[5][1]-clicky+e.getY()+40)>768)
						move[5].setBounds(cormove[5][0]=1160,cormove[5][1]=728,40,40);
					}
					else if((cormove[5][1]-clicky+e.getY())<0)
					{
						if((cormove[5][0]-clickx+e.getX())>=0 && (cormove[5][0]-clickx+e.getX()+40)<=1200)
						move[5].setBounds(cormove[5][0]=cormove[5][0]-clickx+e.getX(), cormove[5][1]=0, 40, 40);
					}
					else if((cormove[5][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[5][0]-clickx+e.getX())>=0 && (cormove[5][0]-clickx+e.getX()+40)<=1200)
						move[5].setBounds(cormove[5][0]=cormove[5][0]-clickx+e.getX(), cormove[5][1]=728, 40, 40);
					}
				}
			}
		});

		move[6].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[6],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[6])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[6][0]+20))*((15+45*i+20+fieldx)-(cormove[6][0]+20))+((10+20+fieldy)-(cormove[6][1]+20))*((10+20+fieldy)-(cormove[6][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[6][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[6][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[6][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[6][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[6]));
						    move[t].setIcon(new ImageIcon(numberimage[6]));
							set[t]=true;
						    move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[6]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[6]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[6];
						number[t]=number[6];

					}
					else if(t==-1)
					{
						skillimage[6].setIcon(null);
						move[6].setVisible(false);
						set[6]=false;
						number[6]=-1;
					}
					move[6].setBounds(15+45*6+fieldx, 10+fieldy, 40, 40);
					cormove[6][0]=15+45*6+fieldx;
					cormove[6][1]=10+fieldy;
				}
			}
		});
		
		move[6].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[6])
				{
					if((cormove[6][0]-clickx+e.getX())>=0 && (cormove[6][1]-clicky+e.getY())>=0 && (cormove[6][0]-clickx+e.getX()+40)<=1200 && (cormove[6][1]-clicky+e.getY()+40)<=768)
					move[6].setBounds(cormove[6][0]=cormove[6][0]-clickx+e.getX(), cormove[6][1]=cormove[6][1]-clicky+e.getY(), 40, 40);
					else if((cormove[6][0]-clickx+e.getX())<0)
					{
						if((cormove[6][1]-clicky+e.getY())>=0 && (cormove[6][1]-clicky+e.getY()+40)<=768)
						move[6].setBounds(cormove[6][0]=0,cormove[6][1]=cormove[6][1]-clicky+e.getY(),40,40);
						else if((cormove[6][1]-clicky+e.getY())<0)
						move[6].setBounds(cormove[6][0]=0,cormove[6][1]=0,40,40);
						else if((cormove[6][1]-clicky+e.getY()+40)>768)
						move[6].setBounds(cormove[6][0]=0,cormove[6][1]=728,40,40);
					}
					else if((cormove[6][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[6][1]-clicky+e.getY())>=0 && (cormove[6][1]-clicky+e.getY()+40)<=768)
						move[6].setBounds(cormove[6][0]=1160,cormove[6][1]=cormove[6][1]-clicky+e.getY(),40,40);
						else if((cormove[6][1]-clicky+e.getY())<0)
						move[6].setBounds(cormove[6][0]=1160,cormove[6][1]=0,40,40);
						else if((cormove[6][1]-clicky+e.getY()+40)>768)
						move[6].setBounds(cormove[6][0]=1160,cormove[6][1]=728,40,40);
					}
					else if((cormove[6][1]-clicky+e.getY())<0)
					{
						if((cormove[6][0]-clickx+e.getX())>=0 && (cormove[6][0]-clickx+e.getX()+40)<=1200)
						move[6].setBounds(cormove[6][0]=cormove[6][0]-clickx+e.getX(), cormove[6][1]=0, 40, 40);
					}
					else if((cormove[6][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[6][0]-clickx+e.getX())>=0 && (cormove[6][0]-clickx+e.getX()+40)<=1200)
						move[6].setBounds(cormove[6][0]=cormove[6][0]-clickx+e.getX(), cormove[6][1]=728, 40, 40);
					}
				}
			}
		});

		move[7].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[7],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[7])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[7][0]+20))*((15+45*i+20+fieldx)-(cormove[7][0]+20))+((10+20+fieldy)-(cormove[7][1]+20))*((10+20+fieldy)-(cormove[7][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[7][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[7][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[7][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[7][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[7]));
						    move[t].setIcon(new ImageIcon(numberimage[7]));
							set[t]=true;
						    move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[7]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[7]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[7];
						number[t]=number[7];

					}
					else if(t==-1)
					{
						skillimage[7].setIcon(null);
						move[7].setVisible(false);
						set[7]=false;
						number[7]=-1;
					}
					move[7].setBounds(15+45*7+fieldx, 10+fieldy, 40, 40);
					cormove[7][0]=15+45*7+fieldx;
					cormove[7][1]=10+fieldy;
				}
			}
		});
		
		move[7].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[7])
				{
					if((cormove[7][0]-clickx+e.getX())>=0 && (cormove[7][1]-clicky+e.getY())>=0 && (cormove[7][0]-clickx+e.getX()+40)<=1200 && (cormove[7][1]-clicky+e.getY()+40)<=768)
					move[7].setBounds(cormove[7][0]=cormove[7][0]-clickx+e.getX(), cormove[7][1]=cormove[7][1]-clicky+e.getY(), 40, 40);
					else if((cormove[7][0]-clickx+e.getX())<0)
					{
						if((cormove[7][1]-clicky+e.getY())>=0 && (cormove[7][1]-clicky+e.getY()+40)<=768)
						move[7].setBounds(cormove[7][0]=0,cormove[7][1]=cormove[7][1]-clicky+e.getY(),40,40);
						else if((cormove[7][1]-clicky+e.getY())<0)
						move[7].setBounds(cormove[7][0]=0,cormove[7][1]=0,40,40);
						else if((cormove[7][1]-clicky+e.getY()+40)>768)
						move[7].setBounds(cormove[7][0]=0,cormove[7][1]=728,40,40);
					}
					else if((cormove[7][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[7][1]-clicky+e.getY())>=0 && (cormove[7][1]-clicky+e.getY()+40)<=768)
						move[7].setBounds(cormove[7][0]=1160,cormove[7][1]=cormove[7][1]-clicky+e.getY(),40,40);
						else if((cormove[7][1]-clicky+e.getY())<0)
						move[7].setBounds(cormove[7][0]=1160,cormove[7][1]=0,40,40);
						else if((cormove[7][1]-clicky+e.getY()+40)>768)
						move[7].setBounds(cormove[7][0]=1160,cormove[7][1]=728,40,40);
					}
					else if((cormove[7][1]-clicky+e.getY())<0)
					{
						if((cormove[7][0]-clickx+e.getX())>=0 && (cormove[7][0]-clickx+e.getX()+40)<=1200)
						move[7].setBounds(cormove[7][0]=cormove[7][0]-clickx+e.getX(), cormove[7][1]=0, 40, 40);
					}
					else if((cormove[7][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[7][0]-clickx+e.getX())>=0 && (cormove[7][0]-clickx+e.getX()+40)<=1200)
						move[7].setBounds(cormove[7][0]=cormove[7][0]-clickx+e.getX(), cormove[7][1]=728, 40, 40);
					}
				}
			}
		});

		move[8].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[8],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[8])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[8][0]+20))*((15+45*i+20+fieldx)-(cormove[8][0]+20))+((10+20+fieldy)-(cormove[8][1]+20))*((10+20+fieldy)-(cormove[8][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[8][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[8][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[8][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[8][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[8]));
						    move[t].setIcon(new ImageIcon(numberimage[8]));
							set[t]=true;
						    move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[8]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[8]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[8];
						number[t]=number[8];
					}
					else if(t==-1)
					{
						skillimage[8].setIcon(null);
						move[8].setVisible(false);
						set[8]=false;
						number[8]=-1;
					}
					move[8].setBounds(15+45*8+fieldx, 10+fieldy, 40, 40);
					cormove[8][0]=15+45*8+fieldx;
					cormove[8][1]=10+fieldy;
				}
			}
		});
		
		move[8].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[8])
				{
					if((cormove[8][0]-clickx+e.getX())>=0 && (cormove[8][1]-clicky+e.getY())>=0 && (cormove[8][0]-clickx+e.getX()+40)<=1200 && (cormove[8][1]-clicky+e.getY()+40)<=768)
					move[8].setBounds(cormove[8][0]=cormove[8][0]-clickx+e.getX(), cormove[8][1]=cormove[8][1]-clicky+e.getY(), 40, 40);
					else if((cormove[8][0]-clickx+e.getX())<0)
					{
						if((cormove[8][1]-clicky+e.getY())>=0 && (cormove[8][1]-clicky+e.getY()+40)<=768)
						move[8].setBounds(cormove[8][0]=0,cormove[8][1]=cormove[8][1]-clicky+e.getY(),40,40);
						else if((cormove[8][1]-clicky+e.getY())<0)
						move[8].setBounds(cormove[8][0]=0,cormove[8][1]=0,40,40);
						else if((cormove[8][1]-clicky+e.getY()+40)>768)
						move[8].setBounds(cormove[8][0]=0,cormove[8][1]=728,40,40);
					}
					else if((cormove[8][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[8][1]-clicky+e.getY())>=0 && (cormove[8][1]-clicky+e.getY()+40)<=768)
						move[8].setBounds(cormove[8][0]=1160,cormove[8][1]=cormove[8][1]-clicky+e.getY(),40,40);
						else if((cormove[8][1]-clicky+e.getY())<0)
						move[8].setBounds(cormove[8][0]=1160,cormove[8][1]=0,40,40);
						else if((cormove[8][1]-clicky+e.getY()+40)>768)
						move[8].setBounds(cormove[8][0]=1160,cormove[8][1]=728,40,40);
					}
					else if((cormove[8][1]-clicky+e.getY())<0)
					{
						if((cormove[8][0]-clickx+e.getX())>=0 && (cormove[8][0]-clickx+e.getX()+40)<=1200)
						move[8].setBounds(cormove[8][0]=cormove[8][0]-clickx+e.getX(), cormove[8][1]=0, 40, 40);
					}
					else if((cormove[8][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[8][0]-clickx+e.getX())>=0 && (cormove[8][0]-clickx+e.getX()+40)<=1200)
						move[8].setBounds(cormove[8][0]=cormove[8][0]-clickx+e.getX(), cormove[8][1]=728, 40, 40);
					}
				}
			}
		});

		move[9].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[9],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[9])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[9][0]+20))*((15+45*i+20+fieldx)-(cormove[9][0]+20))+((10+20+fieldy)-(cormove[9][1]+20))*((10+20+fieldy)-(cormove[9][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[9][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[9][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[9][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[9][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[9]));
						    move[t].setIcon(new ImageIcon(numberimage[9]));
							set[t]=true;
						    move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[9]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[9]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[9];
						number[t]=number[9];
					}
					else if(t==-1)
					{
						skillimage[9].setIcon(null);
						move[9].setVisible(false);
						set[9]=false;
						number[9]=-1;
					}
					move[9].setBounds(15+45*9+fieldx, 10+fieldy, 40, 40);
					cormove[9][0]=15+45*9+fieldx;
					cormove[9][1]=10+fieldy;
				}
			}
		});
		
		move[9].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[9])
				{
					if((cormove[9][0]-clickx+e.getX())>=0 && (cormove[9][1]-clicky+e.getY())>=0 && (cormove[9][0]-clickx+e.getX()+40)<=1200 && (cormove[9][1]-clicky+e.getY()+40)<=768)
					move[9].setBounds(cormove[9][0]=cormove[9][0]-clickx+e.getX(), cormove[9][1]=cormove[9][1]-clicky+e.getY(), 40, 40);
					else if((cormove[9][0]-clickx+e.getX())<0)
					{
						if((cormove[9][1]-clicky+e.getY())>=0 && (cormove[9][1]-clicky+e.getY()+40)<=768)
						move[9].setBounds(cormove[9][0]=0,cormove[9][1]=cormove[9][1]-clicky+e.getY(),40,40);
						else if((cormove[9][1]-clicky+e.getY())<0)
						move[9].setBounds(cormove[9][0]=0,cormove[9][1]=0,40,40);
						else if((cormove[9][1]-clicky+e.getY()+40)>768)
						move[9].setBounds(cormove[9][0]=0,cormove[9][1]=728,40,40);
					}
					else if((cormove[9][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[9][1]-clicky+e.getY())>=0 && (cormove[9][1]-clicky+e.getY()+40)<=768)
						move[9].setBounds(cormove[9][0]=1160,cormove[9][1]=cormove[9][1]-clicky+e.getY(),40,40);
						else if((cormove[9][1]-clicky+e.getY())<0)
						move[9].setBounds(cormove[9][0]=1160,cormove[9][1]=0,40,40);
						else if((cormove[9][1]-clicky+e.getY()+40)>768)
						move[9].setBounds(cormove[9][0]=1160,cormove[9][1]=728,40,40);
					}
					else if((cormove[9][1]-clicky+e.getY())<0)
					{
						if((cormove[9][0]-clickx+e.getX())>=0 && (cormove[9][0]-clickx+e.getX()+40)<=1200)
						move[9].setBounds(cormove[9][0]=cormove[9][0]-clickx+e.getX(), cormove[9][1]=0, 40, 40);
					}
					else if((cormove[9][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[9][0]-clickx+e.getX())>=0 && (cormove[9][0]-clickx+e.getX()+40)<=1200)
						move[9].setBounds(cormove[9][0]=cormove[9][0]-clickx+e.getX(), cormove[9][1]=728, 40, 40);
					}
				}
			}
		});

		move[10].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[10],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[10])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[10][0]+20))*((15+45*i+20+fieldx)-(cormove[10][0]+20))+((10+20+fieldy)-(cormove[10][1]+20))*((10+20+fieldy)-(cormove[10][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[10][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[10][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[10][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[10][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[10]));
						    move[t].setIcon(new ImageIcon(numberimage[10]));
							set[t]=true;
						    move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[10]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[10]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[10];
						number[t]=number[10];


					}
					else if(t==-1)
					{
						skillimage[10].setIcon(null);
						move[10].setVisible(false);
						set[10]=false;
						number[10]=-1;
					}
					move[10].setBounds(15+45*10+fieldx, 10+fieldy, 40, 40);
					cormove[10][0]=15+45*10+fieldx;
					cormove[10][1]=10+fieldy;
				}
			}
		});
		
		move[10].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[10])
				{
					if((cormove[10][0]-clickx+e.getX())>=0 && (cormove[10][1]-clicky+e.getY())>=0 && (cormove[10][0]-clickx+e.getX()+40)<=1200 && (cormove[10][1]-clicky+e.getY()+40)<=768)
					move[10].setBounds(cormove[10][0]=cormove[10][0]-clickx+e.getX(), cormove[10][1]=cormove[10][1]-clicky+e.getY(), 40, 40);
					else if((cormove[10][0]-clickx+e.getX())<0)
					{
						if((cormove[10][1]-clicky+e.getY())>=0 && (cormove[10][1]-clicky+e.getY()+40)<=768)
						move[10].setBounds(cormove[10][0]=0,cormove[10][1]=cormove[10][1]-clicky+e.getY(),40,40);
						else if((cormove[10][1]-clicky+e.getY())<0)
						move[10].setBounds(cormove[10][0]=0,cormove[10][1]=0,40,40);
						else if((cormove[10][1]-clicky+e.getY()+40)>768)
						move[10].setBounds(cormove[10][0]=0,cormove[10][1]=728,40,40);
					}
					else if((cormove[10][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[10][1]-clicky+e.getY())>=0 && (cormove[10][1]-clicky+e.getY()+40)<=768)
						move[10].setBounds(cormove[10][0]=1160,cormove[10][1]=cormove[10][1]-clicky+e.getY(),40,40);
						else if((cormove[10][1]-clicky+e.getY())<0)
						move[10].setBounds(cormove[10][0]=1160,cormove[10][1]=0,40,40);
						else if((cormove[10][1]-clicky+e.getY()+40)>768)
						move[10].setBounds(cormove[10][0]=1160,cormove[10][1]=728,40,40);
					}
					else if((cormove[10][1]-clicky+e.getY())<0)
					{
						if((cormove[10][0]-clickx+e.getX())>=0 && (cormove[10][0]-clickx+e.getX()+40)<=1200)
						move[10].setBounds(cormove[10][0]=cormove[10][0]-clickx+e.getX(), cormove[10][1]=0, 40, 40);
					}
					else if((cormove[10][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[10][0]-clickx+e.getX())>=0 && (cormove[10][0]-clickx+e.getX()+40)<=1200)
						move[10].setBounds(cormove[10][0]=cormove[10][0]-clickx+e.getX(), cormove[10][1]=728, 40, 40);
					}
				}
			}
		});

		move[11].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[11],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[11])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+fieldx)-(cormove[11][0]+20))*((15+45*i+20+fieldx)-(cormove[11][0]+20))+((10+20+fieldy)-(cormove[11][1]+20))*((10+20+fieldy)-(cormove[11][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[11][0]+20))*((15+45*((i-12)%3)+20+skilldisplaysubfield.subfieldx)-(cormove[11][0]+20))+((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[11][1]+20))*((10+60*((i-12)/3)+20+skilldisplaysubfield.subfieldy)-(cormove[11][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skillimage[t].setIcon(new ImageIcon(numberimage[11]));
						    move[t].setIcon(new ImageIcon(numberimage[11]));
							set[t]=true;
						    move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skilldisplaysubfield.skillimage[t-12].setIcon(new ImageIcon(numberimage[11]));
							skilldisplaysubfield.move[t-12].setIcon(new ImageIcon(numberimage[11]));
							skilldisplaysubfield.set[t-12]=true;
							skilldisplaysubfield.move[t-12].setVisible(true);
						}
						numberimage[t]=numberimage[11];
						number[t]=number[11];
					}
					else if(t==-1)
					{
						skillimage[11].setIcon(null);
						move[11].setVisible(false);
						set[11]=false;
						number[11]=-1;
					}
					move[11].setBounds(15+45*11+fieldx, 10+fieldy, 40, 40);
					cormove[11][0]=15+45*11+fieldx;
					cormove[11][1]=10+fieldy;
				}
			}
		});
		
		move[11].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[11])
				{
					if((cormove[11][0]-clickx+e.getX())>=0 && (cormove[11][1]-clicky+e.getY())>=0 && (cormove[11][0]-clickx+e.getX()+40)<=1200 && (cormove[11][1]-clicky+e.getY()+40)<=768)
					move[11].setBounds(cormove[11][0]=cormove[11][0]-clickx+e.getX(), cormove[11][1]=cormove[11][1]-clicky+e.getY(), 40, 40);
					else if((cormove[11][0]-clickx+e.getX())<0)
					{
						if((cormove[11][1]-clicky+e.getY())>=0 && (cormove[11][1]-clicky+e.getY()+40)<=768)
						move[11].setBounds(cormove[11][0]=0,cormove[11][1]=cormove[11][1]-clicky+e.getY(),40,40);
						else if((cormove[11][1]-clicky+e.getY())<0)
						move[11].setBounds(cormove[11][0]=0,cormove[11][1]=0,40,40);
						else if((cormove[11][1]-clicky+e.getY()+40)>768)
						move[11].setBounds(cormove[11][0]=0,cormove[11][1]=728,40,40);
					}
					else if((cormove[11][0]-clickx+e.getX()+40)>1200)
					{
						if((cormove[11][1]-clicky+e.getY())>=0 && (cormove[11][1]-clicky+e.getY()+40)<=768)
						move[11].setBounds(cormove[11][0]=1160,cormove[11][1]=cormove[11][1]-clicky+e.getY(),40,40);
						else if((cormove[11][1]-clicky+e.getY())<0)
						move[11].setBounds(cormove[11][0]=1160,cormove[11][1]=0,40,40);
						else if((cormove[11][1]-clicky+e.getY()+40)>768)
						move[11].setBounds(cormove[11][0]=1160,cormove[11][1]=728,40,40);
					}
					else if((cormove[11][1]-clicky+e.getY())<0)
					{
						if((cormove[11][0]-clickx+e.getX())>=0 && (cormove[11][0]-clickx+e.getX()+40)<=1200)
						move[11].setBounds(cormove[11][0]=cormove[11][0]-clickx+e.getX(), cormove[11][1]=0, 40, 40);
					}
					else if((cormove[11][1]-clicky+e.getY()+40)>768)
					{
						if((cormove[11][0]-clickx+e.getX())>=0 && (cormove[11][0]-clickx+e.getX()+40)<=1200)
						move[11].setBounds(cormove[11][0]=cormove[11][0]-clickx+e.getX(), cormove[11][1]=728, 40, 40);
					}
				}
			}
		});

	}
	

	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.setFont(new Font("標楷體",0,15));
		g.setColor(new Color(255,255,255));
		g.drawString("1", 33, 63);
		g.drawString("2", 78, 63);
		g.drawString("3", 123, 63);
		g.drawString("4", 168, 63);
		g.drawString("5", 213, 63);
		g.drawString("6", 258, 63);
		g.drawString("7", 303, 63);
		g.drawString("8", 348, 63);
		g.drawString("9", 393, 63);
		g.drawString("0", 438, 63);
		g.drawString("-", 483, 63);
		g.drawString("=", 528, 63);
	}
	
}

class SkillDisplaySubField extends JPanel{
	static SkillDisplayField skilldisplayfield;
	static int subfieldx=585,subfieldy=623,clickx,clicky;
	static JLabel skillimage[] = new JLabel[6];
	static JLabel move[] = new JLabel[6];
	static boolean set[] = new boolean[6];

	SkillDisplaySubField(){
		super();
		this.setLayout(null);
		this.setOpaque(true);
		this.setBackground(new Color(100,100,100));
		int distance[] = new int[18]; 
		SkillDisplayField.skilldisplaysubfield=this;
		JLabel background = new JLabel();
		String s = "/Display/right.png";
		URL url = getClass().getResource(s);
		
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {

			e.printStackTrace();
		}

		for(int i=0;i<6;i++)
		{
			skillimage[i] = new JLabel();
			skillimage[i].setOpaque(true);
			skillimage[i].setBackground(new Color(240,240,240));
			skillimage[i].setBounds(15+45*(i%3), 10+60*(i/3), 40, 40);
			skillimage[i].setFocusable(false);
			set[i] = false;
			skilldisplayfield.cormove[i+12][0]=15+45*(i%3)+subfieldx;
			skilldisplayfield.cormove[i+12][1]=10+60*(i/3)+subfieldy;
			move[i] = new JLabel();
			move[i].setBounds(15+45*(i%3)+subfieldx, 10+60*(i/3)+subfieldy, 40, 40);
			move[i].setOpaque(true);
			move[i].setVisible(false);
			PanelListenner.w.add(move[i]);
			background.add(skillimage[i]);
		}
		
		background.setBounds(0, 0, 160, 130);
		this.add(background);
		
		move[0].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[0],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[0])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[12][0]+20))*((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[12][0]+20))+((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[12][1]+20))*((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[12][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[12][0]+20))*((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[12][0]+20))+((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[12][1]+20))*((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[12][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skilldisplayfield.skillimage[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[12]));
							skilldisplayfield.move[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[12]));
							skilldisplayfield.set[t]=true;
							skilldisplayfield.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skillimage[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[12]));
							move[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[12]));
							set[t-12]=true;
							move[t-12].setVisible(true);
						}
						SkillDisplayField.numberimage[t]=SkillDisplayField.numberimage[12];
						SkillDisplayField.number[t]=SkillDisplayField.number[12];

					}
					else if(t==-1)
					{
						skillimage[0].setIcon(null);
						move[0].setVisible(false);
						set[0]=false;
						SkillDisplayField.number[12]=-1;
					}
					move[0].setBounds(15+45*(0%3)+subfieldx, 10+60*(0/3)+subfieldy, 40, 40);
					skilldisplayfield.cormove[12][0]=15+45*(0%3)+subfieldx;
					skilldisplayfield.cormove[12][1]=10+60*(0/3)+subfieldy;
				}
			}
		});
		
		move[0].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[0])
				{
					if((skilldisplayfield.cormove[12][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[12][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[12][0]-clickx+e.getX()+40)<=1200 && (skilldisplayfield.cormove[12][1]-clicky+e.getY()+40)<=768)
					move[0].setBounds(skilldisplayfield.cormove[12][0]=skilldisplayfield.cormove[12][0]-clickx+e.getX(), skilldisplayfield.cormove[12][1]=skilldisplayfield.cormove[12][1]-clicky+e.getY(), 40, 40);
					else if((skilldisplayfield.cormove[12][0]-clickx+e.getX())<0)
					{
						if((skilldisplayfield.cormove[12][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[12][1]-clicky+e.getY()+40)<=768)
						move[0].setBounds(skilldisplayfield.cormove[12][0]=0,skilldisplayfield.cormove[12][1]=skilldisplayfield.cormove[12][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[12][1]-clicky+e.getY())<0)
						move[0].setBounds(skilldisplayfield.cormove[12][0]=0,skilldisplayfield.cormove[12][1]=0,40,40);
						else if((skilldisplayfield.cormove[12][1]-clicky+e.getY()+40)>768)
						move[0].setBounds(skilldisplayfield.cormove[12][0]=0,skilldisplayfield.cormove[12][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[12][0]-clickx+e.getX()+40)>1200)
					{
						if((skilldisplayfield.cormove[12][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[12][1]-clicky+e.getY()+40)<=768)
						move[0].setBounds(skilldisplayfield.cormove[12][0]=1160,skilldisplayfield.cormove[12][1]=skilldisplayfield.cormove[12][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[12][1]-clicky+e.getY())<0)
						move[0].setBounds(skilldisplayfield.cormove[12][0]=1160,skilldisplayfield.cormove[12][1]=0,40,40);
						else if((skilldisplayfield.cormove[12][1]-clicky+e.getY()+40)>768)
						move[0].setBounds(skilldisplayfield.cormove[12][0]=1160,skilldisplayfield.cormove[12][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[12][1]-clicky+e.getY())<0)
					{
						if((skilldisplayfield.cormove[12][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[12][0]-clickx+e.getX()+40)<=1200)
						move[0].setBounds(skilldisplayfield.cormove[12][0]=skilldisplayfield.cormove[12][0]-clickx+e.getX(), skilldisplayfield.cormove[12][1]=0, 40, 40);
					}
					else if((skilldisplayfield.cormove[12][1]-clicky+e.getY()+40)>768)
					{
						if((skilldisplayfield.cormove[12][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[12][0]-clickx+e.getX()+40)<=1200)
						move[0].setBounds(skilldisplayfield.cormove[12][0]=skilldisplayfield.cormove[12][0]-clickx+e.getX(), skilldisplayfield.cormove[12][1]=728, 40, 40);
					}
				}
			}
		});

		move[1].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[1],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[1])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[13][0]+20))*((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[13][0]+20))+((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[13][1]+20))*((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[13][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[13][0]+20))*((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[13][0]+20))+((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[13][1]+20))*((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[13][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skilldisplayfield.skillimage[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[13]));
							skilldisplayfield.move[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[13]));
							skilldisplayfield.set[t]=true;
							skilldisplayfield.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skillimage[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[13]));
							move[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[13]));
							set[t-12]=true;
							move[t-12].setVisible(true);
						}
						SkillDisplayField.numberimage[t]=SkillDisplayField.numberimage[13];
						SkillDisplayField.number[t]=SkillDisplayField.number[13];

					}
					else if(t==-1)
					{
						skillimage[1].setIcon(null);
						move[1].setVisible(false);
						set[1]=false;
						SkillDisplayField.number[13]=-1;
					}
					move[1].setBounds(15+45*(1%3)+subfieldx, 10+60*(1/3)+subfieldy, 40, 40);
					skilldisplayfield.cormove[13][0]=15+45*(1%3)+subfieldx;
					skilldisplayfield.cormove[13][1]=10+60*(1/3)+subfieldy;
				}
			}
		});
		
		move[1].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[1])
				{
					if((skilldisplayfield.cormove[13][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[13][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[13][0]-clickx+e.getX()+40)<=1200 && (skilldisplayfield.cormove[13][1]-clicky+e.getY()+40)<=768)
					move[1].setBounds(skilldisplayfield.cormove[13][0]=skilldisplayfield.cormove[13][0]-clickx+e.getX(), skilldisplayfield.cormove[13][1]=skilldisplayfield.cormove[13][1]-clicky+e.getY(), 40, 40);
					else if((skilldisplayfield.cormove[13][0]-clickx+e.getX())<0)
					{
						if((skilldisplayfield.cormove[13][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[13][1]-clicky+e.getY()+40)<=768)
						move[1].setBounds(skilldisplayfield.cormove[13][0]=0,skilldisplayfield.cormove[13][1]=skilldisplayfield.cormove[13][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[13][1]-clicky+e.getY())<0)
						move[1].setBounds(skilldisplayfield.cormove[13][0]=0,skilldisplayfield.cormove[13][1]=0,40,40);
						else if((skilldisplayfield.cormove[13][1]-clicky+e.getY()+40)>768)
						move[1].setBounds(skilldisplayfield.cormove[13][0]=0,skilldisplayfield.cormove[13][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[13][0]-clickx+e.getX()+40)>1200)
					{
						if((skilldisplayfield.cormove[13][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[13][1]-clicky+e.getY()+40)<=768)
						move[1].setBounds(skilldisplayfield.cormove[13][0]=1160,skilldisplayfield.cormove[13][1]=skilldisplayfield.cormove[13][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[13][1]-clicky+e.getY())<0)
						move[1].setBounds(skilldisplayfield.cormove[13][0]=1160,skilldisplayfield.cormove[13][1]=0,40,40);
						else if((skilldisplayfield.cormove[13][1]-clicky+e.getY()+40)>768)
						move[1].setBounds(skilldisplayfield.cormove[13][0]=1160,skilldisplayfield.cormove[13][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[13][1]-clicky+e.getY())<0)
					{
						if((skilldisplayfield.cormove[13][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[13][0]-clickx+e.getX()+40)<=1200)
						move[1].setBounds(skilldisplayfield.cormove[13][0]=skilldisplayfield.cormove[13][0]-clickx+e.getX(), skilldisplayfield.cormove[13][1]=0, 40, 40);
					}
					else if((skilldisplayfield.cormove[13][1]-clicky+e.getY()+40)>768)
					{
						if((skilldisplayfield.cormove[13][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[13][0]-clickx+e.getX()+40)<=1200)
						move[1].setBounds(skilldisplayfield.cormove[13][0]=skilldisplayfield.cormove[13][0]-clickx+e.getX(), skilldisplayfield.cormove[13][1]=728, 40, 40);
					}
				}
			}
		});

		move[2].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[2],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[2])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[14][0]+20))*((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[14][0]+20))+((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[14][1]+20))*((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[14][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[14][0]+20))*((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[14][0]+20))+((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[14][1]+20))*((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[14][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skilldisplayfield.skillimage[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[14]));
							skilldisplayfield.move[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[14]));
							skilldisplayfield.set[t]=true;
							skilldisplayfield.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skillimage[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[14]));
							move[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[14]));
							set[t-12]=true;
							move[t-12].setVisible(true);
						}
						SkillDisplayField.numberimage[t]=SkillDisplayField.numberimage[14];
						SkillDisplayField.number[t]=SkillDisplayField.number[14];

					}
					else if(t==-1)
					{
						skillimage[2].setIcon(null);
						move[2].setVisible(false);
						set[2]=false;
						SkillDisplayField.number[14]=-1;
					}
					move[2].setBounds(15+45*(2%3)+subfieldx, 10+60*(2/3)+subfieldy, 40, 40);
					skilldisplayfield.cormove[14][0]=15+45*(2%3)+subfieldx;
					skilldisplayfield.cormove[14][1]=10+60*(2/3)+subfieldy;
				}
			}
		});
		
		move[2].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[2])
				{
					if((skilldisplayfield.cormove[14][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[14][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[14][0]-clickx+e.getX()+40)<=1200 && (skilldisplayfield.cormove[14][1]-clicky+e.getY()+40)<=768)
					move[2].setBounds(skilldisplayfield.cormove[14][0]=skilldisplayfield.cormove[14][0]-clickx+e.getX(), skilldisplayfield.cormove[14][1]=skilldisplayfield.cormove[14][1]-clicky+e.getY(), 40, 40);
					else if((skilldisplayfield.cormove[14][0]-clickx+e.getX())<0)
					{
						if((skilldisplayfield.cormove[14][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[14][1]-clicky+e.getY()+40)<=768)
						move[2].setBounds(skilldisplayfield.cormove[14][0]=0,skilldisplayfield.cormove[14][1]=skilldisplayfield.cormove[14][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[14][1]-clicky+e.getY())<0)
						move[2].setBounds(skilldisplayfield.cormove[14][0]=0,skilldisplayfield.cormove[14][1]=0,40,40);
						else if((skilldisplayfield.cormove[14][1]-clicky+e.getY()+40)>768)
						move[2].setBounds(skilldisplayfield.cormove[14][0]=0,skilldisplayfield.cormove[14][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[14][0]-clickx+e.getX()+40)>1200)
					{
						if((skilldisplayfield.cormove[14][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[14][1]-clicky+e.getY()+40)<=768)
						move[2].setBounds(skilldisplayfield.cormove[14][0]=1160,skilldisplayfield.cormove[14][1]=skilldisplayfield.cormove[14][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[14][1]-clicky+e.getY())<0)
						move[2].setBounds(skilldisplayfield.cormove[14][0]=1160,skilldisplayfield.cormove[14][1]=0,40,40);
						else if((skilldisplayfield.cormove[14][1]-clicky+e.getY()+40)>768)
						move[2].setBounds(skilldisplayfield.cormove[14][0]=1160,skilldisplayfield.cormove[14][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[14][1]-clicky+e.getY())<0)
					{
						if((skilldisplayfield.cormove[14][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[14][0]-clickx+e.getX()+40)<=1200)
						move[2].setBounds(skilldisplayfield.cormove[14][0]=skilldisplayfield.cormove[14][0]-clickx+e.getX(), skilldisplayfield.cormove[14][1]=0, 40, 40);
					}
					else if((skilldisplayfield.cormove[14][1]-clicky+e.getY()+40)>768)
					{
						if((skilldisplayfield.cormove[14][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[14][0]-clickx+e.getX()+40)<=1200)
						move[2].setBounds(skilldisplayfield.cormove[14][0]=skilldisplayfield.cormove[14][0]-clickx+e.getX(), skilldisplayfield.cormove[14][1]=728, 40, 40);
					}
				}
			}
		});

		move[3].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[3],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[3])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[15][0]+20))*((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[15][0]+20))+((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[15][1]+20))*((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[15][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[15][0]+20))*((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[15][0]+20))+((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[15][1]+20))*((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[15][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skilldisplayfield.skillimage[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[15]));
							skilldisplayfield.move[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[15]));
							skilldisplayfield.set[t]=true;
							skilldisplayfield.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skillimage[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[15]));
							move[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[15]));
							set[t-12]=true;
							move[t-12].setVisible(true);
						}
						SkillDisplayField.numberimage[t]=SkillDisplayField.numberimage[15];
						SkillDisplayField.number[t]=SkillDisplayField.number[15];

					}
					else if(t==-1)
					{
						skillimage[3].setIcon(null);
						move[3].setVisible(false);
						set[3]=false;
						SkillDisplayField.number[15]=-1;
					}
					move[3].setBounds(15+45*(3%3)+subfieldx, 10+60*(3/3)+subfieldy, 40, 40);
					skilldisplayfield.cormove[15][0]=15+45*(3%3)+subfieldx;
					skilldisplayfield.cormove[15][1]=10+60*(3/3)+subfieldy;
				}
			}
		});
		
		move[3].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[3])
				{
					if((skilldisplayfield.cormove[15][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[15][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[15][0]-clickx+e.getX()+40)<=1200 && (skilldisplayfield.cormove[15][1]-clicky+e.getY()+40)<=768)
					move[3].setBounds(skilldisplayfield.cormove[15][0]=skilldisplayfield.cormove[15][0]-clickx+e.getX(), skilldisplayfield.cormove[15][1]=skilldisplayfield.cormove[15][1]-clicky+e.getY(), 40, 40);
					else if((skilldisplayfield.cormove[15][0]-clickx+e.getX())<0)
					{
						if((skilldisplayfield.cormove[15][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[15][1]-clicky+e.getY()+40)<=768)
						move[3].setBounds(skilldisplayfield.cormove[15][0]=0,skilldisplayfield.cormove[15][1]=skilldisplayfield.cormove[15][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[15][1]-clicky+e.getY())<0)
						move[3].setBounds(skilldisplayfield.cormove[15][0]=0,skilldisplayfield.cormove[15][1]=0,40,40);
						else if((skilldisplayfield.cormove[15][1]-clicky+e.getY()+40)>768)
						move[3].setBounds(skilldisplayfield.cormove[15][0]=0,skilldisplayfield.cormove[15][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[15][0]-clickx+e.getX()+40)>1200)
					{
						if((skilldisplayfield.cormove[15][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[15][1]-clicky+e.getY()+40)<=768)
						move[3].setBounds(skilldisplayfield.cormove[15][0]=1160,skilldisplayfield.cormove[15][1]=skilldisplayfield.cormove[15][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[15][1]-clicky+e.getY())<0)
						move[3].setBounds(skilldisplayfield.cormove[15][0]=1160,skilldisplayfield.cormove[15][1]=0,40,40);
						else if((skilldisplayfield.cormove[15][1]-clicky+e.getY()+40)>768)
						move[3].setBounds(skilldisplayfield.cormove[15][0]=1160,skilldisplayfield.cormove[15][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[15][1]-clicky+e.getY())<0)
					{
						if((skilldisplayfield.cormove[15][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[15][0]-clickx+e.getX()+40)<=1200)
						move[3].setBounds(skilldisplayfield.cormove[15][0]=skilldisplayfield.cormove[15][0]-clickx+e.getX(), skilldisplayfield.cormove[15][1]=0, 40, 40);
					}
					else if((skilldisplayfield.cormove[15][1]-clicky+e.getY()+40)>768)
					{
						if((skilldisplayfield.cormove[15][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[15][0]-clickx+e.getX()+40)<=1200)
						move[3].setBounds(skilldisplayfield.cormove[15][0]=skilldisplayfield.cormove[15][0]-clickx+e.getX(), skilldisplayfield.cormove[15][1]=728, 40, 40);
					}
				}
			}
		});

		move[4].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[4],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[4])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[16][0]+20))*((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[16][0]+20))+((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[16][1]+20))*((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[16][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[16][0]+20))*((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[16][0]+20))+((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[16][1]+20))*((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[16][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skilldisplayfield.skillimage[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[16]));
							skilldisplayfield.move[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[16]));
							skilldisplayfield.set[t]=true;
							skilldisplayfield.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skillimage[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[16]));
							move[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[16]));
							set[t-12]=true;
							move[t-12].setVisible(true);
						}
						SkillDisplayField.numberimage[t]=SkillDisplayField.numberimage[16];
						SkillDisplayField.number[t]=SkillDisplayField.number[16];

					}
					else if(t==-1)
					{
						skillimage[4].setIcon(null);
						move[4].setVisible(false);
						set[4]=false;
						SkillDisplayField.number[16]=-1;
					}
					move[4].setBounds(15+45*(4%3)+subfieldx, 10+60*(4/3)+subfieldy, 40, 40);
					skilldisplayfield.cormove[16][0]=15+45*(4%3)+subfieldx;
					skilldisplayfield.cormove[16][1]=10+60*(4/3)+subfieldy;
				}
			}
		});
		
		move[4].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[4])
				{
					if((skilldisplayfield.cormove[16][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[16][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[16][0]-clickx+e.getX()+40)<=1200 && (skilldisplayfield.cormove[16][1]-clicky+e.getY()+40)<=768)
					move[4].setBounds(skilldisplayfield.cormove[16][0]=skilldisplayfield.cormove[16][0]-clickx+e.getX(), skilldisplayfield.cormove[16][1]=skilldisplayfield.cormove[16][1]-clicky+e.getY(), 40, 40);
					else if((skilldisplayfield.cormove[16][0]-clickx+e.getX())<0)
					{
						if((skilldisplayfield.cormove[16][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[16][1]-clicky+e.getY()+40)<=768)
						move[4].setBounds(skilldisplayfield.cormove[16][0]=0,skilldisplayfield.cormove[16][1]=skilldisplayfield.cormove[16][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[16][1]-clicky+e.getY())<0)
						move[4].setBounds(skilldisplayfield.cormove[16][0]=0,skilldisplayfield.cormove[16][1]=0,40,40);
						else if((skilldisplayfield.cormove[16][1]-clicky+e.getY()+40)>768)
						move[4].setBounds(skilldisplayfield.cormove[16][0]=0,skilldisplayfield.cormove[16][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[16][0]-clickx+e.getX()+40)>1200)
					{
						if((skilldisplayfield.cormove[16][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[16][1]-clicky+e.getY()+40)<=768)
						move[4].setBounds(skilldisplayfield.cormove[16][0]=1160,skilldisplayfield.cormove[16][1]=skilldisplayfield.cormove[16][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[16][1]-clicky+e.getY())<0)
						move[4].setBounds(skilldisplayfield.cormove[16][0]=1160,skilldisplayfield.cormove[16][1]=0,40,40);
						else if((skilldisplayfield.cormove[16][1]-clicky+e.getY()+40)>768)
						move[4].setBounds(skilldisplayfield.cormove[16][0]=1160,skilldisplayfield.cormove[16][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[16][1]-clicky+e.getY())<0)
					{
						if((skilldisplayfield.cormove[16][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[16][0]-clickx+e.getX()+40)<=1200)
						move[4].setBounds(skilldisplayfield.cormove[16][0]=skilldisplayfield.cormove[16][0]-clickx+e.getX(), skilldisplayfield.cormove[16][1]=0, 40, 40);
					}
					else if((skilldisplayfield.cormove[16][1]-clicky+e.getY()+40)>768)
					{
						if((skilldisplayfield.cormove[16][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[16][0]-clickx+e.getX()+40)<=1200)
						move[4].setBounds(skilldisplayfield.cormove[16][0]=skilldisplayfield.cormove[16][0]-clickx+e.getX(), skilldisplayfield.cormove[16][1]=728, 40, 40);
					}
				}
			}
		});

		move[5].addMouseListener(new MouseAdapter() { 
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(move[5],0);
			}
			public void mouseReleased(MouseEvent e)
			{
				if(set[5])
				{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						if(i>=0 && i<=11)
						distance[i]=((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[17][0]+20))*((15+45*i+20+skilldisplayfield.fieldx)-(skilldisplayfield.cormove[17][0]+20))+((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[17][1]+20))*((10+20+skilldisplayfield.fieldy)-(skilldisplayfield.cormove[17][1]+20));
						else if(i>=12 && i<=17)
						distance[i]=((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[17][0]+20))*((15+45*((i-12)%3)+20+subfieldx)-(skilldisplayfield.cormove[17][0]+20))+((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[17][1]+20))*((10+60*((i-12)/3)+20+subfieldy)-(skilldisplayfield.cormove[17][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							skilldisplayfield.skillimage[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[17]));
							skilldisplayfield.move[t].setIcon(new ImageIcon(SkillDisplayField.numberimage[17]));
							skilldisplayfield.set[t]=true;
							skilldisplayfield.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							skillimage[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[17]));
							move[t-12].setIcon(new ImageIcon(SkillDisplayField.numberimage[17]));
							set[t-12]=true;
							move[t-12].setVisible(true);
						}
						SkillDisplayField.numberimage[t]=SkillDisplayField.numberimage[17];
						SkillDisplayField.number[t]=SkillDisplayField.number[17];

					}
					else if(t==-1)
					{
						skillimage[5].setIcon(null);
						move[5].setVisible(false);
						set[5]=false;
						SkillDisplayField.number[17]=-1;
					}
					move[5].setBounds(15+45*(5%3)+subfieldx, 10+60*(5/3)+subfieldy, 40, 40);
					skilldisplayfield.cormove[17][0]=15+45*(5%3)+subfieldx;
					skilldisplayfield.cormove[17][1]=10+60*(5/3)+subfieldy;
				}
			}
		});
		
		move[5].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				if(set[5])
				{
					if((skilldisplayfield.cormove[17][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[17][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[17][0]-clickx+e.getX()+40)<=1200 && (skilldisplayfield.cormove[17][1]-clicky+e.getY()+40)<=768)
					move[5].setBounds(skilldisplayfield.cormove[17][0]=skilldisplayfield.cormove[17][0]-clickx+e.getX(), skilldisplayfield.cormove[17][1]=skilldisplayfield.cormove[17][1]-clicky+e.getY(), 40, 40);
					else if((skilldisplayfield.cormove[17][0]-clickx+e.getX())<0)
					{
						if((skilldisplayfield.cormove[17][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[17][1]-clicky+e.getY()+40)<=768)
						move[5].setBounds(skilldisplayfield.cormove[17][0]=0,skilldisplayfield.cormove[17][1]=skilldisplayfield.cormove[17][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[17][1]-clicky+e.getY())<0)
						move[5].setBounds(skilldisplayfield.cormove[17][0]=0,skilldisplayfield.cormove[17][1]=0,40,40);
						else if((skilldisplayfield.cormove[17][1]-clicky+e.getY()+40)>768)
						move[5].setBounds(skilldisplayfield.cormove[17][0]=0,skilldisplayfield.cormove[17][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[17][0]-clickx+e.getX()+40)>1200)
					{
						if((skilldisplayfield.cormove[17][1]-clicky+e.getY())>=0 && (skilldisplayfield.cormove[17][1]-clicky+e.getY()+40)<=768)
						move[5].setBounds(skilldisplayfield.cormove[17][0]=1160,skilldisplayfield.cormove[17][1]=skilldisplayfield.cormove[17][1]-clicky+e.getY(),40,40);
						else if((skilldisplayfield.cormove[17][1]-clicky+e.getY())<0)
						move[5].setBounds(skilldisplayfield.cormove[17][0]=1160,skilldisplayfield.cormove[17][1]=0,40,40);
						else if((skilldisplayfield.cormove[17][1]-clicky+e.getY()+40)>768)
						move[5].setBounds(skilldisplayfield.cormove[17][0]=1160,skilldisplayfield.cormove[17][1]=728,40,40);
					}
					else if((skilldisplayfield.cormove[17][1]-clicky+e.getY())<0)
					{
						if((skilldisplayfield.cormove[17][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[17][0]-clickx+e.getX()+40)<=1200)
						move[5].setBounds(skilldisplayfield.cormove[17][0]=skilldisplayfield.cormove[17][0]-clickx+e.getX(), skilldisplayfield.cormove[17][1]=0, 40, 40);
					}
					else if((skilldisplayfield.cormove[17][1]-clicky+e.getY()+40)>768)
					{
						if((skilldisplayfield.cormove[17][0]-clickx+e.getX())>=0 && (skilldisplayfield.cormove[17][0]-clickx+e.getX()+40)<=1200)
						move[5].setBounds(skilldisplayfield.cormove[17][0]=skilldisplayfield.cormove[17][0]-clickx+e.getX(), skilldisplayfield.cormove[17][1]=728, 40, 40);
					}
				}
			}
		});
	
	}
}

class FunctionList extends JPanel{
	static int listx=745,listy=688;
	FunctionList(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JLabel baselist = new JLabel();
		PlayerInfoBtn playerinfobtn = new PlayerInfoBtn();
		InventoryBtn inventorybtn = new InventoryBtn();
		SkillBtn skillbtn = new SkillBtn();
		PlayerAbilityBtn playerabilitybtn = new PlayerAbilityBtn();
		TaskBtn taskbtn = new TaskBtn();
		SettingBtn settingbtn = new SettingBtn();
		CreatorBtn creatorbtn = new CreatorBtn();
		String s[] = new String[7];
		Image img[] = new Image[7];
		for(int i = 0;i<7;i++)
		{
			s[i] = "/ListIcon/a" + (i+1) + ".png";
			URL url = getClass().getResource(s[i]);
			try {
				img[i]=ImageIO.read(url);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		baselist.setOpaque(true);
		baselist.setBackground(new Color(230,230,230));
		baselist.setBounds(0, 30, 455, 50);
		playerinfobtn.setBounds(5+63*0, 0, 60, 60);
		inventorybtn.setBounds(5+63*1, 0, 60, 60);
		skillbtn.setBounds(5+63*2, 0, 60, 60);
		playerabilitybtn.setBounds(5+63*3, 0, 60, 60);
		taskbtn.setBounds(5+63*4, 0, 60, 60);
		settingbtn.setBounds(5+63*5, 0, 60, 60);
		creatorbtn.setBounds(5+63*6, 0, 60, 60);
		
		playerinfobtn.setIcon(new ImageIcon(img[0]));
		inventorybtn.setIcon(new ImageIcon(img[1]));
		skillbtn.setIcon(new ImageIcon(img[2]));
		playerabilitybtn.setIcon(new ImageIcon(img[3]));
		taskbtn.setIcon(new ImageIcon(img[4]));
		settingbtn.setIcon(new ImageIcon(img[5]));
		creatorbtn.setIcon(new ImageIcon(img[6]));
		
		/*
		PlayerInfoBtn.setContentAreaFilled(false);
		PlayerInfoBtn.setBorderPainted(false);
		
		InventoryBtn.setContentAreaFilled(false);
		InventoryBtn.setBorderPainted(false);
		SkillBtn.setContentAreaFilled(false);
		SkillBtn.setBorderPainted(false);
		PlayerAbilityBtn.setContentAreaFilled(false);
		PlayerAbilityBtn.setBorderPainted(false);
		TaskBtn.setContentAreaFilled(false);
		TaskBtn.setBorderPainted(false);
		SettingBtn.setContentAreaFilled(false);
		SettingBtn.setBorderPainted(false);
		CreatorBtn.setContentAreaFilled(false);
		CreatorBtn.setBorderPainted(false);
		
		PlayerInfoBtn.setFocusable(false);
		InventoryBtn.setFocusable(false);
		SkillBtn.setFocusable(false);
		PlayerAbilityBtn.setFocusable(false);
		TaskBtn.setFocusable(false);
		SettingBtn.setFocusable(false);
		CreatorBtn.setFocusable(false);
		*/
		
		this.add(playerinfobtn);
		this.add(inventorybtn);
		this.add(skillbtn);
		this.add(playerabilitybtn);
		this.add(taskbtn);
		this.add(settingbtn);
		this.add(creatorbtn);
		this.add(baselist);
		
		playerinfobtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{

				if(PanelListenner.playerinfo==false)
				{
					PanelListenner.w.add(PanelListenner.playerequipmentinfo,0);
					if(TaskRightInformationArea.mainset[2]==true)
					{
						TaskRightInformationArea.mainfin[2]=true;
					}

					PanelListenner.playerequipmentinfo.updateUI();
					PanelListenner.playerinfo=true;
				}
				else
				{
					PanelListenner.w.remove(PanelListenner.playerequipmentinfo);
					PanelListenner.playerinfo=false;
				}

			}
		});
		
		inventorybtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{
				if(PanelListenner.itemshow==false)
				{
					if(TaskRightInformationArea.mainset[3]==true)
					{
						TaskRightInformationArea.mainfin[3]=true;
					}

					PanelListenner.inventory.setBounds(Inventory.itemx,Inventory.itemy,240,330);
					PanelListenner.w.add(PanelListenner.inventory,0);
					PanelListenner.inventory.updateUI();
					PanelListenner.itemshow=true;
				}
				else
				{
					PanelListenner.w.remove(PanelListenner.inventory);
					PanelListenner.itemshow=false;
				}

			}
		});
		
		skillbtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{

				if(PanelListenner.skillpageshow==false)
				{
					if(SkillPageTopArea.state==0)
					{
						
					}
					else if(SkillPageTopArea.state==1)
					{
						/*
						SkillPageLeftArea.activemove[0].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.activemove[1].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.activemove[2].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.activemove[3].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.activemove[4].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.activemove[5].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.activemove[6].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.activemove[7].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+295, 40, 40);
						SkillPageLeftArea.activemove[8].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+365, 40, 40);
						
						SkillPageLeftArea.inactivemove[0].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.inactivemove[1].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+155, 40, 40);
						SkillPageLeftArea.inactivemove[2].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.inactivemove[3].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+295, 40, 40);
						SkillPageLeftArea.inactivemove[4].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.inactivemove[5].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.inactivemove[6].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.inactivemove[7].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+365, 40, 40);
						*/
						for(int i = 0;i<9;i++)
						{
							PanelListenner.w.add(SkillPageLeftArea.activemove[i]);
						}
						for(int i = 0;i<8;i++)
						{
							PanelListenner.w.add(SkillPageLeftArea.inactivemove[i]);
						}
	
					}
					else if(SkillPageTopArea.state==2)
					{
						
					}
					else if(SkillPageTopArea.state==3)
					{
						for(int i = 0;i<9;i++)
						{
							PanelListenner.w.add(SkillPageLeftArea.activemove[i]);
						}
						for(int i = 0;i<8;i++)
						{
							PanelListenner.w.add(SkillPageLeftArea.inactivemove[i]);
						}
						
					}
					if(TaskRightInformationArea.mainset[4]==true)
					{
						TaskRightInformationArea.mainfin[4]=true;
					}
					PanelListenner.w.add(PanelListenner.skillpage,0);
					PanelListenner.skillpage.updateUI();
					PanelListenner.skillpageshow=true;
			}
			else
			{
				if(SkillPageTopArea.state==0)
				{
					
				}
				else if(SkillPageTopArea.state==1)
				{
					for(int i = 0;i<9;i++)
					{
						PanelListenner.w.remove(SkillPageLeftArea.activemove[i]);
					}
					for(int i = 0;i<8;i++)
					{
						PanelListenner.w.remove(SkillPageLeftArea.inactivemove[i]);
					}
					
				}
				else if(SkillPageTopArea.state==2)
				{
					
				}
				else if(SkillPageTopArea.state==3)
				{
					for(int i = 0;i<9;i++)
					{
						PanelListenner.w.remove(SkillPageLeftArea.activemove[i]);
					}
					for(int i = 0;i<8;i++)
					{
						PanelListenner.w.remove(SkillPageLeftArea.inactivemove[i]);
					}					
				}

				PanelListenner.w.remove(PanelListenner.skillpage);
				PanelListenner.skillpageshow=false;
			}


			}
		});

		playerabilitybtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{
				if(PanelListenner.abilityshow==false)
				{
					if(TaskRightInformationArea.mainset[5]==true)
					{
						TaskRightInformationArea.mainfin[5]=true;
					}

					PanelListenner.w.add(PanelListenner.playerabilitysystem,0);
					PanelListenner.playerabilitysystem.updateUI();
					PanelListenner.abilityshow=true;
				}
				else
				{
					PanelListenner.w.remove(PanelListenner.playerabilitysystem);
					PanelListenner.abilityshow=false;
				}

			}
		});

		taskbtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{

				if(PanelListenner.taskshow==false)
				{
					if(TaskRightInformationArea.mainset[6]==true)
					{
						TaskRightInformationArea.mainfin[6]=true;
					}

					PanelListenner.w.add(PanelListenner.tasksystem,0);
					PanelListenner.tasksystem.updateUI();
					PanelListenner.taskshow=true;
				}
				else
				{
					PanelListenner.w.remove(PanelListenner.tasksystem);
					PanelListenner.taskshow=false;
				}

			}
		});

		settingbtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{
				if(PanelListenner.settingshow==false)
				{
					if(TaskRightInformationArea.mainset[7]==true)
					{
						TaskRightInformationArea.mainfin[7]=true;
					}

					PanelListenner.w.add(PanelListenner.settinginfo,0);
					PanelListenner.settingshow=true;
				}
				else
				{
					PanelListenner.w.remove(PanelListenner.settinginfo);
					PanelListenner.settingshow=false;
				}

			}
		});

		creatorbtn.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e)
			{
				if(PanelListenner.creatorshow==false)
				{
					if(TaskRightInformationArea.mainset[8]==true)
					{
						TaskRightInformationArea.mainfin[8]=true;
					}

					PanelListenner.w.add(PanelListenner.creatorlist,0);
					PanelListenner.creatorshow=true;
				}
				else
				{
					PanelListenner.w.remove(PanelListenner.creatorlist);
					PanelListenner.creatorshow=false;
				}

			}
		});

	}
}

class SettingInfo extends JPanel{
	static int settingx=330,settingy=220,clickx,clicky;
	static boolean banmusic = false;
	static boolean banborder = false;
	static JSlider bgmS = new JSlider(0,100,50);
	static JSlider bgsS = new JSlider(0,100,50);
	static JSlider seS = new JSlider(0,100,50);
	static JSlider meS = new JSlider(0,100,50);
	Image stimage[] = new Image[2];
	Image eximage[] = new Image[2];
	SettingInfo(){
		super();
		this.setLayout(null);
		JLabel background = new JLabel();
		String s;
		URL url;
		MovableAreaAndClose movableareaandclose = new MovableAreaAndClose();
		JLabel showtext[] = new JLabel[12];
		JLabel keytext[] = new JLabel[12];
		JLabel musictext[] = new JLabel[4];
		JLabel modeltext[] = new JLabel[2];
		JButton borybtn = new JButton(); 
		JButton bornbtn = new JButton(); 
		JButton musybtn = new JButton(); 
		JButton musnbtn = new JButton(); 
		s = "/Setting/bk.png";
		url = getClass().getResource(s);
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		for(int i=0;i<12;i++)
		{
			showtext[i] = new JLabel();
			keytext[i] = new JLabel();
			showtext[i].setFont(new Font("標楷體",0,20));
			showtext[i].setBounds(5+140*(i%4), 30+35*(i/4), 80, 30);
			//showtext[i].setBackground(new Color(0,255,255));
			//showtext[i].setOpaque(true);
			s = "/Setting/1-" + (i+1) + ".png";
			url = getClass().getResource(s);
			try {
				showtext[i].setIcon(new ImageIcon(ImageIO.read(url)));
			} catch (IOException e1) {
				e1.printStackTrace();
			}

			
			keytext[i].setFont(new Font("標楷體",0,20));
			keytext[i].setBounds(85+140*(i%4), 30+35*(i/4), 60, 30);
			keytext[i].setBackground(new Color(255,255,255));
			keytext[i].setOpaque(true);
			background.add(showtext[i]);
			background.add(keytext[i]);
		}
		
		for(int i=0;i<4;i++)
		{
			musictext[i] = new JLabel();
			musictext[i].setFont(new Font("標楷體",0,20));
			musictext[i].setBounds(5, 145+35*i, 80, 30);
			//musictext[i].setBackground(new Color(0,255,255));
			//musictext[i].setOpaque(true);
			s = "/Setting/4-" + (i+1) + ".png";
			url = getClass().getResource(s);
			try {
				musictext[i].setIcon(new ImageIcon(ImageIO.read(url)));
			} catch (IOException e1) {
				e1.printStackTrace();
			}

			background.add(musictext[i]);
		}
		
		for(int i=0;i<2;i++)
		{
			modeltext[i] = new JLabel();
			modeltext[i].setFont(new Font("標楷體",0,20));
			modeltext[i].setBounds(5+280*i, 290, 100, 30);
			s = "/Setting/0-" + (i+1) + ".png";
			url = getClass().getResource(s);
			try {
				modeltext[i].setIcon(new ImageIcon(ImageIO.read(url)));
			} catch (IOException e1) {
				e1.printStackTrace();
			}

			//modeltext[i].setBackground(new Color(0,255,255));
			//modeltext[i].setOpaque(true);
			background.add(modeltext[i]);
		}
		s = "/Setting/2-1.png";
		url = getClass().getResource(s);
		try {
			stimage[0]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/Setting/3-1.png";
		url = getClass().getResource(s);
		try {
			stimage[1]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		s = "/Setting/2-2.png";
		url = getClass().getResource(s);
		try {
			eximage[0]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/Setting/3-2.png";
		url = getClass().getResource(s);
		try {
			eximage[1]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		/*
		showtext[0].setText("關閉遊戲");
		showtext[1].setText("普通攻擊");
		showtext[2].setText("人物資訊");
		showtext[3].setText("人物素質");
		showtext[4].setText("道具欄");
		showtext[5].setText("小地圖");
		showtext[6].setText("訊息框");
		showtext[7].setText("技能頁");
		showtext[8].setText("任務");
		showtext[9].setText("設定");
		showtext[10].setText("對話");
		showtext[11].setText("開發人員");
		*/
		keytext[0].setText("ESC");
		keytext[1].setText("SPACE");
		keytext[2].setText("P");
		keytext[3].setText("A");
		keytext[4].setText("X");
		keytext[5].setText("N");
		keytext[6].setText("T");
		keytext[7].setText("H");
		keytext[8].setText("R");
		keytext[9].setText("S");
		keytext[10].setText("Z");
		keytext[11].setText("C");
	
		musictext[0].setText("BGM");
		musictext[1].setText("BGS");
		musictext[2].setText("SE");
		musictext[3].setText("ME");
		
		modeltext[0].setText("靜音模式");
		modeltext[1].setText("無邊框模式");
		
		bgmS.setBounds(90, 145, 375, 30);
		bgmS.setOpaque(false);
		bgmS.setFocusable(false);
		bgsS.setBounds(90, 180, 375, 30);
		bgsS.setOpaque(false);
		bgsS.setFocusable(false);
		seS.setBounds(90, 215, 375, 30);
		seS.setOpaque(false);
		seS.setFocusable(false);
		meS.setBounds(90, 250, 375, 30);
		meS.setOpaque(false);
		meS.setFocusable(false);
		movableareaandclose.setBounds(0, 0, 570, 25);
		movableareaandclose.closebtn.setBounds(530, 0, 40, 25);

		musybtn.setFocusable(false);
		musybtn.setBounds(105, 290, 90, 30);
		musybtn.setIcon(new ImageIcon(stimage[0]));
		musybtn.setBorderPainted(false);
		musybtn.setFocusPainted(false);
		musybtn.setContentAreaFilled(false);
		
		musnbtn.setFocusable(false);
		musnbtn.setBounds(195, 290, 90, 30);
		musnbtn.setIcon(new ImageIcon(eximage[1]));
		musnbtn.setBorderPainted(false);
		musnbtn.setFocusPainted(false);
		musnbtn.setContentAreaFilled(false);

		
		borybtn.setFocusable(false);
		borybtn.setBounds(385, 290, 90, 30);
		borybtn.setIcon(new ImageIcon(stimage[0]));
		borybtn.setBorderPainted(false);
		borybtn.setFocusPainted(false);
		borybtn.setContentAreaFilled(false);

		
		bornbtn.setFocusable(false);
		bornbtn.setBounds(475, 290, 90, 30);
		bornbtn.setIcon(new ImageIcon(eximage[1]));
		bornbtn.setBorderPainted(false);
		bornbtn.setFocusPainted(false);
		bornbtn.setContentAreaFilled(false);

		
		
		background.add(movableareaandclose);
		background.add(bgmS);
		background.add(bgsS);
		background.add(seS);
		background.add(meS);
		background.add(borybtn);
		background.add(bornbtn);
		background.add(musybtn);
		background.add(musnbtn);
		background.setBounds(0, 0, 570, 325);
		this.add(background);
		
		movableareaandclose.closebtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PanelListenner.settingshow=false;
				PanelListenner.w.remove(SettingInfo.this);
			}
		});
		

		movableareaandclose.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				clickx=e.getX();
				clicky=e.getY();
			}
		});
		
		
		movableareaandclose.addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				int x=e.getX();
				int y=e.getY();
				if((settingx+x-clickx)>=0 && (settingx+x-clickx)+570<=1200 && (settingy+y-clicky)>=0 && (settingy+y-clicky)+325<=768)
				{
					SettingInfo.this.setBounds(settingx=settingx+x-clickx, settingy=settingy+y-clicky, 570, 325);
				}
				else if((settingx+x-clickx)<0)
				{
					if((settingy+y-clicky)>=0 && (settingy+y-clicky)+325<=768)
					SettingInfo.this.setBounds(settingx=0, settingy=settingy+y-clicky, 570, 325);
					else if((settingy+y-clicky)+325>768)
					SettingInfo.this.setBounds(settingx=0, settingy=443, 570, 325);
					else if((settingy+y-clicky)<0)
					SettingInfo.this.setBounds(settingx=0, settingy=0, 570, 325);
				}
				else if((settingx+x-clickx)+570>1200)
				{
					if((settingy+y-clicky)>=0 && (settingy+y-clicky)+325<=768)
					SettingInfo.this.setBounds(settingx=630, settingy=settingy+y-clicky, 570, 325);
					else if((settingy+y-clicky)+325>768)
					SettingInfo.this.setBounds(settingx=630, settingy=443, 570, 325);
					else if((settingy+y-clicky)<0)
					SettingInfo.this.setBounds(settingx=630, settingy=0, 570, 325);				
				}
				else if((settingy+y-clicky)<0)
				{
					if((settingx+x-clickx)+570<=1200)
					SettingInfo.this.setBounds(settingx=settingx+x-clickx, settingy=0, 570, 325);
				}
				else if((settingy+y-clicky)+325>768)
				{
					if((settingx+x-clickx)>=0)
					SettingInfo.this.setBounds(settingx=settingx+x-clickx, settingy=443, 570, 325);
				}
				
			}
		});

		musybtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {			
				if(banmusic==false)
				{
					banmusic=true;
					musybtn.setIcon(new ImageIcon(stimage[1]));
					musnbtn.setIcon(new ImageIcon(eximage[0]));

					VoiceSetPanel.volumecontrol.setValue(VoiceSetPanel.volumecontrol.getMinimum());
				}
			}
		});

		musnbtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {			
				if(banmusic==true)
				{
					musybtn.setIcon(new ImageIcon(stimage[0]));
					musnbtn.setIcon(new ImageIcon(eximage[1]));

					banmusic=false;
					VoiceSetPanel.volumecontrol.setValue(SEmusicbox.sevalue);
				}
			}
		});

		
		borybtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {			
				if(banborder==false)
				{

					borybtn.setIcon(new ImageIcon(stimage[1]));
					bornbtn.setIcon(new ImageIcon(eximage[0]));
					PanelListenner.t.dispose();
					PanelListenner.t.setUndecorated(true);
					PanelListenner.t.pack();
					PanelListenner.t.setVisible(true);
					banborder=true;
				}
			}
		});

		bornbtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {			
				if(banborder==true)
				{

					borybtn.setIcon(new ImageIcon(stimage[0]));
					bornbtn.setIcon(new ImageIcon(eximage[1]));
					PanelListenner.t.dispose();
					PanelListenner.t.setUndecorated(false);
					PanelListenner.t.pack();
					PanelListenner.t.setVisible(true);
					banborder=false;
				}
			}
		});

		
		
		
        bgmS.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent ce) {
            	float volume = bgmS.getValue();
            	//System.out.println(volume);
            	SettingInfo.bgmS.setValue(bgmS.getValue());
            	if(volume >= 50)
            	{
            		volume = (float)((volume - 50)*16/50.0) - 10;
            	}
            	else
            	{
            		volume = (float)(volume*20/50.0) - 30;
            		if(volume == -30)
            		volume = -80;
            	}
            	//System.out.println(volume);
            	BGMmusicbox.bgmvalue=volume;
            	if(banmusic==true)
				VoiceSetPanel.volumecontrol.setValue(VoiceSetPanel.volumecontrol.getMinimum());
            	else
            	VoiceSetPanel.volumecontrol.setValue(BGMmusicbox.bgmvalue);
               
            }
        });
	
        bgsS.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent ce) {
            	float volume = bgsS.getValue();
            	SettingInfo.bgsS.setValue(bgsS.getValue());
            	if(volume >= 50)
            	{
            		volume = (float)((volume - 50)*16/50.0) - 10;
            	}
            	else
            	{
            		volume = (float)(volume*20/50.0) - 30;
            		if(volume == -30)
            		volume = -80;
            	}
            	BGSmusicbox.bgsvalue=volume;
            }
        });

        seS.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent ce) {
            	float volume = seS.getValue();
            	SettingInfo.seS.setValue(seS.getValue());
            	if(volume >= 50)
            	{
            		volume = (float)((volume - 50)*16/50.0) - 10;
            	}
            	else
            	{
            		volume = (float)(volume*20/50.0) - 30;
            		if(volume == -30)
            		volume = -80;
            	}
            	SEmusicbox.sevalue=volume;
            }
        });

        meS.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent ce) {
            	float volume = meS.getValue();
            	SettingInfo.meS.setValue(meS.getValue());
            	if(volume >= 50)
            	{
            		volume = (float)((volume - 50)*16/50.0) - 10;
            	}
            	else
            	{
            		volume = (float)(volume*20/50.0) - 30;
            		if(volume == -30)
            		volume = -80;
            	}
            	MEmusicbox.mevalue=volume;
            }
        });

	}
}

class CreatorList extends JPanel{
	CreatorList(){
		super();
		this.setLayout(null);
		JLabel CreatorIcon = new JLabel();
		String s = "/ListIcon/List.png";
		URL url = getClass().getResource(s);
		
		try {
			CreatorIcon.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}
		CreatorIcon.setBounds(0, 0, 900, 700);
		
		this.add(CreatorIcon);
	}
}

class PlayerInfoBtn extends JButton{
	Image img[] = new Image[7];
	PlayerInfoBtn(){
		super();
		this.setContentAreaFilled(false);
		this.setBorderPainted(false);
		this.setFocusable(false);


	}
	
}

class InventoryBtn extends JButton{
	InventoryBtn(){
		super();
		this.setContentAreaFilled(false);
		this.setBorderPainted(false);
		this.setFocusable(false);
	}
}

class SkillBtn extends JButton{
	SkillBtn(){
		super();
		this.setContentAreaFilled(false);
		this.setBorderPainted(false);
		this.setFocusable(false);
	}
}

class PlayerAbilityBtn extends JButton{
	PlayerAbilityBtn(){
		super();
		this.setContentAreaFilled(false);
		this.setBorderPainted(false);
		this.setFocusable(false);
	}
}

class TaskBtn extends JButton{
	TaskBtn(){
		super();
		this.setContentAreaFilled(false);
		this.setBorderPainted(false);
		this.setFocusable(false);
	}
}

class SettingBtn extends JButton{
	SettingBtn(){
		super();
		this.setContentAreaFilled(false);
		this.setBorderPainted(false);
		this.setFocusable(false);
	}
}

class CreatorBtn extends JButton{
	CreatorBtn(){
		super();
		this.setContentAreaFilled(false);
		this.setBorderPainted(false);
		this.setFocusable(false);
	}
}

class ExperienceValue extends JProgressBar{
	ExperienceValue(){
		super();
		this.setMinimum(0);
		this.setMaximum(Playing.demandexperience);
		this.setValue(Playing.playerexperience);
		this.setBorderPainted(true);
		this.setBackground(new Color(255,232,191));
		this.setForeground(new Color(200,150,150));
		this.setStringPainted(true);
		this.setFont(new Font("標楷體",1,15));
		this.setString(Playing.playerexperience + "／" + Playing.demandexperience);

		InformationPowerUpdate.setexperiencevalue(this);
	}
}

class InformationWindow extends JTextArea{
	static int windowx=0,windowy=250,clickx,clicky;
	InformationWindow(){
		super();
		this.setBackground(new Color(255,255,255));
		this.setEditable(false);
		this.setFont(new Font("標楷體",1,15));
		this.setBorder(BorderFactory.createLineBorder(Color.black,1));
		this.setText("");
		this.setFocusable(false);
		Document dt = this.getDocument();
		
		dt.addDocumentListener(new DocumentListener(){                  
            public void changedUpdate(DocumentEvent e) {
             
            }

			
			public void insertUpdate(DocumentEvent arg0) {
				
				int n=0,idx=-1;
				for(int i=0;i<InformationWindow.this.getText().length();i++)
				{
					if(InformationWindow.this.getText().charAt(i)=='\n')
					n++;
					if(idx==-1)
					idx=i;
				}
				if(n>15)
				{
					
					String s=InformationWindow.this.getText().substring(idx+1);
					new Thread(new Runnable() {
						public void run() {
							InformationWindow.this.setText(s);
						}
					}).start();
					
				}
			}


			public void removeUpdate(DocumentEvent arg0) {
				
			}
		});
		
		this.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				clickx=e.getX();
				clicky=e.getY();
			}
		});
		
		this.addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				int x=e.getX();
				int y=e.getY();
				if((windowx+x-clickx)>=0 && (windowx+x-clickx)+250<=1200 && (windowy+y-clicky)>=0 && (windowy+y-clicky)+305<=768)
				{	
					InformationWindow.this.setBounds(windowx=windowx+x-clickx, windowy=windowy+y-clicky, 250, 305);
				}
				else if((windowx+x-clickx)<0)
				{
					if((windowy+y-clicky)>=0 && (windowy+y-clicky)+305<=768)
					{
						InformationWindow.this.setBounds(windowx=0, windowy=windowy+y-clicky, 250, 305);
					}
					else if((windowy+y-clicky)<0)
					{
						InformationWindow.this.setBounds(windowx=0, windowy=0, 250, 305);
					}
					else if((windowy+y-clicky)+305>768)
					{
						InformationWindow.this.setBounds(windowx=0, windowy=463, 250, 305);
					}
				}
				else if((windowx+x-clickx)+250>1200)
				{
					if((windowy+y-clicky)>=0 && (windowy+y-clicky)+305<=768)
					{
						InformationWindow.this.setBounds(windowx=950, windowy=windowy+y-clicky, 250, 305);
					}
					else if((windowy+y-clicky)<0)
					{
						InformationWindow.this.setBounds(windowx=950, windowy=0, 250, 305);
					}
					else if((windowy+y-clicky)+305>768)
					{
						InformationWindow.this.setBounds(windowx=950, windowy=463, 250, 305);
					}					
				}
				else if((windowy+y-clicky)<0)
				{
					if((windowx+x-clickx)>=0)
					InformationWindow.this.setBounds(windowx=windowx+x-clickx, windowy=0, 250, 305);	
				}
				else if((windowy+y-clicky)+305>768)
				{
					if((windowx+x-clickx)+250<=1200)
					InformationWindow.this.setBounds(windowx=windowx+x-clickx, windowy=463, 250, 305);	
				}
			}
		});

	}
}

class PlayerNameArea extends JTextArea{
	PlayerNameArea(){
		super();
		this.setFocusable(false);
		this.setEditable(false);
		this.setFont(new Font("標楷體",0,30));
		this.setText(Playing.playername);
		this.setBorder(BorderFactory.createLineBorder(Color.black,1));
		InformationPowerUpdate.playernamearea=this;
		//InformationPowerUpdate.setarea(this);
	}
}

/*
class PlayerLevelArea extends JTextArea{
	PlayerLevelArea(){
		super();
		this.setFocusable(false);
		this.setEditable(false);
		this.setFont(new Font("標楷體",0,25));
		this.setText("Lv." + Playing.playerlevel);
		this.setBorder(BorderFactory.createLineBorder(Color.black,1));
		InformationPowerUpdate.playerlevelarea=this;
	}
}
*/

class MonsterHP extends JProgressBar{
	MonsterHP(){
		super();
		this.setMinimum(0);
		this.setBorderPainted(true);
		this.setBackground(new Color(255,255,255));
		this.setForeground(new Color(255,18,18));		
	}
}

class HealthPower extends JProgressBar{
	HealthPower(){
		super();
		this.setMinimum(0);
		this.setMaximum((int)Playing.playermaxhp);
		this.setValue(Playing.playernowhp);
		this.setBorderPainted(true);
		this.setBackground(new Color(255,255,255));
		this.setForeground(new Color(255,18,18));
		this.setFont(new Font("標楷體",0,20));
		this.setStringPainted(true);
		this.setString(Playing.playernowhp + "／" + (int)Playing.playermaxhp);
		//this
	}
}

class MagicPower extends JProgressBar{
	MagicPower(){
		super();
		this.setMinimum(0);
		this.setMaximum((int)Playing.playermaxmp);
		this.setValue(Playing.playernowmp);
		this.setBorderPainted(true);
		this.setBackground(new Color(255,255,255));
		this.setForeground(new Color(18,18,255));
		this.setFont(new Font("標楷體",0,20));
		this.setStringPainted(true);
		this.setString(Playing.playernowmp + "／" + (int)Playing.playermaxmp);

	}
}

class TiredPower extends JProgressBar{
	TiredPower(){
		super();
		this.setMinimum(0);
		this.setMaximum(Playing.playermaxtp);
		this.setValue(Playing.playernowtp);
		this.setBorderPainted(true);
		this.setBackground(new Color(255,255,255));
		this.setForeground(new Color(255,172,18));
		this.setStringPainted(true);
		this.setFont(new Font("標楷體",0,20));
		this.setString(Playing.playernowtp + "／" + Playing.playermaxtp);

	}
}

class PlayerInformationValue extends JPanel{
	static BufferedImage bighead=null;
	PlayerInformationValue(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		PlayerNameArea playernamearea = new PlayerNameArea();
		//PlayerLevelArea playerlevelarea = new PlayerLevelArea();
		HealthPower healthpower = new HealthPower();
		MagicPower magicpower = new MagicPower();
		TiredPower tiredpower = new TiredPower();
		InformationPowerUpdate informationpowerupdate = new InformationPowerUpdate(healthpower,magicpower,tiredpower);
		informationpowerupdate.start();
		String s = "/CustomBoyImage/0-0-0-0.jpg";
		URL url = getClass().getResource(s);
		try {
			bighead=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		//imagebase.setBounds(0, 0, 180, 180);
		//imagebase.setIcon(new ImageIcon(bighead));
		playernamearea.setBounds(140, 0, 300, 35);
		//playerlevelarea.setBounds(0, 140, 90, 30);
		healthpower.setBounds(140, 35, 250, 35);
		magicpower.setBounds(140,  70, 200, 35);
		tiredpower.setBounds(140,  105, 150, 35);
		
		this.add(playernamearea);
		//this.add(playerlevelarea);
		this.add(healthpower);
		this.add(magicpower);
		this.add(tiredpower);
		//this.add(imagebase);
	}
	
	public static void setbighead(BufferedImage t) {
		bighead=t;
	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.drawImage(bighead, 0, 0, 140, 140, 0, 0, 180, 180, null);
	}
}

class PanelListenner extends KeyAdapter{
	static int keyboardmode=0;
	static GameUI t;
	static JDialog s;
	static Playing w;
	static boolean itemshow=false;
	static boolean minimapshow=true;
	static boolean infowindowshow=true;
	static boolean taskshow=false;
	static boolean abilityshow=false;
	static boolean playerinfo=false;
	static boolean skillpageshow=false;
	static boolean settingshow=false;
	static boolean creatorshow=false;
	static PlayerInformationValue playerinformationvalue;
	static ExperienceValue experiencevalue;
	static SkillDisplayField skilldisplayfield;
	static SkillDisplaySubField skilldisplaysubfield;
	static PlayerSubAbility playersubability;
	static FunctionList functionlist;
	static TalkWindow talkwindow;
	static NPCImageArea npcimagearea;
	static TaskSystem tasksystem;
	static InformationWindow informationwindow;
	static MiniMap minimap;
	static NowMapInfo nowmapinfo;
	static PlayerAbilitySystem playerabilitysystem;
	static PlayerEquipmentInfo playerequipmentinfo;
	static SkillPage skillpage;
	static SettingInfo settinginfo;
	static CreatorList creatorlist;
	static Inventory inventory = new Inventory();
	static ImageShowArea imageshowarea;
	static PanelListennertalk pltalk = new PanelListennertalk();
	static boolean hpwater=true;
	static boolean mpwater=true;
	int x=0;
	static boolean op = false;
	public void keyPressed(KeyEvent e) {
		int select= e.getKeyCode();
		switch(select)
		{
			case KeyEvent.VK_UP:
				Player.down=false;
				Player.left=false;
				Player.right=false;
				Player.up=true;
				if(Player.playermovable==true)
				{
					Player.playermovable=false;
					Player player = new Player();
					player.start();
				}
				break;
			case KeyEvent.VK_DOWN:
				Player.up=false;
				Player.left=false;
				Player.right=false;
				Player.down=true;
				if(Player.playermovable==true)
				{
					Player.playermovable=false;
					Player player = new Player();
					player.start();
				}
				break;
			case KeyEvent.VK_LEFT:
				//System.out.println("TEST");
				Player.up=false;
				Player.down=false;
				Player.right=false;	
				Player.left=true;
				if(Player.playermovable==true)
				{
					Player.playermovable=false;
					Player player = new Player();
					player.start();
				}
				break;
			case KeyEvent.VK_RIGHT:
				Player.up=false;
				Player.down=false;
				Player.left=false;
				Player.right=true;
				if(Player.playermovable==true)
				{
					Player.playermovable=false;
					Player player = new Player();
					player.start();
				}
				break;
			case KeyEvent.VK_Z:
				//if(Playing.nowmap==0)
				//{
					int nowx=Player.playerx;
					int nowy=Player.playery;
					if(Player.toward==1)
					nowy--;
					else if(Player.toward==2)
					nowy++;
					else if(Player.toward==3)
					nowx--;
					else if(Player.toward==4)
					nowx++;
	
					
					for(int i=0;i<4;i++)
					{
						if(nowx==Playing.npccor[Playing.nowmap][i]/100 && nowy==Playing.npccor[Playing.nowmap][i]%100)
						{
							if(Playing.nowmap==0)
							{
								if(i<=0)
								npcimagearea.setlabel(i);
								else
								npcimagearea.setlabel(i+1);
							}
							/*
							else if(Playing.nowmap==11)
							{
								npcimagearea.setlabel(1);
							}
							*/
							if(Player.toward==1)
								Playing.npctoward[Playing.nowmap][i]=2;
							else if(Player.toward==2)
								Playing.npctoward[Playing.nowmap][i]=1;
							else if(Player.toward==3)
								Playing.npctoward[Playing.nowmap][i]=4;
							else if(Player.toward==4)
								Playing.npctoward[Playing.nowmap][i]=3;
							
							
							if(Playing.nowmap==0 && i==0)
							{
								if(TaskRightInformationArea.mainset[0]==true && TaskRightInformationArea.mainfin[0]==false)
								{
									
									talkwindow.talk.setText("春暮鎮嚮導：\n   您好∼"+ Playing.playername +"\n   歡迎您來到春暮鎮這塊寶地∼");
									pltalk.index=1;
								}		
								else
								{
									talkwindow.talk.setText("春暮鎮嚮導：\n   我是春暮鎮嚮導∼\n   歡迎您來到春暮鎮這塊寶地∼\n   好好欣賞以及遊覽春暮鎮吧！");
									pltalk.index=0;
								}	

								
								
							}
							/*
							else if((Playing.nowmap==0 && i>=1 && i<=5) || (Playing.nowmap==11 && i<3))
							{
								talkwindow.talk.setText("春暮鎮守衛：\n   目前........\n   此路正好不通呢∼\n   往其他地方走走吧!");
								pltalk.index=0;
								
							}
							*/
							else if(Playing.nowmap==0 && i==1)
							{
								if(Playing.career==0)
								{
									talkwindow.talk.setText("戰士導師：\n   你現在只是個弱小的見習生...\n   現在就好好成為勇敢的戰士吧!");
									Playing.career=1;
								}
								else if(Playing.career==1)
								talkwindow.talk.setText("戰士導師：\n   ....你已經是一個獨當一面的戰士了!");
								pltalk.index=0;		
							}
							else if(Playing.nowmap==0 && i==2)
							{
								talkwindow.talk.setText("練等魔人：\n   打怪提升等級是很累的....\n   直接接受我的經驗值吧!");
								Playing.playerexperience+=Playing.demandexperience;
								pltalk.index=0;
							}
							else if(Playing.nowmap==0 && i==3)
							{
								talkwindow.talk.setText("全能補師：\n   血量跟魔量不足嗎.....？\n   接受我施展的恩惠吧∼孩子");
								Playing.playernowhp=(int)Playing.playermaxhp;
								Playing.playernowmp=(int)Playing.playermaxmp;
								pltalk.index=0;
							}
							
							playerinformationvalue.setVisible(false);
							experiencevalue.setVisible(false);
							skilldisplayfield.setVisible(false);
							skilldisplaysubfield.setVisible(false);
							playersubability.setVisible(false);
							functionlist.setVisible(false);
							tasksystem.setVisible(false);
							informationwindow.setVisible(false);
							minimap.setVisible(false);
							nowmapinfo.setVisible(false);
							playerabilitysystem.setVisible(false);
							playerequipmentinfo.setVisible(false);
							skillpage.setVisible(false);
							creatorlist.setVisible(false);
							inventory.setVisible(false);
							settinginfo.setVisible(false);
							imageshowarea.setVisible(false);		
							pltalk.decode=Playing.npccor[Playing.nowmap][i]*100+1*10+Playing.nowmap;

							Player.up=Player.down=Player.left=Player.right=false;
							w.removeKeyListener(this);
							w.addKeyListener(pltalk);
							w.add(npcimagearea,0);
							w.add(talkwindow,1);
							break;
							
						}
						
						
					}
					/*
					for(int i=0;i<11;i++)
					{
						if(nowx==Playing.npccor[Playing.nowmap][i]/100 && nowy==Playing.npccor[Playing.nowmap][i]%100)
						{
							npcimagearea.setlabel(i);
							if(Player.toward==1)
								Playing.npctoward[Playing.nowmap][i]=2;
							else if(Player.toward==2)
								Playing.npctoward[Playing.nowmap][i]=1;
							else if(Player.toward==3)
								Playing.npctoward[Playing.nowmap][i]=4;
							else if(Player.toward==4)
								Playing.npctoward[Playing.nowmap][i]=3;
							
					
							if(Playing.nowmap==0 && i==0)
							{
								if(TaskRightInformationArea.mainset[0]==true && TaskRightInformationArea.mainfin[0]==false)
								{
									
									talkwindow.talk.setText("遊戲大使：\n   您好∼"+ Playing.playername +"\n   歡迎您來到妖都傳說的世界∼");
									pltalk.index=1;
								}
								else if(TaskRightInformationArea.mainset[1]==true && TaskRightInformationArea.mainfin[1]==false)
								{
									
									talkwindow.talk.setText("遊戲大使：\n   準備好了嗎.....？\n   我要講解這世界的來源了唷∼");
									pltalk.index=16;
								}
								else if(TaskRightInformationArea.mainfin[1]==true && TaskRightInformationArea.mainset[2]==false && TaskRightInformationArea.mainfin[2]==false)
								{
									
									PanelListenner.talkwindow.talk.setText("遊戲大使：\n   剛剛我所闡述的就是這個世界"
											+ "的世界觀，\n   想必現在您已經非常清楚這個世界的組\n   成以及來龍去脈了∼");
									pltalk.index=2;
								}
								else if(TaskRightInformationArea.mainset[2]==true && TaskRightInformationArea.mainfin[2]==true && TaskRightInformationArea.mainset[3]==false)
								{
									PanelListenner.talkwindow.talk.setText("遊戲大使：\n   看來您已經好好了解了人物資訊這個畫面\n"
											+ "   的元素了，在這個畫面中是可以觀看自己\n   所選擇的形象以及目前穿戴的裝備哦∼");
									pltalk.index=1;
								}
								else if(TaskRightInformationArea.mainset[3]==true && TaskRightInformationArea.mainfin[3]==true && TaskRightInformationArea.mainset[4]==false)
								{
									PanelListenner.talkwindow.talk.setText("遊戲大使：\n   看來您已經好好了解了道具欄的功用了∼\n"
											+ "   在這個畫面中可以查看自己傭有的物品與金錢\n   也可以拖曳消耗品至畫面中的快捷唷！");
									pltalk.index=1;
	
								}
								else if(TaskRightInformationArea.mainset[4]==true && TaskRightInformationArea.mainfin[4]==true && TaskRightInformationArea.mainset[5]==false)
								{
									PanelListenner.talkwindow.talk.setText("遊戲大使：\n   技能頁可以查看自己可使用的技能，在這\n"
											+ "   個畫面中可以將技能拖曳至下方快捷中\n   也可以在該畫面學習技能來增強自己∼");
									pltalk.index=1;
	
								}
								else if(TaskRightInformationArea.mainset[5]==true && TaskRightInformationArea.mainfin[5]==true && TaskRightInformationArea.mainset[6]==false)
								{
									PanelListenner.talkwindow.talk.setText("遊戲大使：\n   人物素質記載著人物本身的詳細資訊，在\n"
											+ "   這個畫面中也可以增加5種屬性來提升能\n   力，也可以在開啟更詳細的資訊");
									pltalk.index=1;
	
								}
								else if(TaskRightInformationArea.mainset[6]==true && TaskRightInformationArea.mainfin[6]==true && TaskRightInformationArea.mainset[7]==false)
								{
									PanelListenner.talkwindow.talk.setText("遊戲大使：\n   任務會記載著當前的任務和已完成的任務\n"
											+ "   ，因此可以隨時查看目前到底完成了哪\n   些任務哦∼");
									pltalk.index=1;
	
								}
								else if(TaskRightInformationArea.mainset[7]==true && TaskRightInformationArea.mainfin[7]==true && TaskRightInformationArea.mainset[8]==false)
								{
									PanelListenner.talkwindow.talk.setText("遊戲大使：\n   在設定之中可以查看快捷鍵的設置狀況\n"
											+ "   ，也可以調整遊戲中的音量或者改變某些\n   模式來讓遊玩者有舒適的體驗∼");
									pltalk.index=1;
	
								}
								else if(TaskRightInformationArea.mainset[8]==true && TaskRightInformationArea.mainfin[8]==true && TaskRightInformationArea.mainset[9]==false)
								{
									PanelListenner.talkwindow.talk.setText("遊戲大使：\n   您看完了開發者名單了嗎？\n"
											+ "   那麼去找開發者們進行對話交流\n   一下吧！或許他們有很多話想說∼");
									pltalk.index=1;
	
								}
								else if(TaskRightInformationArea.mainset[15]==true && TaskRightInformationArea.mainfin[15]==false)
								{
									PanelListenner.talkwindow.talk.setText("遊戲大使：\n   看來您已經拜訪完所有的開發者了\n"
											+ "   接下來就是您的旅途的開始了∼");
									pltalk.index=1;
	
								}

								else
								{
									talkwindow.talk.setText("遊戲大使：\n   我是遊戲大使∼\n   歡迎您來到妖都傳說的世界∼\n   請盡情在這世界遊玩吧！");
									pltalk.index=0;
								}
								//System.out.println(TaskRightInformationArea.mainset[2] + "" + TaskRightInformationArea.mainfin[2]);
								//System.out.println("GGGG");
							}
							else if(Playing.nowmap==0 && i==1)
							{
								if(TaskRightInformationArea.mainset[9]==true && TaskRightInformationArea.mainfin[9]==false)
								{
									PanelListenner.talkwindow.talk.setText("開發者蟒蛇：\n   您好∼我是開發者蟒蛇\n"
											+ "   歡迎來到這個世界∼");
									pltalk.index=1;
	
								}
								else
								{
									PanelListenner.talkwindow.talk.setText("開發者蟒蛇：\n   您要知道一件事......\n"
											+ "   那就是人類的肝真的很新鮮.....");
									pltalk.index=0;
								}
							}
							else if(Playing.nowmap==0 && i==2)
							{
								if(TaskRightInformationArea.mainset[10]==true && TaskRightInformationArea.mainfin[10]==false)
								{
									PanelListenner.talkwindow.talk.setText("開發者萬花筒六道輪迴：\n   您好∼我是開發者萬花筒六道輪迴\n"
											+ "   歡迎您進入到這個世界∼");
									pltalk.index=1;
	
								}
								else
								{
									PanelListenner.talkwindow.talk.setText("開發者萬花筒六道輪迴：\n   虛假中潛在真實，真實中帶出虛假，\n"
											+ "   那麼你覺得，你是對還是錯∼？");
									pltalk.index=0;

								}
							}
							else if(Playing.nowmap==0 && i==3)
							{
								if(TaskRightInformationArea.mainset[11]==true && TaskRightInformationArea.mainfin[11]==false)
								{
									PanelListenner.talkwindow.talk.setText("開發者紫水晶：\n   您好∼我是開發者紫水晶\n"
											+ "   歡迎您進入到這個美麗的世界∼");
									pltalk.index=1;
	
								}
								else
								{
									PanelListenner.talkwindow.talk.setText("開發者紫水晶：\n   That is not dead which can\n"
											+ "   eternal lie And with strange\n   aeons even death may die.");
									pltalk.index=1;
								}
							}
							else if(Playing.nowmap==0 && i==4)
							{
								if(TaskRightInformationArea.mainset[12]==true && TaskRightInformationArea.mainfin[12]==false)
								{
									PanelListenner.talkwindow.talk.setText("開發者哦莫：\n   您好∼我是開發者哦莫\n"
											+ "   歡迎您進入到這遼闊的世界∼");
									pltalk.index=1;
	
								}
								else
								{
									PanelListenner.talkwindow.talk.setText("開發者哦莫：\n   .......................\n"
											+ "   ...............");
									pltalk.index=0;	
								}
							}
							else if(Playing.nowmap==0 && i==5)
							{
								if(TaskRightInformationArea.mainset[13]==true && TaskRightInformationArea.mainfin[13]==false)
								{
									PanelListenner.talkwindow.talk.setText("開發者桐人：\n   您好∼我是開發者桐人\n"
											+ "   歡迎您進入到這個快還要更快的世界∼");
									pltalk.index=1;
	
								}
								else
								{
									PanelListenner.talkwindow.talk.setText("開發者桐人：\n   快還要更快\n"
											);
									pltalk.index=1;	

								}
							}
							else if(Playing.nowmap==0 && i==6)
							{
								if(TaskRightInformationArea.mainset[14]==true && TaskRightInformationArea.mainfin[14]==false)
								{
									PanelListenner.talkwindow.talk.setText("開發者惡魔：\n   您好∼我是開發者惡魔\n"
											+ "   歡迎您進入到這個自由豐富的世界∼");
									pltalk.index=1;
	
								}
								else
								{
									PanelListenner.talkwindow.talk.setText("開發者惡魔：\n   惡魔嵐襲之術！\n"
											);
									pltalk.index=0;	

								}
							}
							else if(Playing.nowmap==0 && i==7)
							{
								if(TaskRightInformationArea.mainset[16]==true && TaskRightInformationArea.mainfin[16]==false)
								{
									PanelListenner.talkwindow.talk.setText("陌生男子：\n   " + Playing.playername + "，我在這裡等\n"
											+ "   待你很久了.....\n   我是事先來先認識你的.....");
									pltalk.index=1;
	
								}
								else
								{
									PanelListenner.talkwindow.talk.setText("陌生男子：\n   看來今日是個在外的好日子！\n"
											);
									pltalk.index=0;	
								}
							}
							else if(Playing.nowmap==0 && i==8)
							{
								PanelListenner.talkwindow.talk.setText("雪電昇：\n   快捷中的J與K可以透過消耗金錢"
										+ "\n   來得到恢復生命或模力的效果\n   不過.....上課真無聊");
								pltalk.index=0;	

							}
							else if(Playing.nowmap==0 && i==9)
							{
								if(TaskRightInformationArea.carset[0]==true && TaskRightInformationArea.carfin[0]==false)
								{
									String s=PanelListenner.informationwindow.getText();
									PanelListenner.talkwindow.talk.setText("戰士導師：\n   您想了解戰士嗎？\n"
											+ "   戰士是一個勇敢無懼的職業\n   如果您想成為戰士，就在來找我對話吧！");
									pltalk.index=0;
									s = s +"已完成任務[職]" + TaskRightInformationArea.carn[0] + "\n獲得了10000金錢20000經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[1];
									PanelListenner.informationwindow.setText(s);
									Playing.playerexperience+=20000;
									InventoryGoldArea.playercoin+=10000;
				
									TaskRightInformationArea.carfin[0]=true;
									NowTaskLeftArea.CareerTaskModel.removeElement(TaskRightInformationArea.carn[0]);
									AlreadyTaskLeftArea.CareerTaskModel.addElement(TaskRightInformationArea.carn[0]);
									NowTaskLeftArea.CareerTaskModel.addElement(TaskRightInformationArea.carn[1]);
									TaskRightInformationArea.carset[1]=true;
				
									
								}
								else if(TaskRightInformationArea.carset[1]==true && TaskRightInformationArea.carfin[1]==false)
								{
									String s=PanelListenner.informationwindow.getText();
									PanelListenner.talkwindow.talk.setText("戰士導師：\n   恭喜您！從此刻起您就是\n"
											+ "   戰士了！好好地藉由戰士的技能\n   去守護自己珍貴的東西吧！");
									pltalk.index=0;
									Playing.career=1;
									s = s +"已完成任務[職]" + TaskRightInformationArea.carn[1] + "\n獲得了15000金錢25000經驗值";
									PanelListenner.informationwindow.setText(s);
									Playing.playerexperience+=25000;
									InventoryGoldArea.playercoin+=15000;
	
									TaskRightInformationArea.carfin[1]=true;
									NowTaskLeftArea.CareerTaskModel.removeElement(TaskRightInformationArea.carn[1]);
									AlreadyTaskLeftArea.CareerTaskModel.addElement(TaskRightInformationArea.carn[1]);
			
								}
								else
								{
									PanelListenner.talkwindow.talk.setText("戰士導師：\n   戰士是不怕任何危險的！\n"
											);
									pltalk.index=0;	

								}
							}
							else if(Playing.nowmap==0 && i==10)
							{
								if(TaskRightInformationArea.mainset[17]==true && TaskRightInformationArea.mainfin[17]==false)
								{
									PanelListenner.talkwindow.talk.setText("開發者雪人胖胖：\n   您好∼我是開發者雪人胖胖\n"
											+ "   歡迎您來到這個絢爛的世界∼");
									pltalk.index=1;
	
								}
								else
								{
									PanelListenner.talkwindow.talk.setText("開發者雪人胖胖：\n   長高長胖長智商∼\n"
											);
									pltalk.index=0;	

								}
							}
							else if(Playing.nowmap==3 && i==0)
							{
								npcimagearea.setlabel(7);
								if(TaskRightInformationArea.subset[0]==true && TaskRightInformationArea.subfin[0]==false)
								{
									String s=PanelListenner.informationwindow.getText();
									PanelListenner.talkwindow.talk.setText("吳卓俊教授："
											+ "\n   這學校這麼大你竟然可以找到我∼\n"
											+ "   看來我們之間還真是有緣呢\n   這也許是命運也說不定");
									pltalk.index=0;
									s = s +"已完成任務[副]" + TaskRightInformationArea.subn[0] + "\n獲得了15000金錢25000經驗值";
									PanelListenner.informationwindow.setText(s);
									Playing.playerexperience+=60000;
									InventoryGoldArea.playercoin+=50000;
	
									TaskRightInformationArea.subfin[0]=true;
									NowTaskLeftArea.SubTaskModel.removeElement(TaskRightInformationArea.subn[0]);
									AlreadyTaskLeftArea.SubTaskModel.addElement(TaskRightInformationArea.subn[0]);
									op=true;
								}
								else
								{
									PanelListenner.talkwindow.talk.setText("吳卓俊教授：\n   嗨嗨嗨嗨嗨~~∼\n"
											);
									pltalk.index=0;	

								}
							}

							
							playerinformationvalue.setVisible(false);
							experiencevalue.setVisible(false);
							skilldisplayfield.setVisible(false);
							skilldisplaysubfield.setVisible(false);
							playersubability.setVisible(false);
							functionlist.setVisible(false);
							tasksystem.setVisible(false);
							informationwindow.setVisible(false);
							minimap.setVisible(false);
							nowmapinfo.setVisible(false);
							playerabilitysystem.setVisible(false);
							playerequipmentinfo.setVisible(false);
							skillpage.setVisible(false);
							creatorlist.setVisible(false);
							inventory.setVisible(false);
							settinginfo.setVisible(false);
							imageshowarea.setVisible(false);		
							pltalk.decode=Playing.npccor[Playing.nowmap][i]*100+1*10+Playing.nowmap;
							//pltalk.decode=Playing.npccor[Playing.nowmap][i]*100+1*10+i;

							Player.up=Player.down=Player.left=Player.right=false;
							w.removeKeyListener(this);
							w.addKeyListener(pltalk);
							w.add(npcimagearea,0);
							w.add(talkwindow,1);
							break;
						}
					//}
				}
				*/
				break;
			case KeyEvent.VK_SPACE:	
				if(SkillImage.attack==false)
				{
					SkillImage.attack=true;
					SkillImage ski = new SkillImage(1);
					ski.start();

				}
				break;
			case KeyEvent.VK_1:
				if(SkillDisplayField.number[0]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[0]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[0]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[0]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[0]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_2:
				if(SkillDisplayField.number[1]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[1]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[1]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[1]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[1]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_3:
				if(SkillDisplayField.number[2]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[2]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[2]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[2]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[2]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_4:
				if(SkillDisplayField.number[3]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[3]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[3]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[3]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[3]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_5:
				if(SkillDisplayField.number[4]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[4]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[4]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[4]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[4]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_6:
				if(SkillDisplayField.number[5]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[5]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[5]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[5]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[5]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_7:
				if(SkillDisplayField.number[6]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[6]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[6]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[6]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[6]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_8:
				if(SkillDisplayField.number[7]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[7]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[7]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[7]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[7]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_9:
				if(SkillDisplayField.number[8]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[8]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[8]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[8]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[8]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_0:
				if(SkillDisplayField.number[9]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[9]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[9]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[9]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[9]);
						ski.start();
					}
				}
				break;

			case KeyEvent.VK_MINUS:
				if(SkillDisplayField.number[10]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[10]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[10]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[10]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[10]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_EQUALS:
				if(SkillDisplayField.number[11]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[11]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[11]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[11]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[11]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_INSERT:
				if(SkillDisplayField.number[12]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[12]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[12]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[12]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[12]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_HOME:
				if(SkillDisplayField.number[13]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[13]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[13]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[13]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[13]);
						ski.start();
					}
				}
				break;
			case KeyEvent.VK_PAGE_UP:
				if(SkillDisplayField.number[14]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[14]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[14]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[14]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[14]);
						ski.start();
					}
					break;
				}
				break;
			case KeyEvent.VK_DELETE:
				if(SkillDisplayField.number[15]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[15]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[15]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[15]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[15]);
						ski.start();
					}
					break;
				}
				break;
			case KeyEvent.VK_END:
				if(SkillDisplayField.number[16]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[16]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[16]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[16]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[16]);
						ski.start();
					}
					break;
				}
				break;
			case KeyEvent.VK_PAGE_DOWN:
				if(SkillDisplayField.number[17]!=-1)
				{
					if(SkillImage.skillcd[SkillDisplayField.number[17]%10]==false && SkillPageLeftArea.activelv[SkillDisplayField.number[17]%10]>0)
					{
						SkillImage.skillcd[SkillDisplayField.number[17]%10]=true;
						SkillImage ski = new SkillImage(SkillDisplayField.number[17]);
						ski.start();
					}
				}
				break;
				/*
			case KeyEvent.VK_S:
				if(SkillImage.skillcd[6]==false)
				{
					SkillImage.skillcd[6]=true;
				SkillImage ski = new SkillImage(116);
				ski.start();
				}
				break;
				*/
			/*	
			case KeyEvent.VK_J:
				if(InventoryGoldArea.playercoin>=500 && hpwater==true)
				{
					InventoryGoldArea.playercoin-=500;
					hpwater=false;
					int recov = (int)((float)Playing.playermaxhp*0.05);
					if((Playing.playernowhp+recov)<=Playing.playermaxhp)
					Playing.playernowhp+=recov;
					else
					Playing.playernowhp=(int)Playing.playermaxhp;
					Playing.playerexperience+=Playing.demandexperience;
					new Thread(new Runnable() {
						public void run() {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							hpwater=true;
						}
					}).start();
				}
			break;
			case KeyEvent.VK_K:
				if(InventoryGoldArea.playercoin>=500 && mpwater==true)
				{
					InventoryGoldArea.playercoin-=500;
					mpwater=false;
					int recov = (int)(Playing.playermaxmp*0.05);
					if((Playing.playernowmp+recov)<=Playing.playermaxmp)
					Playing.playernowmp+=recov;
					else
					Playing.playernowmp=(int)Playing.playermaxmp;
					new Thread(new Runnable() {
						public void run() {
							try {
								Thread.sleep(1000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							mpwater=true;
						}
					}).start();
				}

			break;
			*/
			case KeyEvent.VK_S:
				if(settingshow==false)
				{
					if(TaskRightInformationArea.mainset[7]==true)
					{
						TaskRightInformationArea.mainfin[7]=true;
					}

					w.add(settinginfo,0);
					settingshow=true;
				}
				else
				{
					w.remove(settinginfo);
					settingshow=false;
				}
				break;
			case KeyEvent.VK_X:
				if(itemshow==false)
				{
					if(TaskRightInformationArea.mainset[3]==true)
					{
						TaskRightInformationArea.mainfin[3]=true;
					}

					inventory.setBounds(Inventory.itemx,Inventory.itemy,240,330);
					//inventory.repaint();
					//inventory.updateUI();
					w.add(inventory,0);
					inventory.updateUI();
					itemshow=true;
				}
				else
				{
					w.remove(inventory);
					itemshow=false;
				}
				break;
			case KeyEvent.VK_N:
				if(minimapshow==false)
				{
					w.add(minimap);
					w.add(nowmapinfo);
					minimapshow=true;
				}
				else
				{
					w.remove(minimap);
					w.remove(nowmapinfo);
					minimapshow=false;
				}
				break;
			
			case KeyEvent.VK_T:
				if(infowindowshow==false)
				{
					w.add(informationwindow,0);
					infowindowshow=true;
				}
				else
				{
					w.remove(informationwindow);
					infowindowshow=false;
				}
				break;	
				
			case KeyEvent.VK_R:
				if(taskshow==false)
				{
					w.add(tasksystem,0);
					if(TaskRightInformationArea.mainset[6]==true)
					{
						TaskRightInformationArea.mainfin[6]=true;
					}

					tasksystem.updateUI();
					taskshow=true;
				}
				else
				{
					w.remove(tasksystem);
					taskshow=false;
				}
				break;
			case KeyEvent.VK_A:
				if(abilityshow==false)
				{
					w.add(playerabilitysystem,0);
					if(TaskRightInformationArea.mainset[5]==true)
					{
						TaskRightInformationArea.mainfin[5]=true;
					}

					playerabilitysystem.updateUI();
					abilityshow=true;
					//System.out.println("A");
				}
				else
				{
					w.remove(playerabilitysystem);
					abilityshow=false;
				}
				//System.out.println("A");
				break;
			case KeyEvent.VK_P:
				if(playerinfo==false)
				{
					w.add(playerequipmentinfo,0);
					if(TaskRightInformationArea.mainset[2]==true)
					{
						TaskRightInformationArea.mainfin[2]=true;
					}
					playerequipmentinfo.updateUI();
					playerinfo=true;
				}
				else
				{
					w.remove(playerequipmentinfo);
					playerinfo=false;
				}
				break;
			case KeyEvent.VK_H:
				if(skillpageshow==false)
				{
					if(TaskRightInformationArea.mainset[4]==true)
					{
						TaskRightInformationArea.mainfin[4]=true;
					}

					if(SkillPageTopArea.state==0)
					{
						
					}
					else if(SkillPageTopArea.state==1)
					{
						/*
						SkillPageLeftArea.activemove[0].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.activemove[1].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.activemove[2].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.activemove[3].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.activemove[4].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.activemove[5].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.activemove[6].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.activemove[7].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+295, 40, 40);
						SkillPageLeftArea.activemove[8].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+365, 40, 40);
						
						SkillPageLeftArea.inactivemove[0].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.inactivemove[1].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+155, 40, 40);
						SkillPageLeftArea.inactivemove[2].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.inactivemove[3].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+295, 40, 40);
						SkillPageLeftArea.inactivemove[4].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.inactivemove[5].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+225, 40, 40);
						SkillPageLeftArea.inactivemove[6].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+85, 40, 40);
						SkillPageLeftArea.inactivemove[7].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+365, 40, 40);
						*/
						for(int i = 0;i<9;i++)
						{
							w.add(SkillPageLeftArea.activemove[i]);
						}
						for(int i = 0;i<8;i++)
						{
							w.add(SkillPageLeftArea.inactivemove[i]);
						}
						
					}
					else if(SkillPageTopArea.state==2)
					{
						
					}
					else if(SkillPageTopArea.state==3)
					{
						
						for(int i = 0;i<9;i++)
						{
							w.add(SkillPageLeftArea.activemove[i]);
						}
						for(int i = 0;i<8;i++)
						{
							w.add(SkillPageLeftArea.inactivemove[i]);
						}
						
					}

					w.add(skillpage,0);
					skillpage.updateUI();
					skillpageshow=true;
				}
				else
				{
					if(SkillPageTopArea.state==0)
					{
						
					}
					else if(SkillPageTopArea.state==1)
					{
						for(int i = 0;i<9;i++)
						{
							w.remove(SkillPageLeftArea.activemove[i]);
						}
						for(int i = 0;i<8;i++)
						{
							w.remove(SkillPageLeftArea.inactivemove[i]);
						}
						
					}
					else if(SkillPageTopArea.state==2)
					{
						
					}
					else if(SkillPageTopArea.state==3)
					{
						for(int i = 0;i<9;i++)
						{
							w.remove(SkillPageLeftArea.activemove[i]);
						}
						for(int i = 0;i<8;i++)
						{
							w.remove(SkillPageLeftArea.inactivemove[i]);
						}						
					}

					w.remove(skillpage);
					skillpageshow=false;
				}
				break;
			case KeyEvent.VK_C:
				if(creatorshow==false)
				{
					if(TaskRightInformationArea.mainset[8]==true)
					{
						TaskRightInformationArea.mainfin[8]=true;
					}

					w.add(creatorlist,0);
					creatorshow=true;
				}
				else
				{
					w.remove(creatorlist);
					creatorshow=false;
				}
			break;		
			case KeyEvent.VK_ESCAPE:
					System.exit(0);
				break;	
	
			default:
				break;
				
		}
	}

	public void keyReleased(KeyEvent e) {
		int select= e.getKeyCode();
		switch(select)
		{
			case KeyEvent.VK_UP:
				Player.up=false;
				Player.down=false;
				Player.left=false;
				Player.right=false;
				break;
			case KeyEvent.VK_DOWN:
				Player.up=false;
				Player.down=false;
				Player.left=false;
				Player.right=false;
				break;
			case KeyEvent.VK_LEFT:
				Player.up=false;
				Player.down=false;
				Player.left=false;
				Player.right=false;
				break;
			case KeyEvent.VK_RIGHT:
				Player.up=false;
				Player.down=false;
				Player.left=false;
				Player.right=false;
				break;
			default:	
				break;
				
		}
	}
	
	public static void setgameui(GameUI t) {
		PanelListenner.t=t;
	}
	
	public static void setdialog(JDialog t) {
		PanelListenner.s=t;
	}
	
	public static void setplaying(Playing t) {
		PanelListenner.w=t;
	}
	
	
	public static void setinformationwindow(InformationWindow t) {
		informationwindow=t;
	}
	
	public static void setminimap(MiniMap t) {
		minimap=t;
	}
	
	public static void settasksystem(TaskSystem t) {
		tasksystem=t;
	}
	
	public static void setplayerabilitysystem(PlayerAbilitySystem t) {
		playerabilitysystem=t;
	}
}

class PanelListennertalk extends KeyAdapter{
	static int index=0,decode=0;
	int x=0;
	
	public void keyPressed(KeyEvent e) {
		int select= e.getKeyCode();
		switch(select)
		{
			case KeyEvent.VK_Z:
				
				if(index==0)
				{
					PanelListenner.playerinformationvalue.setVisible(true);
					PanelListenner.experiencevalue.setVisible(true);
					PanelListenner.skilldisplayfield.setVisible(true);
					PanelListenner.skilldisplaysubfield.setVisible(true);
					PanelListenner.playersubability.setVisible(true);
					PanelListenner.functionlist.setVisible(true);
					PanelListenner.tasksystem.setVisible(true);
					PanelListenner.informationwindow.setVisible(true);
					PanelListenner.minimap.setVisible(true);
					PanelListenner.nowmapinfo.setVisible(true);
					PanelListenner.playerabilitysystem.setVisible(true);
					PanelListenner.playerequipmentinfo.setVisible(true);
					PanelListenner.skillpage.setVisible(true);
					PanelListenner.creatorlist.setVisible(true);
					PanelListenner.inventory.setVisible(true);
					PanelListenner.settinginfo.setVisible(true);
					PanelListenner.imageshowarea.setVisible(true);	
					PanelListenner.w.removeKeyListener(this);
					PanelListenner.w.addKeyListener(SkillImage.plt);
					PanelListenner.w.remove(PanelListenner.npcimagearea);
					PanelListenner.w.remove(PanelListenner.talkwindow);
				}
				else if(decode==343110)
				{
					if(TaskRightInformationArea.mainset[0]==true && TaskRightInformationArea.mainfin[0]==false)
					{
						if(index==1)
						{
						String s = PanelListenner.informationwindow.getText();
						if(!s.equals(""))
						s = s + "\n";
						
						PanelListenner.talkwindow.talk.setText("春暮鎮嚮導：\n   我是春暮鎮嚮導∼\n   "
								+ "是負責協助剛來到這個城鎮的人們∼\n   有任何困難都可以向我提出哦....");
						s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[0] + "\n獲得了500金錢600經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[1];
						PanelListenner.informationwindow.setText(s);
						Playing.playerexperience+=600;
						InventoryGoldArea.playercoin+=500;
						TaskRightInformationArea.mainfin[0]=true;
						NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[0]);
						AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[0]);
						//NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[1]);
						TaskRightInformationArea.mainset[1]=true;
						//Playing.playerexperience = Playing.demandexperience;		
						index--;
						}
					}
				}
				
				/*
				if(index==0)
				{
					if(TaskRightInformationArea.mainset[16]==true && TaskRightInformationArea.mainfin[16]==true)
					{
						Playing.npccor[0][7]=999900;
						Playing.IsRun[0][11][33]=1;
						Playing.npccor[3][0]=3918;
						Playing.npctoward[3][0]=4;
						Playing.IsRun[3][18][39]=3;
					}
					if(decode==391813 && PanelListenner.op==true)
					{
						JLabel t = new JLabel();
						String s1 = "/ListIcon/t.png";
						URL url = getClass().getResource(s1);
						try {
							t.setIcon(new ImageIcon(ImageIO.read(url)));
						} catch (IOException e1) {
							e1.printStackTrace();
						}
						PanelListenner.op=false;
						t.setBounds(150, 0, 900, 9000);
						PanelListenner.w.add(t,0);
						new Thread(new Runnable() {
							public void run() {
								while(true)
								{
									PanelListenner.playerinformationvalue.setVisible(false);
									PanelListenner.experiencevalue.setVisible(false);
									PanelListenner.skilldisplayfield.setVisible(false);
									PanelListenner.skilldisplaysubfield.setVisible(false);
									PanelListenner.playersubability.setVisible(false);
									PanelListenner.functionlist.setVisible(false);
									PanelListenner.tasksystem.setVisible(false);
									PanelListenner.informationwindow.setVisible(false);
									PanelListenner.minimap.setVisible(false);
									PanelListenner.nowmapinfo.setVisible(false);
									PanelListenner.playerabilitysystem.setVisible(false);
									PanelListenner.playerequipmentinfo.setVisible(false);
									PanelListenner.skillpage.setVisible(false);
									PanelListenner.creatorlist.setVisible(false);
									PanelListenner.inventory.setVisible(false);
									PanelListenner.settinginfo.setVisible(false);
									PanelListenner.imageshowarea.setVisible(false);		
									PanelListenner.w.remove(PanelListenner.npcimagearea);
									PanelListenner.w.remove(PanelListenner.talkwindow);
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
								x = x-1;
								t.setBounds(150, x, 900, 9000);
								 if(x==-8232)
								 {
										try {
											Thread.sleep(5000);
										} catch (InterruptedException e) {
											e.printStackTrace();
										}
										PanelListenner.w.remove(t);
										PanelListenner.playerinformationvalue.setVisible(true);
										PanelListenner.experiencevalue.setVisible(true);
										PanelListenner.skilldisplayfield.setVisible(true);
										PanelListenner.skilldisplaysubfield.setVisible(true);
										PanelListenner.playersubability.setVisible(true);
										PanelListenner.functionlist.setVisible(true);
										PanelListenner.tasksystem.setVisible(true);
										PanelListenner.informationwindow.setVisible(true);
										PanelListenner.minimap.setVisible(true);
										PanelListenner.nowmapinfo.setVisible(true);
										PanelListenner.playerabilitysystem.setVisible(true);
										PanelListenner.playerequipmentinfo.setVisible(true);
										PanelListenner.skillpage.setVisible(true);
										PanelListenner.creatorlist.setVisible(true);
										PanelListenner.inventory.setVisible(true);
										PanelListenner.settinginfo.setVisible(true);
										PanelListenner.imageshowarea.setVisible(true);	
										//PanelListenner.w.removeKeyListener(this);
										PanelListenner.w.addKeyListener(SkillImage.plt);
										PanelListenner.w.remove(PanelListenner.npcimagearea);
										PanelListenner.w.remove(PanelListenner.talkwindow);

										break;
								 }
								}
							}
						}).start();

					}
					PanelListenner.playerinformationvalue.setVisible(true);
					PanelListenner.experiencevalue.setVisible(true);
					PanelListenner.skilldisplayfield.setVisible(true);
					PanelListenner.skilldisplaysubfield.setVisible(true);
					PanelListenner.playersubability.setVisible(true);
					PanelListenner.functionlist.setVisible(true);
					PanelListenner.tasksystem.setVisible(true);
					PanelListenner.informationwindow.setVisible(true);
					PanelListenner.minimap.setVisible(true);
					PanelListenner.nowmapinfo.setVisible(true);
					PanelListenner.playerabilitysystem.setVisible(true);
					PanelListenner.playerequipmentinfo.setVisible(true);
					PanelListenner.skillpage.setVisible(true);
					PanelListenner.creatorlist.setVisible(true);
					PanelListenner.inventory.setVisible(true);
					PanelListenner.settinginfo.setVisible(true);
					PanelListenner.imageshowarea.setVisible(true);	
					PanelListenner.w.removeKeyListener(this);
					PanelListenner.w.addKeyListener(SkillImage.plt);
					PanelListenner.w.remove(PanelListenner.npcimagearea);
					PanelListenner.w.remove(PanelListenner.talkwindow);
				}

				
				if(decode==392610)
				{
					if(TaskRightInformationArea.mainset[0]==true && TaskRightInformationArea.mainfin[0]==false)
					{
						if(index==1)
						{
						String s = PanelListenner.informationwindow.getText();
						if(!s.equals(""))
						s = s + "\n";
						PanelListenner.talkwindow.talk.setText("遊戲大使：\n   我是遊戲大使∼"
								+ "是負責協助這個世界的人\n   們而存在接下來我會一一向您解說這個世\n   界.........");
						s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[0] + "\n獲得了500金錢600經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[1];
						PanelListenner.informationwindow.setText(s);
						Playing.playerexperience+=600;
						InventoryGoldArea.playercoin+=500;
						TaskRightInformationArea.mainfin[0]=true;
						NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[0]);
						AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[0]);
						NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[1]);
						TaskRightInformationArea.mainset[1]=true;
						//Playing.playerexperience = Playing.demandexperience;
		
						index--;
						}
					}
					if(TaskRightInformationArea.mainset[1]==true && TaskRightInformationArea.mainfin[1]==false)
					{
						if(index==16)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   很多年前，本來這個世界的人都如\n   "
							+ "平常一樣，和平安寧的生活著\n");
							index--;
						}
						else if(index==15)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   但是有一天，不屬於這個世界上勢力\n"
									+ "   的敵人出現了\n");
							index--;
						}
						else if(index==14)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   他們有著很強大的戰鬥力並且給這個\n"
									+ "   世界帶來了近乎毀滅性的破壞\n");
							index--;
						}
						else if(index==13)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   已經有多個國家被消滅了，有些強國\n"
									+ "   聯合起來形成世界政府對抗敵人但是\n   起不了多大的作用");
							index--;
						}
						else if(index==12)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   最後，世界政府聯合了各國並且躲在世\n"
									+ "   界的盡頭才得以保住性命\n");
							index--;
						}
						else if(index==11)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   他們形成了最後的防線是為了培養出戰\n"
									+ "   士對抗敵人把世界奪回\n");
							index--;
						}
						else if(index==10)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   然而敵人並沒有放棄過可以殲滅世界政\n"
									+ "   府的機會，不斷的進攻世界政府\n");
							index--;
						}
						else if(index==9)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   在這時，有五個領悟了一切真理的人掌\n"
									+ "   握了世界的五大元素，形成強大的戰力\n   逆轉了整個戰局");
							index--;
						}
						else if(index==8)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   本來是同心協力的他們因為意見的分歧\n"
									+ "   每個人都想當領導人，使得原本聯合的\n   戰力分裂了");
							index--;
						}
						else if(index==7)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   至此，近乎被殲滅的敵人因為這樣得以\n"
									+ "   苟活了下來，雖然戰力被削弱但是還有\n   足夠的戰力殲滅人類");
							index--;
						}
						else if(index==6)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   各自為政的五個人被稱為「五魂」，他\n"
									+ "   們都想殲滅對方並且統一天下，但是都\n   不敢貿然進攻，因為害怕被趁虛而入");
							index--;
						}
						else if(index==5)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   世界政府多次勸解他們，但是他們始終\n"
									+ "   不肯和解\n");
							index--;
						}
						else if(index==4)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   在這情況下，世界暫時穩定了下來，世\n"
									+ "   界被分為七個國家，分別是世界政府\n   的共和國，五魂的各別領土");
							index--;
						}
						else if(index==3)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   以及不屬於這世界的勢力所征服的領土\n"
									+ "   「虛靈界」\n");
							index--;
						}
						else if(index==2)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   共和國的人民和五魂的人有著密切接觸\n"
									+ "   但是五魂國之間並沒有任何聯繫\n");
							index--;
						}
						else if(index==1)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   世界政府為了使世界達到平衡，於是與\n"
									+ "   五魂國簽訂了一份條約，讓這個世界的\n   各種勢力達到一種表面上的平衡");
							index--;
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[1] + "\n獲得了600金錢700經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[2];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=700;
							InventoryGoldArea.playercoin+=600;
							TaskRightInformationArea.mainfin[1]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[1]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[1]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[2]);
							//TaskRightInformationArea.mainset[2]=true;
						}
					}
					else if(TaskRightInformationArea.mainfin[1]==true && TaskRightInformationArea.mainset[2]==false && TaskRightInformationArea.mainfin[2]==false)
					{
						if(index==2)
						{
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   接下來為了讓妳快速適應這個世界"
									+ "的生存\n   法則，我們將進行一系列簡單的新手操作\n   唷∼");
							index--;
						}
						if(index==1)
						{
						String s = PanelListenner.informationwindow.getText();
						if(!s.equals(""))
						s = s + "\n";
						PanelListenner.talkwindow.talk.setText("遊戲大使：\n   首先先打開人物資訊的畫面吧！\n"
								+ "   快捷鍵是鍵盤上的P唷∼打開後好好看\n   過之後再來找我吧！");
						s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[2] + "\n獲得了 600金錢 700經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[3];
						PanelListenner.informationwindow.setText(s);
						Playing.playerexperience+=700;
						InventoryGoldArea.playercoin+=600;
						//TaskRightInformationArea.mainfin[2]=true;
						NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[2]);
						AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[2]);
						NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[3]);
						TaskRightInformationArea.mainset[2]=true;
						//Playing.playerexperience = Playing.demandexperience;
		
						index--;
						}
					}
					else if(TaskRightInformationArea.mainset[2]==true && TaskRightInformationArea.mainfin[2]==true && TaskRightInformationArea.mainset[3]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   接下來打開道具欄的畫面吧！\n"
									+ "   快捷鍵是鍵盤上的X唷∼打開後好好看\n   過之後再來找我吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[3] + "\n獲得了600金錢700經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[4];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=700;
							InventoryGoldArea.playercoin+=600;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[3]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[3]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[4]);
							TaskRightInformationArea.mainset[3]=true;
							//Playing.playerexperience = Playing.demandexperience;
							index--;
						}
					}
					else if(TaskRightInformationArea.mainset[3]==true && TaskRightInformationArea.mainfin[3]==true && TaskRightInformationArea.mainset[4]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   接下來打開技能頁這個畫面吧！\n"
									+ "   快捷鍵是鍵盤上的H唷∼打開後好好看\n   過之後再來找我吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[4] + "\n獲得了600金錢700經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[5];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=700;
							InventoryGoldArea.playercoin+=600;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[4]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[4]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[5]);
							TaskRightInformationArea.mainset[4]=true;
							//Playing.playerexperience = Playing.demandexperience;
							index--;
						}
					}
					else if(TaskRightInformationArea.mainset[4]==true && TaskRightInformationArea.mainfin[4]==true && TaskRightInformationArea.mainset[5]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   接下來打開人物素質的畫面吧！\n"
									+ "   快捷鍵是鍵盤上的A唷∼打開後好好看\n   過之後再來找我吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[5] + "\n獲得了600金錢700經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[6];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=700;
							InventoryGoldArea.playercoin+=600;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[5]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[5]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[6]);
							TaskRightInformationArea.mainset[5]=true;
							//Playing.playerexperience = Playing.demandexperience;
							index--;
						}
					}
					else if(TaskRightInformationArea.mainset[5]==true && TaskRightInformationArea.mainfin[5]==true && TaskRightInformationArea.mainset[6]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   接下來打開任務這個畫面吧！\n"
									+ "   快捷鍵是鍵盤上的R唷∼打開後好好看\n   過之後再來找我吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[6] + "\n獲得了600金錢700經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[7];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=700;
							InventoryGoldArea.playercoin+=600;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[6]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[6]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[7]);
							TaskRightInformationArea.mainset[6]=true;
							//Playing.playerexperience = Playing.demandexperience;
							index--;
						}
					}
					else if(TaskRightInformationArea.mainset[6]==true && TaskRightInformationArea.mainfin[6]==true && TaskRightInformationArea.mainset[7]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   接下來查看一下設定畫面吧！\n"
									+ "   快捷鍵是鍵盤上的S唷∼打開後好好看\n   過之後再來找我吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[7] + "\n獲得了600金錢700經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[8];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=700;
							InventoryGoldArea.playercoin+=600;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[7]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[7]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[8]);
							TaskRightInformationArea.mainset[7]=true;
							//Playing.playerexperience = Playing.demandexperience;
							index--;
						}
					}
					else if(TaskRightInformationArea.mainset[7]==true && TaskRightInformationArea.mainfin[7]==true && TaskRightInformationArea.mainset[8]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   最後查看開發這世界的人們是哪些吧！\n"
									+ "   快捷鍵是鍵盤上的C唷∼打開後查看一下\n   便可以來找我了哦∼");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[8] + "\n獲得了 600金錢700經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[9];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=700;
							InventoryGoldArea.playercoin+=600;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[8]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[8]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[9]);
							TaskRightInformationArea.mainset[8]=true;
							//Playing.playerexperience = Playing.demandexperience;
							index--;
						}
					}
					else if(TaskRightInformationArea.mainset[8]==true && TaskRightInformationArea.mainfin[8]==true && TaskRightInformationArea.mainset[9]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   開發者們就在我的周圍而已唷！\n"
									+ "   去找他們講講話吧∼");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[9] + "\n獲得了600金錢700經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[10];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=700;
							InventoryGoldArea.playercoin+=600;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[9]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[9]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[10]);
							TaskRightInformationArea.mainset[9]=true;
							//Playing.playerexperience = Playing.demandexperience;
							index--;
						}
					}
					if(TaskRightInformationArea.mainset[15]==true && TaskRightInformationArea.mainfin[15]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("遊戲大使：\n   根據我的消息來源∼似乎有一個陌生"
									+ "\n   男子在一個地方等著您\n   您去確認看看他的蹤影吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[16] + "\n獲得了10000金錢12000經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[17]
									+ "\n已接受任務[職]" + TaskRightInformationArea.carn[0];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=12000;
							InventoryGoldArea.playercoin+=10000;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[16]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[16]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[17]);
							
							//NowTaskLeftArea.SubTaskModel.addElement(TaskRightInformationArea.subn[0]);
							
							NowTaskLeftArea.CareerTaskModel.addElement(TaskRightInformationArea.carn[0]);

							TaskRightInformationArea.mainfin[15]=true;
							TaskRightInformationArea.mainset[16]=true;
							//TaskRightInformationArea.subset[0]=true;
							TaskRightInformationArea.carset[0]=true;
							index--;
						}
					}

					else
					{
						
					}
				}
				else if(decode==402610)
				{
					if(TaskRightInformationArea.mainset[9]==true && TaskRightInformationArea.mainfin[9]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("開發者蟒蛇：\n   既然已經拜訪過我了，那下一個您去拜訪"
									+ "\n   開發者萬花筒六道輪迴吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[10] + "\n獲得了2000金錢3000經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[11];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=3000;
							InventoryGoldArea.playercoin+=2000;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[10]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[10]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[11]);
							TaskRightInformationArea.mainfin[9]=true;
							TaskRightInformationArea.mainset[10]=true;
							index--;
						}
					}
				}
				else if(decode==412610)
				{
					if(TaskRightInformationArea.mainset[10]==true && TaskRightInformationArea.mainfin[10]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("開發者萬花筒六道輪迴：\n   既然已經拜訪過我了，那下一個您去"
									+ "\n   拜訪開發者紫水晶吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[11] + "\n獲得了2000金錢3000經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[12];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=3000;
							InventoryGoldArea.playercoin+=2000;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[11]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[11]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[12]);
							TaskRightInformationArea.mainfin[10]=true;
							TaskRightInformationArea.mainset[11]=true;
							index--;
						}
					}
				}
				else if(decode==422610)
				{
					if(TaskRightInformationArea.mainset[11]==true && TaskRightInformationArea.mainfin[11]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("開發者紫水晶：\n   既然已經拜訪過我了，那下一個您去拜訪"
									+ "\n   開發者哦莫吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[12] + "\n獲得了2000金錢3000經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[13];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=3000;
							InventoryGoldArea.playercoin+=2000;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[12]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[12]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[13]);
							TaskRightInformationArea.mainfin[11]=true;
							TaskRightInformationArea.mainset[12]=true;
							index--;
						}
					}
					else
					{
						if(index==1)
						{
							PanelListenner.talkwindow.talk.setText("開發者紫水晶：\n   那永恆長眠的並非亡者"
									+ "\n   在奇妙的萬古之中\n   即便死亡亦會消逝");
							index--;
						}
					}
				}
				else if(decode==422910)
				{
					if(TaskRightInformationArea.mainset[12]==true && TaskRightInformationArea.mainfin[12]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("開發者哦莫：\n   既然已經拜訪過我了，那下一個您去拜訪"
									+ "\n   開發者桐人吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[13] + "\n獲得了2000金錢3000經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[14];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=3000;
							InventoryGoldArea.playercoin+=2000;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[13]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[13]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[14]);
							TaskRightInformationArea.mainfin[12]=true;
							TaskRightInformationArea.mainset[13]=true;
							index--;
						}
					}
				}
				else if(decode==423010)
				{
					if(TaskRightInformationArea.mainset[13]==true && TaskRightInformationArea.mainfin[13]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("開發者桐人：\n   既然已經拜訪過我了，那下一個您去拜訪"
									+ "\n   開發者惡魔吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[14] + "\n獲得了2000金錢3000經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[15];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=3000;
							InventoryGoldArea.playercoin+=2000;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[14]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[14]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[15]);
							TaskRightInformationArea.mainfin[13]=true;
							TaskRightInformationArea.mainset[14]=true;

							index--;
						}
					}
					else
					{
						if(index==1)
						{
							PanelListenner.talkwindow.talk.setText("開發者桐人：\n   西瓜榴槤雞！");
							index--;
						}
					}
				}
				else if(decode==423110)
				{
					if(TaskRightInformationArea.mainset[14]==true && TaskRightInformationArea.mainfin[14]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("開發者惡魔：\n   既然已經拜訪過我了，那下一個您去拜訪"
									+ "\n   開發者雪人胖胖吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[15] + "\n獲得了2000金錢3000經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[16];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=3000;
							InventoryGoldArea.playercoin+=2000;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[15]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[15]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[18]);
							TaskRightInformationArea.mainfin[14]=true;
							TaskRightInformationArea.mainset[17]=true;

							index--;
						}
					}
				}
				else if(decode==432710)
				{
					if(TaskRightInformationArea.mainset[17]==true && TaskRightInformationArea.mainfin[17]==false)
					{
						if(index==1)
						{
							String s = PanelListenner.informationwindow.getText();
							if(!s.equals(""))
							s = s + "\n";
							PanelListenner.talkwindow.talk.setText("開發者雪人胖胖：\n   您已拜訪完所有的開發者，去向"
									+ "\n   遊戲大使進行回報吧！");
							s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[18] + "\n獲得了2000金錢3000經驗值！\n已接受任務[主]" + TaskRightInformationArea.mainn[16];
							PanelListenner.informationwindow.setText(s);
							Playing.playerexperience+=3000;
							InventoryGoldArea.playercoin+=2000;
							//TaskRightInformationArea.mainfin[2]=true;
							NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[18]);
							AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[18]);
							NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[16]);
							TaskRightInformationArea.mainfin[17]=true;
							TaskRightInformationArea.mainset[15]=true;

							index--;
						}
					}

				}
				else if(decode==331110)
				{
					if(TaskRightInformationArea.mainset[16]==true && TaskRightInformationArea.mainfin[16]==false)
					{
						if(index==1)
						{
						String s = PanelListenner.informationwindow.getText();
						if(!s.equals(""))
						s = s + "\n";
						PanelListenner.talkwindow.talk.setText("吳卓俊教授：\n   我的名字是吳卓俊∼"
								+ "\n   是一位教授，我相信我們之後\n   一定會在某處相見的....");
						s = s +"已完成任務[主]" + TaskRightInformationArea.mainn[17] + "\n獲得了20000金錢30000經驗值！"
								+ "\n已接受任務[支]" + TaskRightInformationArea.subn[0];
						PanelListenner.informationwindow.setText(s);
						Playing.playerexperience+=30000;
						InventoryGoldArea.playercoin+=20000;
						//TaskRightInformationArea.mainfin[2]=true;
						NowTaskLeftArea.MainTaskModel.removeElement(TaskRightInformationArea.mainn[17]);
						AlreadyTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[17]);
						//NowTaskLeftArea.MainTaskModel.addElement(TaskRightInformationArea.mainn[17]);
						NowTaskLeftArea.SubTaskModel.addElement(TaskRightInformationArea.subn[0]);
						TaskRightInformationArea.subset[0]=true;
						TaskRightInformationArea.mainfin[16]=true;
						index--;
						}
					}

				}
*/
			break;	
			
		}
		
	}
}

class Inventory extends JPanel{
	static int itemx=500,itemy=160,clickx,clicky; 
	Inventory(){
		super();
		this.setLayout(null);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		MovableAreaAndClose movableareaandclose = new MovableAreaAndClose();
		JLabel background = new JLabel();
		InventoryTopArea inventorytoparea = new InventoryTopArea();
		InventoryCenterAreaBase inventorycenterareabase = new InventoryCenterAreaBase();
		InventoryGoldArea inventorygoldarea = new InventoryGoldArea();
		String s = "/Bag/bk.png";
		URL url = getClass().getResource(s);
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {

			e1.printStackTrace();
		}
		
		inventorytoparea.inventorycardlayout=inventorycenterareabase.inventorycardlayout;
		inventorytoparea.inventorycenterareabase=inventorycenterareabase;
		movableareaandclose.setBounds(0, 0, 240, 25);
		movableareaandclose.closebtn.setBounds(200, 0, 40, 25);
		//movableareaandclose.closebtn.setText("x");
		//movableareaandclose.closebtn.setFont(new Font("標楷體",0,10));
		background.setBounds(0, 0, 240, 330);
		inventorytoparea.setBounds(5,25,230,40);
		inventorycenterareabase.setBounds(5, 65, 230, 230);
		inventorygoldarea.setBounds(5, 295, 230, 30);
		
		this.add(background);
		background.add(movableareaandclose);
		background.add(inventorytoparea);
		background.add(inventorycenterareabase);
		background.add(inventorygoldarea);
		
		movableareaandclose.closebtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PanelListenner.itemshow=false;
				PanelListenner.w.remove(Inventory.this);
			}

		});
		
		movableareaandclose.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				clickx=e.getX();
				clicky=e.getY();
			}
		});
		
		movableareaandclose.addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				int x=e.getX();
				int y=e.getY();
				if((itemx+x-clickx)>=0 && (itemx+x-clickx)+240<=1200 && (itemy+y-clicky)>=0 && (itemy+y-clicky)+330<=768)
				{
					Inventory.this.setBounds(itemx=itemx+x-clickx, itemy=itemy+y-clicky, 240, 330);
				}
				else if((itemx+x-clickx)<0)
				{
					if((itemy+y-clicky)>=0 && (itemy+y-clicky)+330<=768)
					{
						Inventory.this.setBounds(itemx=0, itemy=itemy+y-clicky, 240, 330);
					}
					else if((itemy+y-clicky)<0)
					{
						Inventory.this.setBounds(itemx=0, itemy=0, 240, 330);
					}
					else if((itemy+y-clicky)+330>768)
					{
						Inventory.this.setBounds(itemx=0, itemy=438, 240, 330);
					}
				}
				else if((itemx+x-clickx)+240>1200)
				{
					if((itemy+y-clicky)>=0 && (itemy+y-clicky)+330<=768)
					{
						Inventory.this.setBounds(itemx=960, itemy=itemy+y-clicky, 240, 330);
					}
					else if((itemy+y-clicky)<0)
					{
						Inventory.this.setBounds(itemx=960, itemy=0, 240, 330);
					}
					else if((itemy+y-clicky)+330>768)
					{
						Inventory.this.setBounds(itemx=960, itemy=438, 240, 330);
					}
				}
				
				else if((itemy+y-clicky)<0)
				{
					if((itemx+x-clickx)>=0)
					Inventory.this.setBounds(itemx=itemx+x-clickx, itemy=0, 240, 330);
				}
				else if((itemy+y-clicky)+330>768)
				{
					if((itemx+x-clickx)+240<=1200)
					Inventory.this.setBounds(itemx=itemx+x-clickx, itemy=438, 240, 330);					
				}
				
			}
		});
	}
}

class InventoryTopArea extends JPanel{
	InventoryCenterAreaBase inventorycenterareabase;
	CardLayout inventorycardlayout;
	Image eqimage[] = new Image[2];
	Image coimage[] = new Image[2];
	Image itimage[] = new Image[2];
	Image spimage[] = new Image[2];
	InventoryTopArea(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JToggleButton equipmentbtn = new JToggleButton();
		JToggleButton consumptionbtn = new JToggleButton();
		JToggleButton itembtn = new JToggleButton();
		JToggleButton specialbtn = new JToggleButton();
		String s[] = new String[2];
		URL url[] = new URL[2];
		
		s[0]="/Bag/0-1.png";
		s[1]="/Bag/1-1.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		
		try {
			eqimage[0] = ImageIO.read(url[0]);
			eqimage[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	
		s[0]="/Bag/0-3.png";
		s[1]="/Bag/1-3.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		
		try {
			coimage[0] = ImageIO.read(url[0]);
			coimage[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		s[0]="/Bag/0-2.png";
		s[1]="/Bag/1-2.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		
		try {
			itimage[0] = ImageIO.read(url[0]);
			itimage[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		s[0]="/Bag/0-4.png";
		s[1]="/Bag/1-4.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		
		try {
			spimage[0] = ImageIO.read(url[0]);
			spimage[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		equipmentbtn.setFont(new Font("標楷體",0,9));
		consumptionbtn.setFont(new Font("標楷體",0,9));
		itembtn.setFont(new Font("標楷體",0,9));
		specialbtn.setFont(new Font("標楷體",0,9));
		equipmentbtn.setBounds(0, 5, 55, 35);
		consumptionbtn.setBounds(55, 5, 55, 35);
		itembtn.setBounds(110, 5, 55, 35);
		specialbtn.setBounds(165, 5, 55, 35);
		
		equipmentbtn.setSelected(true);
		equipmentbtn.setIcon(new ImageIcon(eqimage[1]));
		consumptionbtn.setIcon(new ImageIcon(coimage[0]));
		itembtn.setIcon(new ImageIcon(itimage[0]));
		specialbtn.setIcon(new ImageIcon(spimage[0]));
		
		equipmentbtn.setFocusable(false);
		equipmentbtn.setBorderPainted(false);
		equipmentbtn.setFocusPainted(false);
		equipmentbtn.setContentAreaFilled(false);
		consumptionbtn.setFocusable(false);
		consumptionbtn.setBorderPainted(false);
		consumptionbtn.setFocusPainted(false);
		consumptionbtn.setContentAreaFilled(false);
		itembtn.setFocusable(false);
		itembtn.setBorderPainted(false);
		itembtn.setFocusPainted(false);
		itembtn.setContentAreaFilled(false);
		specialbtn.setFocusable(false);
		specialbtn.setBorderPainted(false);
		specialbtn.setFocusPainted(false);
		specialbtn.setContentAreaFilled(false);
		this.add(equipmentbtn);
		this.add(consumptionbtn);
		this.add(itembtn);
		this.add(specialbtn);
		
		equipmentbtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(equipmentbtn.isSelected()==false && consumptionbtn.isSelected()==false && itembtn.isSelected()==false && specialbtn.isSelected()==false)
				{
					equipmentbtn.setSelected(true);
				}
				if(equipmentbtn.isSelected())
				{
					equipmentbtn.setIcon(new ImageIcon(eqimage[1]));
					consumptionbtn.setIcon(new ImageIcon(coimage[0]));
					itembtn.setIcon(new ImageIcon(itimage[0]));
					specialbtn.setIcon(new ImageIcon(spimage[0]));

					consumptionbtn.setSelected(false);
					itembtn.setSelected(false);
					specialbtn.setSelected(false);
					inventorycardlayout.show(inventorycenterareabase, "equipment");
				}
			}
		});

		consumptionbtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(equipmentbtn.isSelected()==false && consumptionbtn.isSelected()==false && itembtn.isSelected()==false && specialbtn.isSelected()==false)
				{
					consumptionbtn.setSelected(true);
				}
				if(consumptionbtn.isSelected())
				{
					equipmentbtn.setIcon(new ImageIcon(eqimage[0]));
					consumptionbtn.setIcon(new ImageIcon(coimage[1]));
					itembtn.setIcon(new ImageIcon(itimage[0]));
					specialbtn.setIcon(new ImageIcon(spimage[0]));

					equipmentbtn.setSelected(false);
					itembtn.setSelected(false);
					specialbtn.setSelected(false);
					inventorycardlayout.show(inventorycenterareabase, "consumption");
				}
				
			}
		});

		itembtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(equipmentbtn.isSelected()==false && consumptionbtn.isSelected()==false && itembtn.isSelected()==false && specialbtn.isSelected()==false)
				{
					itembtn.setSelected(true);
				}
				if(itembtn.isSelected())
				{
					equipmentbtn.setIcon(new ImageIcon(eqimage[0]));
					consumptionbtn.setIcon(new ImageIcon(coimage[0]));
					itembtn.setIcon(new ImageIcon(itimage[1]));
					specialbtn.setIcon(new ImageIcon(spimage[0]));

					equipmentbtn.setSelected(false);
					consumptionbtn.setSelected(false);
					specialbtn.setSelected(false);
					inventorycardlayout.show(inventorycenterareabase, "item");
				}
			
			}
		});

		specialbtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(equipmentbtn.isSelected()==false && consumptionbtn.isSelected()==false && itembtn.isSelected()==false && specialbtn.isSelected()==false)
				{
					specialbtn.setSelected(true);
				}
				if(specialbtn.isSelected())
				{
					equipmentbtn.setIcon(new ImageIcon(eqimage[0]));
					consumptionbtn.setIcon(new ImageIcon(coimage[0]));
					itembtn.setIcon(new ImageIcon(itimage[0]));
					specialbtn.setIcon(new ImageIcon(spimage[1]));

					equipmentbtn.setSelected(false);
					consumptionbtn.setSelected(false);
					itembtn.setSelected(false);
					inventorycardlayout.show(inventorycenterareabase, "special");
				}
				
			}
		});

	}
}

class InventoryCenterAreaBase extends JPanel{
	CardLayout inventorycardlayout;
	InventoryCenterAreaBase(){
		super();
		this.setLayout(new CardLayout());
		this.setOpaque(false);
		inventorycardlayout=(CardLayout)this.getLayout();
		InventoryEquipment inventoryequipment = new InventoryEquipment();
		InventoryConsumption inventoryconsumption = new InventoryConsumption();
		InventoryItem inventoryitem = new InventoryItem();
		InventorySpecial inventoryspecial = new InventorySpecial();
		
		this.add(inventoryequipment, "equipment");
		this.add(inventoryconsumption, "consumption");
		this.add(inventoryitem, "item");
		this.add(inventoryspecial, "special");
		
		
	}
}

class InventoryEquipment extends JPanel{
	InventoryEquipment(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//this.setBackground(new Color(140,140,140));
		JLabel item[] = new JLabel[25];
		
		for(int i=0;i<25;i++)
		{
			item[i]=new JLabel();
			item[i].setBounds(5+45*(i%5), 5+45*(i/5), 40, 40);
			item[i].setOpaque(true);
			item[i].setBackground(new Color(255,255,255));
			this.add(item[i]);
		}
	}
}

class InventoryConsumption extends JPanel{
	InventoryConsumption(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//this.setBackground(new Color(140,140,140));
		JLabel item[] = new JLabel[25];
		
		for(int i=0;i<25;i++)
		{
			item[i]=new JLabel();
			item[i].setBounds(5+45*(i%5), 5+45*(i/5), 40, 40);
			item[i].setOpaque(true);
			item[i].setBackground(new Color(255,255,255));
			this.add(item[i]);
		}

	}
}

class InventoryItem extends JPanel{
	InventoryItem(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//this.setBackground(new Color(140,140,140));
		JLabel item[] = new JLabel[25];
		
		for(int i=0;i<25;i++)
		{
			item[i]=new JLabel();
			item[i].setBounds(5+45*(i%5), 5+45*(i/5), 40, 40);
			item[i].setOpaque(true);
			item[i].setBackground(new Color(255,255,255));
			this.add(item[i]);
		}

	}
}

class InventorySpecial extends JPanel{
	InventorySpecial(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//this.setBackground(new Color(140,140,140));
		JLabel item[] = new JLabel[25];
		
		for(int i=0;i<25;i++)
		{
			item[i]=new JLabel();
			item[i].setBounds(5+45*(i%5), 5+45*(i/5), 40, 40);
			item[i].setOpaque(true);
			item[i].setBackground(new Color(255,255,255));
			this.add(item[i]);
		}

	}
}

class InventoryGoldArea extends JPanel{
	static long playercoin = 1000000;
	InventoryGoldArea(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//this.setBackground(new Color(230,230,230));
		JLabel coinicon = new JLabel();
		JTextField playercoincount = new JTextField("" + playercoin);
		String s = "/ListIcon/a8.png";
		URL url = getClass().getResource(s);
		try {
			coinicon.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}
		InformationPowerUpdate.playercoincount=playercoincount;
		coinicon.setBounds(10, 5, 20, 20);
		playercoincount.setBounds(40, 5, 170, 20);
		playercoincount.setBackground(new Color(255,255,255));
		playercoincount.setEditable(false);
		playercoincount.setFocusable(false);
		playercoincount.setFont(new Font("標楷體",1,14));
		playercoincount.setHorizontalAlignment(JTextField.RIGHT);
		this.add(coinicon);
		this.add(playercoincount);
	}
}

class SkillPage extends JPanel{
	static int skillpagex=350,skillpagey=200,clickx,clicky;
	static int skillpoint=0;
	SkillPage(){
		super();
		this.setLayout(null);
		JLabel background = new JLabel();
		MovableAreaAndClose movableareaandclose = new MovableAreaAndClose();
		SkillPageLeftArea skillpageleftarea = new SkillPageLeftArea();
		SkillPageTopArea skillpagetoparea = new SkillPageTopArea();
		SkillPageRightBase skillpagerightbase = new SkillPageRightBase();
		String s = "/SkillPage/bk.png";
		URL url = getClass().getResource(s);
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {

			e1.printStackTrace();
		}
		
		skillpagetoparea.skillpagerightcardlayout=skillpagerightbase.skillpagerightcardlayout;
		skillpagetoparea.skillpagerightbase=skillpagerightbase;
		movableareaandclose.setBounds(0, 0, 720, 25);
		movableareaandclose.closebtn.setBounds(680, 0, 40, 25);
		//movableareaandclose.closebtn.setText("x");
		//movableareaandclose.closebtn.setFont(new Font("標楷體",0,10));
		skillpageleftarea.setBounds(5, 25, 285, 420);
		skillpagetoparea.setBounds(290, 25, 425, 50);
		skillpagerightbase.setBounds(290, 75, 425, 370);
		
		background.add(movableareaandclose);
		background.add(skillpageleftarea);
		background.add(skillpagetoparea);
		background.add(skillpagerightbase);
		background.setBounds(0, 0, 720, 450);
		this.add(background);
		
		movableareaandclose.closebtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PanelListenner.skillpageshow=false;
				PanelListenner.w.remove(SkillPage.this);
				for(int i = 0;i<9;i++)
				{
					PanelListenner.w.remove(SkillPageLeftArea.activemove[i]);
				}
				for(int i = 0;i<8;i++)
				{
					PanelListenner.w.remove(SkillPageLeftArea.inactivemove[i]);
				}

			}

		});

		
		movableareaandclose.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				clickx=e.getX();
				clicky=e.getY();
			}
		});
		
		movableareaandclose.addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				int x=e.getX();
				int y=e.getY();
				if((skillpagex+x-clickx)>=0 && (skillpagex+x-clickx)+720<=1200 && (skillpagey+y-clicky)>=0 && (skillpagey+y-clicky)+450<=768)
				{	
					SkillPage.this.setBounds(skillpagex=skillpagex+x-clickx, skillpagey=skillpagey+y-clicky, 720, 450);
				}
				else if((skillpagex+x-clickx)<0)
				{
					if((skillpagey+y-clicky)>=0 && (skillpagey+y-clicky)+450<=768)
					SkillPage.this.setBounds(skillpagex=0, skillpagey=skillpagey+y-clicky, 720, 450);
					else if((skillpagey+y-clicky)<0)
					SkillPage.this.setBounds(skillpagex=0, skillpagey=0, 720, 450);
					else if((skillpagey+y-clicky)+450>768)
					SkillPage.this.setBounds(skillpagex=0, skillpagey=318, 720, 450);
				}
				else if((skillpagex+x-clickx)+720>1200)
				{
					if((skillpagey+y-clicky)>=0 && (skillpagey+y-clicky)+450<=768)
					SkillPage.this.setBounds(skillpagex=480, skillpagey=skillpagey+y-clicky, 720, 450);
					else if((skillpagey+y-clicky)<0)
					SkillPage.this.setBounds(skillpagex=480, skillpagey=0, 720, 450);
					else if((skillpagey+y-clicky)+450>768)
					SkillPage.this.setBounds(skillpagex=480, skillpagey=318, 720, 450);
				}
				else if((skillpagey+y-clicky)<0)
				{
					if((skillpagex+x-clickx)>=0 && (skillpagex+x-clickx)+720<=1200)
					SkillPage.this.setBounds(skillpagex=skillpagex+x-clickx, skillpagey=0, 720, 450);
				}
				else if((skillpagey+y-clicky)+450>768)
				{
					if((skillpagex+x-clickx)>=0 && (skillpagex+x-clickx)+200<=1200)
					SkillPage.this.setBounds(skillpagex=skillpagex+x-clickx, skillpagey=318, 720, 450);					
				}
				
				if(SkillPageTopArea.state==1)
				{
					SkillPageLeftArea.activemove[0].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.activemove[1].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.activemove[2].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.activemove[3].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.activemove[4].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.activemove[5].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.activemove[6].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.activemove[7].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+295, 40, 40);
					SkillPageLeftArea.activemove[8].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+365, 40, 40);
				
					SkillPageLeftArea.coractive[0][0]=SkillPage.skillpagex+360;
					SkillPageLeftArea.coractive[0][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.coractive[1][0]=SkillPage.skillpagex+300;
					SkillPageLeftArea.coractive[1][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.coractive[2][0]=SkillPage.skillpagex+420;
					SkillPageLeftArea.coractive[2][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.coractive[3][0]=SkillPage.skillpagex+600;
					SkillPageLeftArea.coractive[3][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.coractive[4][0]=SkillPage.skillpagex+360;
					SkillPageLeftArea.coractive[4][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.coractive[5][0]=SkillPage.skillpagex+480;
					SkillPageLeftArea.coractive[5][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.coractive[6][0]=SkillPage.skillpagex+540;
					SkillPageLeftArea.coractive[6][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.coractive[7][0]=SkillPage.skillpagex+660;
					SkillPageLeftArea.coractive[7][1]=SkillPage.skillpagey+295;
					SkillPageLeftArea.coractive[8][0]=SkillPage.skillpagex+480;
					SkillPageLeftArea.coractive[8][1]=SkillPage.skillpagey+365;

					SkillPageLeftArea.inactivemove[0].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.inactivemove[1].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.inactivemove[2].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.inactivemove[3].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+295, 40, 40);
					SkillPageLeftArea.inactivemove[4].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[5].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[6].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.inactivemove[7].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+365, 40, 40);

					SkillPageLeftArea.corinactive[0][0]=SkillPage.skillpagex+600;
					SkillPageLeftArea.corinactive[0][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.corinactive[1][0]=SkillPage.skillpagex+600;
					SkillPageLeftArea.corinactive[1][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.corinactive[2][0]=SkillPage.skillpagex+420;
					SkillPageLeftArea.corinactive[2][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.corinactive[3][0]=SkillPage.skillpagex+360;
					SkillPageLeftArea.corinactive[3][1]=SkillPage.skillpagey+295;
					SkillPageLeftArea.corinactive[4][0]=SkillPage.skillpagex+480;
					SkillPageLeftArea.corinactive[4][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[5][0]=SkillPage.skillpagex+540;
					SkillPageLeftArea.corinactive[5][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[6][0]=SkillPage.skillpagex+660;
					SkillPageLeftArea.corinactive[6][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.corinactive[7][0]=SkillPage.skillpagex+540;
					SkillPageLeftArea.corinactive[7][1]=SkillPage.skillpagey+365;
				}
				else if(SkillPageTopArea.state==3)
				{
					SkillPageLeftArea.activemove[0].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.activemove[1].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+295, 40, 40);
					SkillPageLeftArea.activemove[2].setBounds(SkillPage.skillpagex+372, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.activemove[3].setBounds(SkillPage.skillpagex+444, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.activemove[4].setBounds(SkillPage.skillpagex+516, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.activemove[5].setBounds(SkillPage.skillpagex+588, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.activemove[6].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+365, 40, 40);
					SkillPageLeftArea.activemove[7].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+365, 40, 40);
					SkillPageLeftArea.activemove[8].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+365, 40, 40);
					
					SkillPageLeftArea.coractive[0][0]=SkillPage.skillpagex+300;
					SkillPageLeftArea.coractive[0][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.coractive[1][0]=SkillPage.skillpagex+660;
					SkillPageLeftArea.coractive[1][1]=SkillPage.skillpagey+295;
					SkillPageLeftArea.coractive[2][0]=SkillPage.skillpagex+372;
					SkillPageLeftArea.coractive[2][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.coractive[3][0]=SkillPage.skillpagex+444;
					SkillPageLeftArea.coractive[3][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.coractive[4][0]=SkillPage.skillpagex+516;
					SkillPageLeftArea.coractive[4][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.coractive[5][0]=SkillPage.skillpagex+588;
					SkillPageLeftArea.coractive[5][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.coractive[6][0]=SkillPage.skillpagex+300;
					SkillPageLeftArea.coractive[6][1]=SkillPage.skillpagey+365;
					SkillPageLeftArea.coractive[7][0]=SkillPage.skillpagex+420;
					SkillPageLeftArea.coractive[7][1]=SkillPage.skillpagey+365;
					SkillPageLeftArea.coractive[8][0]=SkillPage.skillpagex+540;
					SkillPageLeftArea.coractive[8][1]=SkillPage.skillpagey+365;

					SkillPageLeftArea.inactivemove[0].setBounds(SkillPage.skillpagex+444, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.inactivemove[1].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[2].setBounds(SkillPage.skillpagex+372, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[3].setBounds(SkillPage.skillpagex+444, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[4].setBounds(SkillPage.skillpagex+516, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[5].setBounds(SkillPage.skillpagex+588, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[6].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+295, 40, 40);
					SkillPageLeftArea.inactivemove[7].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+365, 40, 40);

					SkillPageLeftArea.corinactive[0][0]=SkillPage.skillpagex+444;
					SkillPageLeftArea.corinactive[0][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.corinactive[1][0]=SkillPage.skillpagex+300;
					SkillPageLeftArea.corinactive[1][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[2][0]=SkillPage.skillpagex+372;
					SkillPageLeftArea.corinactive[2][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[3][0]=SkillPage.skillpagex+444;
					SkillPageLeftArea.corinactive[3][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[4][0]=SkillPage.skillpagex+516;
					SkillPageLeftArea.corinactive[4][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[5][0]=SkillPage.skillpagex+588;
					SkillPageLeftArea.corinactive[5][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[6][0]=SkillPage.skillpagex+300;
					SkillPageLeftArea.corinactive[6][1]=SkillPage.skillpagey+295;
					SkillPageLeftArea.corinactive[7][0]=SkillPage.skillpagex+660;
					SkillPageLeftArea.corinactive[7][1]=SkillPage.skillpagey+365;
				}
			}
		});

	}
}

class SkillPageTopArea extends JPanel{
	SkillPageRightBase skillpagerightbase;
	CardLayout skillpagerightcardlayout;
	static int state = 1;
	static Image beginimage[] = new Image[2];
	static Image warimage[] = new Image[2];
	static Image shoimage[] = new Image[2];
	static Image magimage[] = new Image[2];
	SkillPageTopArea(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//this.setBackground(new Color(190,190,190));
		JToggleButton BeginnerBtn = new JToggleButton();
		JToggleButton WarriorBtn = new JToggleButton();
		JToggleButton ShooterBtn = new JToggleButton();
		JToggleButton MageBtn = new JToggleButton();
		String s[] = new String[2];
		URL url[] = new URL[2];
		s[0] = "/SkillPage/0-1.png";
		s[1] = "/SkillPage/1-1.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		
		try {
			beginimage[0] = ImageIO.read(url[0]);
			beginimage[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s[0] = "/SkillPage/0-2.png";
		s[1] = "/SkillPage/1-2.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		
		try {
			warimage[0] = ImageIO.read(url[0]);
			warimage[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	
		s[0] = "/SkillPage/0-3.png";
		s[1] = "/SkillPage/1-3.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		
		try {
			shoimage[0] = ImageIO.read(url[0]);
			shoimage[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		s[0] = "/SkillPage/0-4.png";
		s[1] = "/SkillPage/1-4.png";
		url[0] = getClass().getResource(s[0]);
		url[1] = getClass().getResource(s[1]);
		
		try {
			magimage[0] = ImageIO.read(url[0]);
			magimage[1] = ImageIO.read(url[1]);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		
		
		BeginnerBtn.setFont(new Font("標楷體",0,12));
		WarriorBtn.setFont(new Font("標楷體",0,12));
		ShooterBtn.setFont(new Font("標楷體",0,12));
		MageBtn.setFont(new Font("標楷體",0,12));
	
		BeginnerBtn.setSelected(true);
		WarriorBtn.setSelected(false);
		ShooterBtn.setSelected(false);
		MageBtn.setSelected(false);
		
		
		BeginnerBtn.setFocusable(false);
		BeginnerBtn.setBorderPainted(false);
		BeginnerBtn.setFocusPainted(false);
		BeginnerBtn.setContentAreaFilled(false);

		BeginnerBtn.setIcon(new ImageIcon(beginimage[1]));
		WarriorBtn.setFocusable(false);
		WarriorBtn.setBorderPainted(false);
		WarriorBtn.setFocusPainted(false);
		WarriorBtn.setContentAreaFilled(false);

		WarriorBtn.setIcon(new ImageIcon(warimage[0]));
		
		
		ShooterBtn.setFocusable(false);
		ShooterBtn.setBorderPainted(false);
		ShooterBtn.setFocusPainted(false);
		ShooterBtn.setContentAreaFilled(false);

		ShooterBtn.setIcon(new ImageIcon(shoimage[0]));
		MageBtn.setFocusable(false);
		MageBtn.setBorderPainted(false);
		MageBtn.setFocusPainted(false);
		MageBtn.setContentAreaFilled(false);

		MageBtn.setIcon(new ImageIcon(magimage[0]));
		
		BeginnerBtn.setBounds(0, 10, 60, 40);
		WarriorBtn.setBounds(60, 10, 60, 40);
		ShooterBtn.setBounds(120, 10, 60, 40);
		MageBtn.setBounds(180, 10, 60, 40);
		
		
		this.add(BeginnerBtn);
		this.add(WarriorBtn);
		this.add(ShooterBtn);
		this.add(MageBtn);
		
		BeginnerBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(BeginnerBtn.isSelected()==false && WarriorBtn.isSelected()==false && ShooterBtn.isSelected()==false && MageBtn.isSelected()==false)
				{
					BeginnerBtn.setSelected(true);
				}
				if(BeginnerBtn.isSelected())
				{
					WarriorBtn.setSelected(false);
					ShooterBtn.setSelected(false);
					MageBtn.setSelected(false);
					BeginnerBtn.setIcon(new ImageIcon(beginimage[1]));
					WarriorBtn.setIcon(new ImageIcon(warimage[0]));
					ShooterBtn.setIcon(new ImageIcon(shoimage[0]));
					MageBtn.setIcon(new ImageIcon(magimage[0]));
					
					for(int i = 0;i<9;i++)
					{						
						PanelListenner.w.remove(SkillPageLeftArea.activemove[i]);
					}
					for(int i = 0;i<8;i++)
					{
						PanelListenner.w.remove(SkillPageLeftArea.inactivemove[i]);
					}
					
					state = 0;
					skillpagerightcardlayout.show(skillpagerightbase, "beginner");
				}
			}
		});

		WarriorBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(BeginnerBtn.isSelected()==false && WarriorBtn.isSelected()==false && ShooterBtn.isSelected()==false && MageBtn.isSelected()==false)
				{
					WarriorBtn.setSelected(true);
				}
				if(WarriorBtn.isSelected())
				{
					BeginnerBtn.setSelected(false);
					ShooterBtn.setSelected(false);
					MageBtn.setSelected(false);
					BeginnerBtn.setIcon(new ImageIcon(beginimage[0]));
					WarriorBtn.setIcon(new ImageIcon(warimage[1]));
					ShooterBtn.setIcon(new ImageIcon(shoimage[0]));
					MageBtn.setIcon(new ImageIcon(magimage[0]));
					for(int i=0;i<9;i++)
					{
						SkillPageLeftArea.activemove[i].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[i]));
					}
					for(int i=0;i<8;i++)
					{
						SkillPageLeftArea.inactivemove[i].setIcon(new ImageIcon(SkillPageWarrior.InActiveImage[i]));
					}
					
					SkillPageLeftArea.activemove[0].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.activemove[1].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.activemove[2].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.activemove[3].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.activemove[4].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.activemove[5].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.activemove[6].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.activemove[7].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+295, 40, 40);
					SkillPageLeftArea.activemove[8].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+365, 40, 40);
					
					SkillPageLeftArea.coractive[0][0]=SkillPage.skillpagex+360;
					SkillPageLeftArea.coractive[0][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.coractive[1][0]=SkillPage.skillpagex+300;
					SkillPageLeftArea.coractive[1][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.coractive[2][0]=SkillPage.skillpagex+420;
					SkillPageLeftArea.coractive[2][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.coractive[3][0]=SkillPage.skillpagex+600;
					SkillPageLeftArea.coractive[3][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.coractive[4][0]=SkillPage.skillpagex+360;
					SkillPageLeftArea.coractive[4][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.coractive[5][0]=SkillPage.skillpagex+480;
					SkillPageLeftArea.coractive[5][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.coractive[6][0]=SkillPage.skillpagex+540;
					SkillPageLeftArea.coractive[6][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.coractive[7][0]=SkillPage.skillpagex+660;
					SkillPageLeftArea.coractive[7][1]=SkillPage.skillpagey+295;
					SkillPageLeftArea.coractive[8][0]=SkillPage.skillpagex+480;
					SkillPageLeftArea.coractive[8][1]=SkillPage.skillpagey+365;

					SkillPageLeftArea.inactivemove[0].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.inactivemove[1].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.inactivemove[2].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.inactivemove[3].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+295, 40, 40);
					SkillPageLeftArea.inactivemove[4].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[5].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[6].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.inactivemove[7].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+365, 40, 40);

					SkillPageLeftArea.corinactive[0][0]=SkillPage.skillpagex+600;
					SkillPageLeftArea.corinactive[0][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.corinactive[1][0]=SkillPage.skillpagex+600;
					SkillPageLeftArea.corinactive[1][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.corinactive[2][0]=SkillPage.skillpagex+420;
					SkillPageLeftArea.corinactive[2][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.corinactive[3][0]=SkillPage.skillpagex+360;
					SkillPageLeftArea.corinactive[3][1]=SkillPage.skillpagey+295;
					SkillPageLeftArea.corinactive[4][0]=SkillPage.skillpagex+480;
					SkillPageLeftArea.corinactive[4][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[5][0]=SkillPage.skillpagex+540;
					SkillPageLeftArea.corinactive[5][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[6][0]=SkillPage.skillpagex+660;
					SkillPageLeftArea.corinactive[6][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.corinactive[7][0]=SkillPage.skillpagex+540;
					SkillPageLeftArea.corinactive[7][1]=SkillPage.skillpagey+365;
					
					
					for(int i = 0;i<9;i++)
					{						
						PanelListenner.w.add(SkillPageLeftArea.activemove[i]);
					}
					for(int i = 0;i<8;i++)
					{
						PanelListenner.w.add(SkillPageLeftArea.inactivemove[i]);
					}
					
					state = 1;
					skillpagerightcardlayout.show(skillpagerightbase, "warrior");
				}
			}
		});

		ShooterBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(BeginnerBtn.isSelected()==false && WarriorBtn.isSelected()==false && ShooterBtn.isSelected()==false && MageBtn.isSelected()==false)
				{
					ShooterBtn.setSelected(true);
				}
				if(ShooterBtn.isSelected())
				{
					BeginnerBtn.setSelected(false);
					WarriorBtn.setSelected(false);
					MageBtn.setSelected(false);
					BeginnerBtn.setIcon(new ImageIcon(beginimage[0]));
					WarriorBtn.setIcon(new ImageIcon(warimage[0]));
					ShooterBtn.setIcon(new ImageIcon(shoimage[1]));
					MageBtn.setIcon(new ImageIcon(magimage[0]));
					
					for(int i = 0;i<9;i++)
					{						
						PanelListenner.w.remove(SkillPageLeftArea.activemove[i]);
					}
					for(int i = 0;i<8;i++)
					{
						PanelListenner.w.remove(SkillPageLeftArea.inactivemove[i]);
					}
					
					state = 2;
					skillpagerightcardlayout.show(skillpagerightbase, "shooter");
				}
			}
		});

		MageBtn.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(BeginnerBtn.isSelected()==false && WarriorBtn.isSelected()==false && ShooterBtn.isSelected()==false && MageBtn.isSelected()==false)
				{
					MageBtn.setSelected(true);
				}
				if(MageBtn.isSelected())
				{
					BeginnerBtn.setSelected(false);
					WarriorBtn.setSelected(false);
					ShooterBtn.setSelected(false);
					BeginnerBtn.setIcon(new ImageIcon(beginimage[0]));
					WarriorBtn.setIcon(new ImageIcon(warimage[0]));
					ShooterBtn.setIcon(new ImageIcon(shoimage[0]));
					MageBtn.setIcon(new ImageIcon(magimage[1]));
					
					for(int i=0;i<9;i++)
					{
						SkillPageLeftArea.activemove[i].setIcon(new ImageIcon(SkillPageMage.ActiveImage[i]));
					}
					for(int i=0;i<8;i++)
					{
						SkillPageLeftArea.inactivemove[i].setIcon(new ImageIcon(SkillPageMage.InActiveImage[i]));
					}

					SkillPageLeftArea.activemove[0].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.activemove[1].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+295, 40, 40);
					SkillPageLeftArea.activemove[2].setBounds(SkillPage.skillpagex+372, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.activemove[3].setBounds(SkillPage.skillpagex+444, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.activemove[4].setBounds(SkillPage.skillpagex+516, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.activemove[5].setBounds(SkillPage.skillpagex+588, SkillPage.skillpagey+155, 40, 40);
					SkillPageLeftArea.activemove[6].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+365, 40, 40);
					SkillPageLeftArea.activemove[7].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+365, 40, 40);
					SkillPageLeftArea.activemove[8].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+365, 40, 40);
					
					SkillPageLeftArea.coractive[0][0]=SkillPage.skillpagex+300;
					SkillPageLeftArea.coractive[0][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.coractive[1][0]=SkillPage.skillpagex+660;
					SkillPageLeftArea.coractive[1][1]=SkillPage.skillpagey+295;
					SkillPageLeftArea.coractive[2][0]=SkillPage.skillpagex+372;
					SkillPageLeftArea.coractive[2][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.coractive[3][0]=SkillPage.skillpagex+444;
					SkillPageLeftArea.coractive[3][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.coractive[4][0]=SkillPage.skillpagex+516;
					SkillPageLeftArea.coractive[4][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.coractive[5][0]=SkillPage.skillpagex+588;
					SkillPageLeftArea.coractive[5][1]=SkillPage.skillpagey+155;
					SkillPageLeftArea.coractive[6][0]=SkillPage.skillpagex+300;
					SkillPageLeftArea.coractive[6][1]=SkillPage.skillpagey+365;
					SkillPageLeftArea.coractive[7][0]=SkillPage.skillpagex+420;
					SkillPageLeftArea.coractive[7][1]=SkillPage.skillpagey+365;
					SkillPageLeftArea.coractive[8][0]=SkillPage.skillpagex+540;
					SkillPageLeftArea.coractive[8][1]=SkillPage.skillpagey+365;

					SkillPageLeftArea.inactivemove[0].setBounds(SkillPage.skillpagex+444, SkillPage.skillpagey+85, 40, 40);
					SkillPageLeftArea.inactivemove[1].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[2].setBounds(SkillPage.skillpagex+372, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[3].setBounds(SkillPage.skillpagex+444, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[4].setBounds(SkillPage.skillpagex+516, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[5].setBounds(SkillPage.skillpagex+588, SkillPage.skillpagey+225, 40, 40);
					SkillPageLeftArea.inactivemove[6].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+295, 40, 40);
					SkillPageLeftArea.inactivemove[7].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+365, 40, 40);

					SkillPageLeftArea.corinactive[0][0]=SkillPage.skillpagex+444;
					SkillPageLeftArea.corinactive[0][1]=SkillPage.skillpagey+85;
					SkillPageLeftArea.corinactive[1][0]=SkillPage.skillpagex+300;
					SkillPageLeftArea.corinactive[1][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[2][0]=SkillPage.skillpagex+372;
					SkillPageLeftArea.corinactive[2][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[3][0]=SkillPage.skillpagex+444;
					SkillPageLeftArea.corinactive[3][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[4][0]=SkillPage.skillpagex+516;
					SkillPageLeftArea.corinactive[4][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[5][0]=SkillPage.skillpagex+588;
					SkillPageLeftArea.corinactive[5][1]=SkillPage.skillpagey+225;
					SkillPageLeftArea.corinactive[6][0]=SkillPage.skillpagex+300;
					SkillPageLeftArea.corinactive[6][1]=SkillPage.skillpagey+295;
					SkillPageLeftArea.corinactive[7][0]=SkillPage.skillpagex+660;
					SkillPageLeftArea.corinactive[7][1]=SkillPage.skillpagey+365;
					
					for(int i = 0;i<9;i++)
					{						
						PanelListenner.w.add(SkillPageLeftArea.activemove[i]);
					}
					for(int i = 0;i<8;i++)
					{
						PanelListenner.w.add(SkillPageLeftArea.inactivemove[i]);
					}
					
					state = 3;
					skillpagerightcardlayout.show(skillpagerightbase, "mage");
				}
			}
		});

	}
}

class SkillPageLeftArea extends JPanel{
	static int clickx,clicky;
	static JLabel activemove[] = new JLabel[9];
	static JLabel inactivemove[] = new JLabel[8];
	static JLabel DemoImage = new JLabel();
	static int coractive[][] = new int[9][2];
	static int corinactive[][] = new int[8][2];
	static int nowcor[] = new int[2];
	static int activelearnlv[][] = new int[][]{{1,1,1,1,1,1,1,1,1},
											   {1,1,1,1,1,1,1,1,1}};
	//static int activelearnlv[] = new int[]{1,4,7,12,10,17,17,22,25};
	static int inactivelearnlv[][] = new int[][]{{3,5,3,15,17,17,20,25},
												 {1,6,9,12,15,18,18,25}};
	static int activelearntoplv[][] = new int[][]{{10,10,10,10,10,5,5,10,10},	
												  {10,3,10,10,10,10,10,10,10}};
	static int inactivelearntoplv[][] = new int[][]{{10,5,10,10,5,5,10,5},
													{20,5,5,5,5,5,1,5}};
	static int activelv[] = new int[9];
	static int inactivelv[] = new int[8];
	static int nowselect = 10;
	static String activeskillname[][] = new String[2][9];
	static String inactiveskillname[][] = new String[2][8];
	static String activeskillstatement[][][] = new String[2][9][10];
	static String inactiveskillstatement[][][] = new String[2][8][10];
	static JTextArea DemoSkillName = new JTextArea();
	static JTextArea SkillInfo = new JTextArea();
	SkillPageLeftArea(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//this.setBackground(new Color(200,200,200));

		//JTextArea DemoSkillName = new JTextArea();
		
		SkillLearnArea skilllearnarea = new SkillLearnArea();
		String s;
		int distance[] = new int[18];
		/*
		for(int i=0;i<7;i++)
		{
			activemove[i] = new JLabel();
			inactivemove[i] = new JLabel();
			activemove[i].setOpaque(true);
			inactivemove[i].setOpaque(true);
			activelv[i] = 0; 
			inactivelv[i] = 0;
			activelearnlevel[i] = 0;
			inactivelearnlevel[i] = 0;
		}
		*/
		for(int i=0;i<9;i++)
		{
			activemove[i] = new JLabel();
			activemove[i].setOpaque(true);
			activelv[i] = 0; 
			//activelearnlevel[i] = 0;
		}
		for(int i=0;i<8;i++)
		{
			inactivemove[i] = new JLabel();
			inactivemove[i].setOpaque(true);
			inactivelv[i] = 0; 
			//inactivelearnlevel[i] = 0;
		}
		
		
		activeskillname[0][0]="氣斬";
		activeskillname[0][1]="氣旋斬";
		activeskillname[0][2]="氣圓斬";
		activeskillname[0][3]="瞬斬";
		activeskillname[0][4]="氣盾";
		activeskillname[0][5]="達多修斯斬擊篇章一冰疾";
		activeskillname[0][6]="達多修斯斬擊篇章一烈火";
		activeskillname[0][7]="劍術的極致";
		activeskillname[0][8]="奧義一達多修斯之斬";

		activeskillname[1][0]="轟雷之章一落雷";
		activeskillname[1][1]="瞬間移動";
		activeskillname[1][2]="遨土之章一柢土之刺";
		activeskillname[1][3]="破風之章一暴風凝聚";
		activeskillname[1][4]="御水之章一流瀑之球";
		activeskillname[1][5]="燃火之章一煉獄火柱";
		activeskillname[1][6]="奧術爆破";
		activeskillname[1][7]="失衡的奧術";
		activeskillname[1][8]="法術之秘一魔法之銃";

		inactiveskillname[0][0]="嗜血";
		inactiveskillname[0][1]="循血";
		inactiveskillname[0][2]="氣斬精通";
		inactiveskillname[0][3]="御氣之道";
		inactiveskillname[0][4]="歐莉碧婭元素篇章一冰的掌握";
		inactiveskillname[0][5]="歐莉碧婭元素篇章一火的掌握";
		inactiveskillname[0][6]="劍術精通";
		inactiveskillname[0][7]="達多修斯的劍魂";
		
		inactiveskillname[1][0]="法力之源";
		inactiveskillname[1][1]="聚雷之力";
		inactiveskillname[1][2]="蘊土之竅";
		inactiveskillname[1][3]="縱風之奧";
		inactiveskillname[1][4]="萍水之心";
		inactiveskillname[1][5]="烈火之核";
		inactiveskillname[1][6]="法術的刻印";
		inactiveskillname[1][7]="禁忌的無上大法典";

		
		activeskillstatement[0][0][1]="Lv限制：Lv1以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：敵方\n對象模式：單體\n攻擊範圍：角色前方3格內"
				+ "\n冷卻時間：6秒\nMP消耗量：30\n前置技能：無\n技能說明：向前方的敵人施放三下斬擊\n"
				+ "技能傷害：150%物理傷害\n每一技能點所提升的傷害：15%";
		
		activeskillstatement[0][1][1]="Lv限制：Lv4以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：敵方\n對象模式：單體\n攻擊範圍：角色前方6格"
				+ "\n冷卻時間：10秒\nMP消耗量：50\n前置技能：氣斬Lv3\n技能說明：對前方使出一道斬擊\n"
				+ "技能傷害：180%物理傷害\n每一技能點所提升的傷害：10%";
		
		activeskillstatement[0][2][1]="Lv限制：Lv7以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：敵方\n對象模式：群體\n攻擊範圍：角色周圍2x2格"
				+ "\n冷卻時間：10秒\nMP消耗量：100\n前置技能：氣斬Lv3\n技能說明：對角色周圍使出斬擊\n"
				+ "技能傷害：130%物理傷害\n每一技能點所提升的傷害：5%";
		
		activeskillstatement[0][3][1]="Lv限制：Lv12以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：敵方\n對象模式：群體\n攻擊範圍：角色前方5格"
				+ "\n冷卻時間：8秒\nMP消耗量：120\n前置技能：無\n技能說明：瞬間移動至前方，並對路徑\n上的敵人造成傷害\n"
				+ "技能傷害：300%物理傷害\n每一技能點所提升的傷害：100%";
		
		activeskillstatement[0][4][1]="Lv限制：Lv10以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：自身\n對象模式：單體\n攻擊範圍：無"
				+ "\n冷卻時間：60秒\nHP消耗量：5%最大生命\nMP消耗量：400\n前置技能：氣斬Lv5\n技能說明：消耗生命，為自己提供可抵\n擋傷害的護盾值\n"
				+ "持續時間：30秒\n護盾量：15%最大生命+100%角色物理攻\n擊\n每一技能點所提升的護盾量：追加5%最\n大生命";
		
		activeskillstatement[0][5][1]="Lv限制：Lv17以上\n等級上限：Lv5\n技能類型：主動技能\n釋放目標：敵方\n對象模式：單體\n攻擊範圍：角色正前方3格內"
				+ "\n冷卻時間：15秒\nMP消耗量：100\n前置技能：無\n技能說明：向前方的敵人施放冰屬性斬擊，且概率性附加結凍狀態\n" 
				+ "技能傷害：150%物理傷害+500%魔法傷害\n狀態附加率：5%\n每一技能點所提升的技能傷害：15%物理\n傷害+50%魔法傷害\n"
				+ "每一技能點所提升的狀態附加率：2%";
		
		activeskillstatement[0][6][1]="Lv限制：Lv17以上\n等級上限：Lv5\n技能類型：主動技能\n釋放目標：敵方\n對象模式：單體\n攻擊範圍：角色正前方3格內"
				+ "\n冷卻時間：15秒\nMP消耗量：100\n前置技能：無\n技能說明：向前方的敵人施予火屬性斬擊，且概率性附加燃燒狀態\n"
				+ "技能傷害：150%物理傷害+500%魔法傷害\n狀態附加率：5%\n每一技能點所提升的技能傷害：15%物理\n傷害+50%魔法傷害\n"  
				+ "每一技能點所提升的狀態附加率：2%";
		
		activeskillstatement[0][7][1]="Lv限制：Lv22以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：自身\n對象模式：單體\n攻擊範圍：無"
				+ "\n冷卻時間：5秒\nMP消耗量：150\n前置技能：劍術精通Lv10\n技能說明：主動提升物理攻擊、爆擊率\n、物理命中率，持續30秒\n"
				+ "提升的物理攻擊：10%\n提升的爆擊率：5%\n提升的物理命中率：10%\n每一技能點所提升的物理攻擊：1%\n每一技能點所提升的爆擊率：1%\n"
				+ "每一技能點所提升的物理命中率：2%\n";
		
		activeskillstatement[0][8][1]="Lv限制：Lv25以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：敵方\n對象模式：單體\n攻擊範圍：角色正前方1格"
				+ "\n冷卻時間：60秒\nMP消耗量：450\n"
				+ "前置技能：劍術的極致Lv10\n"
				+ "御氣之道Lv10\n技能說明：1秒內向前方快速斬擊100次\n，此時狀態無法移動\n"
				+ "單次斬擊傷害：20%物理傷害\n每一技能點所提升的單次斬擊傷害：20%";

		
		activeskillstatement[1][0][1]="Lv限制：Lv1以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：敵方\n對象模式：單體\n攻擊範圍：角色前方5格內"
				+ "\n冷卻時間：3秒\nMP消耗量：60\n前置技能：法力之源Lv1\n技能說明：對前方敵人使出雷擊\n"
				+ "技能傷害：200%魔法傷害\n每一技能點所提升的傷害：20%";
		
		activeskillstatement[1][1][1]="Lv限制：Lv3以上\n等級上限：Lv3\n技能類型：主動技能\n釋放目標：自身\n對象模式：單體\n攻擊範圍：無"
				+ "\n冷卻時間：2秒\nMP消耗量：120\n前置技能：法力之源Lv5\n技能說明：瞬間移動至前方三格\n"
				+ "每一技能點所降低的MP消耗量：55";
		
		activeskillstatement[1][2][1]="Lv限制：Lv6以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：敵方\n對象模式：群體\n攻擊範圍：角色周圍2x2格"
				+ "\n冷卻時間：9秒\nMP消耗量：300\n前置技能：法力之源Lv10\n技能說明：對周圍的敵人造成傷害\n"
				+ "技能傷害：200%魔法傷害\n每一技能點所提升的傷害：10%";
		
		activeskillstatement[1][3][1]="Lv限制：Lv9以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：敵方\n對象模式：群體\n攻擊範圍：角色前方6格"
				+ "\n冷卻時間：9秒\nMP消耗量：300\n前置技能：法力之源Lv13\n技能說明：對前方使出一道強力的風暴\n"
				+ "技能傷害：400%魔法傷害\n每一技能點所提升的傷害：30%";

		
		activeskillstatement[1][4][1]="Lv限制：Lv12以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：敵方\n對象模式：單體\n攻擊範圍：角色前方5格"
				+ "\n冷卻時間：10秒\nMP消耗量：400\n前置技能：法力之源Lv15\n技能說明：對前方送出一顆水球，當擊\n中敵人時原地產生瀑布並造成傷害\n"
				+ "水球傷害：300%魔法傷害\n瀑布傷害：每0.5秒200%魔法傷害\n每一技能點所提升的水球傷害：30%\n"
				+ "每一技能點所提升的瀑布傷害：40%";
		
		
		activeskillstatement[1][5][1]="Lv限制：Lv15以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：敵方\n對象模式：單體\n攻擊範圍：角色前方3格內"
				+ "\n冷卻時間：15秒\nMP消耗量：500\n前置技能：法力之源Lv17\n技能說明：向前方一格製造出一道持續\n性的火柱，持續4秒\n"
				+ "火柱傷害：每0.5秒500%魔法傷害\n每一技能點所提升的火柱傷害：50%";
		
		activeskillstatement[1][6][1]="Lv限制：Lv20以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：自身\n對象模式：單體\n攻擊範圍：無"
				+ "\n冷卻時間：60秒\nMP消耗量：500\n前置技能：法術的刻印Lv1\n技能說明：消耗擁有的元素印記，根據\n元素印記的特性，而獲得不同的能力加\n成"
				+ "元素多的增加元素屬性傷害，如一樣\n則所有元素屬性皆增加\n"
				+ "提升的魔法攻擊：總印記數x3%+5%\n屬性傷害增加：該元素印記數量x10%\n每一技能點所提升的魔法攻擊：5%\n每一技能點所提升的屬性傷害：5%";
		
		activeskillstatement[1][7][1]="Lv限制：Lv20以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：自身\n對象模式：單體\n攻擊範圍：無"
				+ "\n冷卻時間：5秒\nMP消耗量：250\n前置技能：奧術爆破Lv3\n技能說明：主動提升魔法攻擊、爆擊率\n、魔法命中率，持續30秒\n"
				+ "提升的魔法攻擊：10%\n提升的爆擊率：5%\n提升的魔法命中率：10%\n每一技能點所提升的魔法攻擊：1%\n每一技能點所提升的爆擊率：1%\n"
				+ "每一技能點所提升的魔法命中率：2%\n";
		
		activeskillstatement[1][8][1]="Lv限制：Lv25以上\n等級上限：Lv10\n技能類型：主動技能\n釋放目標：自身\n對象模式：單體\n攻擊範圍：無"
				+ "\n冷卻時間：60秒\nMP消耗量：800\n前置技能：失衡的奧術Lv10\n技能說明：將普通攻擊化成槍械連擊，\n在此期間"
				+ "魔法命中率、爆擊率大幅提升\n"
				+ "持續時間：30秒\n魔法命中提升：10%\n爆擊率提升：2%\n每一技能點所提升的持續時間：3秒\n每一技能點所提升的魔法命中：2%\n"
				+ "每一技能點所提升的爆擊率：2%\n";
		
		
		inactiveskillstatement[0][0][1]="Lv限制：Lv3以上\n等級上限：Lv10\n技能類型：被動技能\n"
				+ "前置技能：無\n技能說明：每次攻擊可吸收傷害一定\n血量\n"
				+ "每一技能點所提升的吸血量：10%";
		inactiveskillstatement[0][1][1]="Lv限制：Lv5以上\n等級上限：Lv5\n技能類型：被動技能\n"
				+ "前置技能：嗜血Lv5\n技能說明：增加血量回復率(包含藥劑)\n"
				+ "每一技能點所增加的回復率：5%";
		inactiveskillstatement[0][2][1]="Lv限制：Lv3以上\n等級上限：Lv10\n技能類型：被動技能\n"
				+ "前置技能：氣斬Lv10\n技能說明：提升氣斬的傷害，降低氣斬\n的冷卻時間、魔力消耗\n"
				+ "每一技能點所提升的氣斬傷害：10%\n每一技能點所降低的冷卻時間：0.5秒\n每一技能點所降低的魔力消耗：5%";
		inactiveskillstatement[0][3][1]="Lv限制：Lv15以上\n等級上限：Lv10\n技能類型：被動技能\n"
				+ "前置技能：氣旋斬Lv5\n氣圓斬Lv5\n氣盾Lv3\n技能說明：提升氣斬、氣旋斬以及氣\n圓斬的傷害，提升氣盾的護盾量\n"
				+ "每一技能點所提升的氣斬傷害：10%\n每一技能點所提升的氣旋斬傷害：15%\n每一技能點所提升的氣圓斬傷害：10%\n"
				+ "每一技能點所提升的氣盾護盾量：5%";
		inactiveskillstatement[0][4][1]="Lv限制：Lv17以上\n等級上限：Lv5\n技能類型：被動技能\n"
				+ "前置技能：達多修斯斬擊篇章一冰疾Lv1\n技能說明：提升冰屬性的傷害，並且提\n高結凍狀態的附加機率\n"
				+ "每一技能點所提升的冰屬性傷害：30%\n每一技能點所提升的附加機率：20%";
		inactiveskillstatement[0][5][1]="Lv限制：Lv17以上\n等級上限：Lv5\n技能類型：被動技能\n"
				+ "前置技能：達多修斯斬擊篇章一烈火Lv1\n技能說明：提升火屬性的傷害，並且提\n高燃燒狀態的附加機率\n"
				+ "每一技能點所提升的火屬性傷害：30%\n每一技能點所提升的附加機率：20%";
		inactiveskillstatement[0][6][1]="Lv限制：Lv20以上\n等級上限：Lv10\n技能類型：被動技能\n"
				+ "前置技能：無\n技能說明：被動提升物理攻擊、爆擊率\n、物理命中率\n"
				+ "每一技能點所提升的物理攻擊：20%\n每一技能點所提升的爆擊率：10%\n"
				+ "每一技能點所提升的物理命中率：15%";		
		inactiveskillstatement[0][7][1]="Lv限制：Lv25以上\n等級上限：Lv5\n技能類型：被動技能\n"
				+ "前置技能：奧義一達多修斯之斬Lv3\n技能說明：提升武器給予的攻擊力、當\n使用氣斬時減少達多修斯之斬的冷卻時\n間\n"
				+ "每一技能點所提升的武器攻擊力：50%\n每一技能點降低的氣斬冷卻時間：0.5秒";

		
		inactiveskillstatement[1][0][1]="Lv限制：Lv1以上\n等級上限：Lv20\n技能類型：被動技能\n" 
								+ "前置技能：無\n技能說明：被動提升魔力值以及魔法攻\n擊"  
								+ "\n每一技能點所提升的魔力：10%\n每一技能點所提升的魔法攻擊：3%";
		
		inactiveskillstatement[1][1][1]="Lv限制：Lv6以上\n等級上限：Lv5\n技能類型：被動技能\n" 
				+ "前置技能：轟雷之章一落雷Lv3\n技能說明：提升轟雷之章法術的傷害、\n降低轟雷之章法術的魔力消耗\n"  
				+ "每一技能點所提升的傷害：10%\n每一技能點所降低的消耗：10MP";
				
		inactiveskillstatement[1][2][1]="Lv限制：Lv9以上\n等級上限：Lv5\n技能類型：被動技能\n" 
				+ "前置技能：遨土之章一柢土之刺 Lv3\n技能說明：降低遨土之章法術的冷卻\n時間、降低遨土之章法術的魔力消耗\n"  
				+ "每一技能點所降低的冷卻時間：1秒\n每一技能點所降低的消耗：30MP";

		inactiveskillstatement[1][3][1]="Lv限制：Lv12以上\n等級上限：Lv5\n技能類型：被動技能\n" 
				+ "前置技能：破風之章一暴風凝聚Lv3\n技能說明：使破風之章法術必定爆擊、\n額外增加破風之章法術的爆擊傷害\n"  
				+ "每一技能點所增加的爆擊傷害：20%";

		inactiveskillstatement[1][4][1]="Lv限制：Lv15以上\n等級上限：Lv5\n技能類型：被動技能\n" 
				+ "前置技能：御水之章一流瀑之球Lv3\n技能說明：使御水之章法術無視敵人防\n禦、額外提升御水之章法術的傷害\n"  
				+ "每一技能點所提升的傷害：10%";

		inactiveskillstatement[1][5][1]="Lv限制：Lv18以上\n等級上限：Lv5\n技能類型：被動技能\n" 
				+ "前置技能：燃火之章一煉獄火柱Lv3\n技能說明：使燃火之章法術持續時間\n增加、額外提升燃火之章法術的傷害\n"  
				+ "每一技能點所增加的持續時間：0.5秒\n每一技能點所提升的傷害：10%";
		
		inactiveskillstatement[1][6][1]="Lv限制：Lv18以上\n等級上限：Lv1\n技能類型：被動技能\n" 
				+ "前置技能：聚雷之力Lv1\n"
				+ "蘊土之竅Lv1\n"
				+ "縱風之奧Lv1\n"
				+ "萍水之心Lv1\n"
				+ "烈火之核Lv1\n"
				+ "技能說明：根據使用法術的類型，而獲\n得不同屬性的印記，上限為30個\n";
			
		inactiveskillstatement[1][7][1]="Lv限制：Lv25以上\n等級上限：Lv5\n技能類型：被動技能\n" 
				+ "前置技能：法術之秘一魔法之銃Lv5\n技能說明：提升魔法之銃的段數傷害、\n額外提升魔法攻擊\n"
				+ "每一技能點所提升的段數傷害：50%\n每一技能點所提升的額外魔法攻擊：10%";
		
		
		
		activemove[0].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+85, 40, 40);
		activemove[1].setBounds(SkillPage.skillpagex+300, SkillPage.skillpagey+225, 40, 40);
		activemove[2].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+225, 40, 40);
		activemove[3].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+225, 40, 40);
		activemove[4].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+225, 40, 40);
		activemove[5].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+85, 40, 40);
		activemove[6].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+85, 40, 40);
		activemove[7].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+295, 40, 40);
		activemove[8].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+365, 40, 40);
		
		coractive[0][0]=SkillPage.skillpagex+360;
		coractive[0][1]=SkillPage.skillpagey+85;
		coractive[1][0]=SkillPage.skillpagex+300;
		coractive[1][1]=SkillPage.skillpagey+225;
		coractive[2][0]=SkillPage.skillpagex+420;
		coractive[2][1]=SkillPage.skillpagey+225;
		coractive[3][0]=SkillPage.skillpagex+600;
		coractive[3][1]=SkillPage.skillpagey+225;
		coractive[4][0]=SkillPage.skillpagex+360;
		coractive[4][1]=SkillPage.skillpagey+225;
		coractive[5][0]=SkillPage.skillpagex+480;
		coractive[5][1]=SkillPage.skillpagey+85;
		coractive[6][0]=SkillPage.skillpagex+540;
		coractive[6][1]=SkillPage.skillpagey+85;
		coractive[7][0]=SkillPage.skillpagex+660;
		coractive[7][1]=SkillPage.skillpagey+295;
		coractive[8][0]=SkillPage.skillpagex+480;
		coractive[8][1]=SkillPage.skillpagey+365;

		inactivemove[0].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+85, 40, 40);
		inactivemove[1].setBounds(SkillPage.skillpagex+600, SkillPage.skillpagey+155, 40, 40);
		inactivemove[2].setBounds(SkillPage.skillpagex+420, SkillPage.skillpagey+85, 40, 40);
		inactivemove[3].setBounds(SkillPage.skillpagex+360, SkillPage.skillpagey+295, 40, 40);
		inactivemove[4].setBounds(SkillPage.skillpagex+480, SkillPage.skillpagey+225, 40, 40);
		inactivemove[5].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+225, 40, 40);
		inactivemove[6].setBounds(SkillPage.skillpagex+660, SkillPage.skillpagey+85, 40, 40);
		inactivemove[7].setBounds(SkillPage.skillpagex+540, SkillPage.skillpagey+365, 40, 40);

		corinactive[0][0]=SkillPage.skillpagex+600;
		corinactive[0][1]=SkillPage.skillpagey+85;
		corinactive[1][0]=SkillPage.skillpagex+600;
		corinactive[1][1]=SkillPage.skillpagey+155;
		corinactive[2][0]=SkillPage.skillpagex+420;
		corinactive[2][1]=SkillPage.skillpagey+85;
		corinactive[3][0]=SkillPage.skillpagex+360;
		corinactive[3][1]=SkillPage.skillpagey+295;
		corinactive[4][0]=SkillPage.skillpagex+480;
		corinactive[4][1]=SkillPage.skillpagey+225;
		corinactive[5][0]=SkillPage.skillpagex+540;
		corinactive[5][1]=SkillPage.skillpagey+225;
		corinactive[6][0]=SkillPage.skillpagex+660;
		corinactive[6][1]=SkillPage.skillpagey+85;
		corinactive[7][0]=SkillPage.skillpagex+540;
		corinactive[7][1]=SkillPage.skillpagey+365;
	
		DemoImage.setOpaque(true);
		//DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[0]));
		DemoImage.setBounds(0, 0, 40, 40);
		DemoSkillName.setEditable(false);
		DemoSkillName.setFocusable(false);
		s = "普通攻擊" + "[Lv.1]";
		
		DemoSkillName.setText(s);
		DemoSkillName.setFocusable(false);
		DemoSkillName.setFont(new Font("標楷體",0,16));
		DemoSkillName.setBounds(40, 0, 245, 40);
		DemoSkillName.setOpaque(false);
		SkillInfo.setFocusable(false);
		SkillInfo.setText("當前等級：Lv1\n等級上限：Lv1\n"
				+ "攻擊範圍：角色正前方1格\n基礎傷害為100%物理傷害");
		SkillInfo.setFont(new Font("標楷體",0,16));
		SkillInfo.setBounds(0, 40, 285, 340);
		SkillInfo.setOpaque(false);
		skilllearnarea.setBounds(0, 380, 285, 40);
		skilllearnarea.setOpaque(false);
		
		
		this.add(DemoImage);
		this.add(DemoSkillName);
		this.add(SkillInfo);
		this.add(skilllearnarea);
		activemove[0].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = activeskillname[0][0];
				else if(SkillPageTopArea.state==3)
				s = activeskillname[1][0];
					
				if(activelv[0]>0)
				s = s + "[Lv." + activelv[0] + "]";
				else
				s = s + "[未學習]";
				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[0]));
					SkillInfo.setText(activeskillstatement[0][0][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.ActiveImage[0]));
					SkillInfo.setText(activeskillstatement[1][0][1]);				
				}
				nowselect=10;
			}	
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(activemove[0],0);
				nowcor[0]=coractive[0][0];
				nowcor[1]=coractive[0][1];			
			}
			public void mouseReleased(MouseEvent e)
			{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						distance[i]=(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))*(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))+(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20))*(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							if(SkillPageTopArea.state==1)
							{
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[0]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[0]));
							}
							else if(SkillPageTopArea.state==3)
							{
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[0]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[0]));								
							}
							SkillDisplayField.set[t]=true;
							SkillDisplayField.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							if(SkillPageTopArea.state==1)
							{
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[0]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[0]));
							}
							else if(SkillPageTopArea.state==3)
							{
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[0]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[0]));								
							}
							SkillDisplaySubField.set[t-12]=true;
							SkillDisplaySubField.move[t-12].setVisible(true);
						}
						
						if(SkillPageTopArea.state==1)
						{
							SkillDisplayField.numberimage[t]=SkillPageWarrior.ActiveImage[0];
							SkillDisplayField.number[t]=110;
						}
						else if(SkillPageTopArea.state==3)
						{
							SkillDisplayField.numberimage[t]=SkillPageMage.ActiveImage[0];
							SkillDisplayField.number[t]=210;							
						}
					}
					activemove[0].setBounds(coractive[0][0], coractive[0][1], 40, 40);
			}
		});
		
		activemove[0].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
					if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[1]-clicky+e.getY())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200 && (nowcor[1]-clicky+e.getY()+40)<=768)
					activemove[0].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=nowcor[1]-clicky+e.getY(), 40, 40);
					else if((nowcor[0]-clickx+e.getX())<0)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[0].setBounds(nowcor[0]=0,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[0].setBounds(nowcor[0]=0,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[0].setBounds(nowcor[0]=0,nowcor[1]=728,40,40);
					}
					else if((nowcor[0]-clickx+e.getX()+40)>1200)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[0].setBounds(nowcor[0]=1160,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[0].setBounds(nowcor[0]=1160,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[0].setBounds(nowcor[0]=1160,nowcor[1]=728,40,40);
					}
					else if((nowcor[1]-clicky+e.getY())<0)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[0].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=0, 40, 40);
					}
					else if((nowcor[1]-clicky+e.getY()+40)>768)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[0].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=728, 40, 40);
					}
			}
		});

		activemove[1].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = activeskillname[0][1];
				else if(SkillPageTopArea.state==3)
				s = activeskillname[1][1];
			
				if(activelv[1]>0)
				s = s + "[Lv." + activelv[1] + "]";
				else
				s = s + "[未學習]";

				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[1]));
					SkillInfo.setText(activeskillstatement[0][1][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.ActiveImage[1]));
					SkillInfo.setText(activeskillstatement[1][1][1]);				
				}
				nowselect=11;
			}	
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(activemove[1],0);
				nowcor[0]=coractive[1][0];
				nowcor[1]=coractive[1][1];			
			}
			public void mouseReleased(MouseEvent e)
			{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						distance[i]=(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))*(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))+(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20))*(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							if(SkillPageTopArea.state==1)
							{
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[1]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[1]));
							}
							else if(SkillPageTopArea.state==3)
							{
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[1]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[1]));								
							}
							SkillDisplayField.set[t]=true;
							SkillDisplayField.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							if(SkillPageTopArea.state==1)
							{							
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[1]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[1]));
							}
							else if(SkillPageTopArea.state==3)
							{
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[1]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[1]));								
							}
							SkillDisplaySubField.set[t-12]=true;
							SkillDisplaySubField.move[t-12].setVisible(true);
						}
						
						if(SkillPageTopArea.state==1)
						{													
							SkillDisplayField.numberimage[t]=SkillPageWarrior.ActiveImage[1];
							SkillDisplayField.number[t]=111;
						}
						else if(SkillPageTopArea.state==3)
						{
							SkillDisplayField.numberimage[t]=SkillPageMage.ActiveImage[1];
							SkillDisplayField.number[t]=211;							
						}
					}
					activemove[1].setBounds(coractive[1][0], coractive[1][1], 40, 40);
			}
		});
		
		activemove[1].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
					if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[1]-clicky+e.getY())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200 && (nowcor[1]-clicky+e.getY()+40)<=768)
					activemove[1].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=nowcor[1]-clicky+e.getY(), 40, 40);
					else if((nowcor[0]-clickx+e.getX())<0)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[1].setBounds(nowcor[0]=0,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[1].setBounds(nowcor[0]=0,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[1].setBounds(nowcor[0]=0,nowcor[1]=728,40,40);
					}
					else if((nowcor[0]-clickx+e.getX()+40)>1200)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[1].setBounds(nowcor[0]=1160,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[1].setBounds(nowcor[0]=1160,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[1].setBounds(nowcor[0]=1160,nowcor[1]=728,40,40);
					}
					else if((nowcor[1]-clicky+e.getY())<0)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[1].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=0, 40, 40);
					}
					else if((nowcor[1]-clicky+e.getY()+40)>768)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[1].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=728, 40, 40);
					}
			}
		});

		activemove[2].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = activeskillname[0][2];
				else if(SkillPageTopArea.state==3)
				s = activeskillname[1][2];
				
				if(activelv[2]>0)
				s = s + "[Lv." + activelv[2] + "]";
				else
				s = s + "[未學習]";

				DemoSkillName.setText(s);

				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[2]));
					SkillInfo.setText(activeskillstatement[0][2][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.ActiveImage[2]));
					SkillInfo.setText(activeskillstatement[1][2][1]);				
				}
				nowselect=12;
			}	
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(activemove[2],0);
				nowcor[0]=coractive[2][0];
				nowcor[1]=coractive[2][1];			
			}
			public void mouseReleased(MouseEvent e)
			{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						distance[i]=(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))*(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))+(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20))*(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							if(SkillPageTopArea.state==1)
							{													
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[2]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[2]));
							}
							else if(SkillPageTopArea.state==3)
							{
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[2]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[2]));								
							}
							SkillDisplayField.set[t]=true;
							SkillDisplayField.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							if(SkillPageTopArea.state==1)
							{																				
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[2]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[2]));
							}
							else if(SkillPageTopArea.state==3)
							{
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[2]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[2]));								
							}
							SkillDisplaySubField.set[t-12]=true;
							SkillDisplaySubField.move[t-12].setVisible(true);
						}
						
						if(SkillPageTopArea.state==1)
						{																				
							SkillDisplayField.numberimage[t]=SkillPageWarrior.ActiveImage[2];
							SkillDisplayField.number[t]=112;
						}
						else if(SkillPageTopArea.state==3)
						{
							SkillDisplayField.numberimage[t]=SkillPageMage.ActiveImage[2];
							SkillDisplayField.number[t]=212;							
						}
					}
					activemove[2].setBounds(coractive[2][0], coractive[2][1], 40, 40);
			}
		});
		
		activemove[2].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
					if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[1]-clicky+e.getY())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200 && (nowcor[1]-clicky+e.getY()+40)<=768)
					activemove[2].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=nowcor[1]-clicky+e.getY(), 40, 40);
					else if((nowcor[0]-clickx+e.getX())<0)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[2].setBounds(nowcor[0]=0,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[2].setBounds(nowcor[0]=0,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[2].setBounds(nowcor[0]=0,nowcor[1]=728,40,40);
					}
					else if((nowcor[0]-clickx+e.getX()+40)>1200)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[2].setBounds(nowcor[0]=1160,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[2].setBounds(nowcor[0]=1160,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[2].setBounds(nowcor[0]=1160,nowcor[1]=728,40,40);
					}
					else if((nowcor[1]-clicky+e.getY())<0)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[2].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=0, 40, 40);
					}
					else if((nowcor[1]-clicky+e.getY()+40)>768)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[2].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=728, 40, 40);
					}
			}
		});

		activemove[3].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = activeskillname[0][3];
				else if(SkillPageTopArea.state==3)
				s = activeskillname[1][3];
				
				if(activelv[3]>0)
				s = s + "[Lv." + activelv[3] + "]";
				else
				s = s + "[未學習]";

				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[3]));
					SkillInfo.setText(activeskillstatement[0][3][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.ActiveImage[3]));
					SkillInfo.setText(activeskillstatement[1][3][1]);				
				}
				nowselect=13;
			}	
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(activemove[3],0);
				nowcor[0]=coractive[3][0];
				nowcor[1]=coractive[3][1];			
			}
			public void mouseReleased(MouseEvent e)
			{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						distance[i]=(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))*(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))+(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20))*(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							if(SkillPageTopArea.state==1)
							{																				
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[3]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[3]));
							}
							else if(SkillPageTopArea.state==3)
							{								
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[3]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[3]));								
							}
							SkillDisplayField.set[t]=true;
							SkillDisplayField.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							if(SkillPageTopArea.state==1)
							{																				
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[3]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[3]));
							}
							else if(SkillPageTopArea.state==3)
							{	
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[3]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[3]));								
							}
							SkillDisplaySubField.set[t-12]=true;
							SkillDisplaySubField.move[t-12].setVisible(true);
						}
						
						if(SkillPageTopArea.state==1)
						{																				
							SkillDisplayField.numberimage[t]=SkillPageWarrior.ActiveImage[3];
							SkillDisplayField.number[t]=113;
						}
						else if(SkillPageTopArea.state==3)
						{
							SkillDisplayField.numberimage[t]=SkillPageMage.ActiveImage[3];
							SkillDisplayField.number[t]=213;							
						}
					}
					activemove[3].setBounds(coractive[3][0], coractive[3][1], 40, 40);
			}
		});
		
		activemove[3].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
					if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[1]-clicky+e.getY())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200 && (nowcor[1]-clicky+e.getY()+40)<=768)
					activemove[3].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=nowcor[1]-clicky+e.getY(), 40, 40);
					else if((nowcor[0]-clickx+e.getX())<0)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[3].setBounds(nowcor[0]=0,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[3].setBounds(nowcor[0]=0,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[3].setBounds(nowcor[0]=0,nowcor[1]=728,40,40);
					}
					else if((nowcor[0]-clickx+e.getX()+40)>1200)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[3].setBounds(nowcor[0]=1160,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[3].setBounds(nowcor[0]=1160,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[3].setBounds(nowcor[0]=1160,nowcor[1]=728,40,40);
					}
					else if((nowcor[1]-clicky+e.getY())<0)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[3].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=0, 40, 40);
					}
					else if((nowcor[1]-clicky+e.getY()+40)>768)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[3].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=728, 40, 40);
					}
			}
		});

		activemove[4].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = activeskillname[0][4];
				else if(SkillPageTopArea.state==3)
				s = activeskillname[1][4];
				
				if(activelv[4]>0)
				s = s + "[Lv." + activelv[4] + "]";
				else
				s = s + "[未學習]";

				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[4]));
					SkillInfo.setText(activeskillstatement[0][4][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.ActiveImage[4]));
					SkillInfo.setText(activeskillstatement[1][4][1]);				
				}

				nowselect=14;
			}	
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(activemove[4],0);
				nowcor[0]=coractive[4][0];
				nowcor[1]=coractive[4][1];			
			}
			public void mouseReleased(MouseEvent e)
			{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						distance[i]=(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))*(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))+(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20))*(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							if(SkillPageTopArea.state==1)
							{																										
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[4]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[4]));
							}
							else if(SkillPageTopArea.state==3)
							{		
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[4]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[4]));								
							}
							SkillDisplayField.set[t]=true;
							SkillDisplayField.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							if(SkillPageTopArea.state==1)
							{																				
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[4]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[4]));
							}
							else if(SkillPageTopArea.state==3)
							{	
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[4]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[4]));								
							}
							SkillDisplaySubField.set[t-12]=true;
							SkillDisplaySubField.move[t-12].setVisible(true);
						}
						if(SkillPageTopArea.state==1)
						{																										
							SkillDisplayField.numberimage[t]=SkillPageWarrior.ActiveImage[4];
							SkillDisplayField.number[t]=114;
						}
						else if(SkillPageTopArea.state==3)
						{
							SkillDisplayField.numberimage[t]=SkillPageMage.ActiveImage[4];
							SkillDisplayField.number[t]=214;							
						}
					}
					activemove[4].setBounds(coractive[4][0], coractive[4][1], 40, 40);
			}
		});
		
		activemove[4].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
					if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[1]-clicky+e.getY())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200 && (nowcor[1]-clicky+e.getY()+40)<=768)
					activemove[4].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=nowcor[1]-clicky+e.getY(), 40, 40);
					else if((nowcor[0]-clickx+e.getX())<0)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[4].setBounds(nowcor[0]=0,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[4].setBounds(nowcor[0]=0,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[4].setBounds(nowcor[0]=0,nowcor[1]=728,40,40);
					}
					else if((nowcor[0]-clickx+e.getX()+40)>1200)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[4].setBounds(nowcor[0]=1160,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[4].setBounds(nowcor[0]=1160,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[4].setBounds(nowcor[0]=1160,nowcor[1]=728,40,40);
					}
					else if((nowcor[1]-clicky+e.getY())<0)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[4].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=0, 40, 40);
					}
					else if((nowcor[1]-clicky+e.getY()+40)>768)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[4].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=728, 40, 40);
					}
			}
		});

		activemove[5].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = activeskillname[0][5];
				else if(SkillPageTopArea.state==3)
				s = activeskillname[1][5];
	
				if(activelv[5]>0)
				s = s + "[Lv." + activelv[5] + "]";
				else
				s = s + "[未學習]";
				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[5]));
					SkillInfo.setText(activeskillstatement[0][5][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.ActiveImage[5]));
					SkillInfo.setText(activeskillstatement[1][5][1]);				
				}				
				nowselect=15;
			}	
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(activemove[5],0);
				nowcor[0]=coractive[5][0];
				nowcor[1]=coractive[5][1];			
			}
			public void mouseReleased(MouseEvent e)
			{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						distance[i]=(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))*(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))+(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20))*(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							if(SkillPageTopArea.state==1)
							{																																	
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[5]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[5]));
							}
							else if(SkillPageTopArea.state==3)
							{	
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[5]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[5]));								
							}
							SkillDisplayField.set[t]=true;
							SkillDisplayField.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							if(SkillPageTopArea.state==1)
							{																										
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[5]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[5]));
							}
							else if(SkillPageTopArea.state==3)
							{	
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[5]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[5]));								
							}
							SkillDisplaySubField.set[t-12]=true;
							SkillDisplaySubField.move[t-12].setVisible(true);
						}
						
						if(SkillPageTopArea.state==1)
						{																										
							SkillDisplayField.numberimage[t]=SkillPageWarrior.ActiveImage[5];
							SkillDisplayField.number[t]=115;
						}
						else if(SkillPageTopArea.state==3)
						{		
							SkillDisplayField.numberimage[t]=SkillPageMage.ActiveImage[5];
							SkillDisplayField.number[t]=215;							
						}
					}
					activemove[5].setBounds(coractive[5][0], coractive[5][1], 40, 40);
			}
		});
		
		activemove[5].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
					if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[1]-clicky+e.getY())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200 && (nowcor[1]-clicky+e.getY()+40)<=768)
					activemove[5].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=nowcor[1]-clicky+e.getY(), 40, 40);
					else if((nowcor[0]-clickx+e.getX())<0)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[5].setBounds(nowcor[0]=0,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[5].setBounds(nowcor[0]=0,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[5].setBounds(nowcor[0]=0,nowcor[1]=728,40,40);
					}
					else if((nowcor[0]-clickx+e.getX()+40)>1200)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[5].setBounds(nowcor[0]=1160,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[5].setBounds(nowcor[0]=1160,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[5].setBounds(nowcor[0]=1160,nowcor[1]=728,40,40);
					}
					else if((nowcor[1]-clicky+e.getY())<0)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[5].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=0, 40, 40);
					}
					else if((nowcor[1]-clicky+e.getY()+40)>768)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[5].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=728, 40, 40);
					}
			}
		});

		activemove[6].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = activeskillname[0][6];
				else if(SkillPageTopArea.state==3)
				s = activeskillname[1][6];
	
				if(activelv[6]>0)
				s = s + "[Lv." + activelv[6] + "]";
				else
				s = s + "[未學習]";

				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[6]));
					SkillInfo.setText(activeskillstatement[0][6][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.ActiveImage[6]));
					SkillInfo.setText(activeskillstatement[1][6][1]);				
				}
				nowselect=16;
			}	
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(activemove[6],0);
				nowcor[0]=coractive[6][0];
				nowcor[1]=coractive[6][1];			
			}
			public void mouseReleased(MouseEvent e)
			{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						distance[i]=(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))*(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))+(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20))*(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							if(SkillPageTopArea.state==1)
							{																										
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[6]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[6]));
							}
							else if(SkillPageTopArea.state==3)
							{
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[6]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[6]));								
							}
							SkillDisplayField.set[t]=true;
							SkillDisplayField.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							if(SkillPageTopArea.state==1)
							{																										
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[6]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[6]));
							}
							else if(SkillPageTopArea.state==3)
							{												
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[6]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[6]));								
							}
							SkillDisplaySubField.set[t-12]=true;
							SkillDisplaySubField.move[t-12].setVisible(true);
						}
						
						if(SkillPageTopArea.state==1)
						{																										
							SkillDisplayField.numberimage[t]=SkillPageWarrior.ActiveImage[6];
							SkillDisplayField.number[t]=116;
						}
						else if(SkillPageTopArea.state==3)
						{		
							SkillDisplayField.numberimage[t]=SkillPageMage.ActiveImage[6];
							SkillDisplayField.number[t]=216;							
						}
					}
					activemove[6].setBounds(coractive[6][0], coractive[6][1], 40, 40);
			}
		});
		
		activemove[6].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
					if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[1]-clicky+e.getY())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200 && (nowcor[1]-clicky+e.getY()+40)<=768)
					activemove[6].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=nowcor[1]-clicky+e.getY(), 40, 40);
					else if((nowcor[0]-clickx+e.getX())<0)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[6].setBounds(nowcor[0]=0,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[6].setBounds(nowcor[0]=0,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[6].setBounds(nowcor[0]=0,nowcor[1]=728,40,40);
					}
					else if((nowcor[0]-clickx+e.getX()+40)>1200)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[6].setBounds(nowcor[0]=1160,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[6].setBounds(nowcor[0]=1160,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[6].setBounds(nowcor[0]=1160,nowcor[1]=728,40,40);
					}
					else if((nowcor[1]-clicky+e.getY())<0)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[6].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=0, 40, 40);
					}
					else if((nowcor[1]-clicky+e.getY()+40)>768)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[6].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=728, 40, 40);
					}
			}
		});

		activemove[7].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = activeskillname[0][7];
				else if(SkillPageTopArea.state==3)
				s = activeskillname[1][7];
				
				if(activelv[7]>0)
				s = s + "[Lv." + activelv[7] + "]";
				else
				s = s + "[未學習]";

				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[7]));
					SkillInfo.setText(activeskillstatement[0][7][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.ActiveImage[7]));
					SkillInfo.setText(activeskillstatement[1][7][1]);				
				}				
				nowselect=17;
			}	
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(activemove[7],0);
				nowcor[0]=coractive[7][0];
				nowcor[1]=coractive[7][1];			
			}
			public void mouseReleased(MouseEvent e)
			{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						distance[i]=(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))*(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))+(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20))*(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							if(SkillPageTopArea.state==1)
							{																											
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[7]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[7]));
							}
							else if(SkillPageTopArea.state==3)
							{	
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[7]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[7]));								
							}
							SkillDisplayField.set[t]=true;
							SkillDisplayField.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							if(SkillPageTopArea.state==1)
							{																											
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[7]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[7]));
							}
							else if(SkillPageTopArea.state==3)
							{	
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[7]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[7]));								
							}
							SkillDisplaySubField.set[t-12]=true;
							SkillDisplaySubField.move[t-12].setVisible(true);
						}
						
						if(SkillPageTopArea.state==1)
						{																											
							SkillDisplayField.numberimage[t]=SkillPageWarrior.ActiveImage[7];
							SkillDisplayField.number[t]=117;
						}
						else if(SkillPageTopArea.state==3)
						{	
							SkillDisplayField.numberimage[t]=SkillPageMage.ActiveImage[7];
							SkillDisplayField.number[t]=217;							
						}
					}
					activemove[7].setBounds(coractive[7][0], coractive[7][1], 40, 40);
			}
		});
		
		activemove[7].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
					if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[1]-clicky+e.getY())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200 && (nowcor[1]-clicky+e.getY()+40)<=768)
					activemove[7].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=nowcor[1]-clicky+e.getY(), 40, 40);
					else if((nowcor[0]-clickx+e.getX())<0)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[7].setBounds(nowcor[0]=0,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[7].setBounds(nowcor[0]=0,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[7].setBounds(nowcor[0]=0,nowcor[1]=728,40,40);
					}
					else if((nowcor[0]-clickx+e.getX()+40)>1200)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[7].setBounds(nowcor[0]=1160,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[7].setBounds(nowcor[0]=1160,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[7].setBounds(nowcor[0]=1160,nowcor[1]=728,40,40);
					}
					else if((nowcor[1]-clicky+e.getY())<0)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[7].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=0, 40, 40);
					}
					else if((nowcor[1]-clicky+e.getY()+40)>768)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[7].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=728, 40, 40);
					}
			}
		});

		activemove[8].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = activeskillname[0][8];
				else if(SkillPageTopArea.state==3)
				s = activeskillname[1][8];
				
				if(activelv[8]>0)
				s = s + "[Lv." + activelv[8] + "]";
				else
				s = s + "[未學習]";

				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[8]));
					SkillInfo.setText(activeskillstatement[0][8][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.ActiveImage[8]));
					SkillInfo.setText(activeskillstatement[1][8][1]);				
				}
				nowselect=18;
			}	
			public void mousePressed(MouseEvent e)
			{
				clickx=e.getX();
				clicky=e.getY();
				PanelListenner.w.add(activemove[8],0);
				nowcor[0]=coractive[8][0];
				nowcor[1]=coractive[8][1];			
			}
			public void mouseReleased(MouseEvent e)
			{
					int min=801;
					int t=-1;
					for(int i=0;i<18;i++)
					{
						distance[i]=(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))*(nowcor[0]+20-(SkillDisplayField.cormove[i][0]+20))+(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20))*(nowcor[1]+20-(SkillDisplayField.cormove[i][1]+20));
						if(min>distance[i])
						{
							min=distance[i];
							t=i;
						}
					}
					if(t!=-1)
					{
						if(t>=0 && t<=11)
						{
							if(SkillPageTopArea.state==1)
							{																																	
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[8]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[8]));
							}
							else if(SkillPageTopArea.state==3)
							{	
								SkillDisplayField.skillimage[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[8]));
								SkillDisplayField.move[t].setIcon(new ImageIcon(SkillPageMage.ActiveImage[8]));								
							}
							SkillDisplayField.set[t]=true;
							SkillDisplayField.move[t].setVisible(true);
						}
						else if(t>=12 && t<=17)
						{ 
							if(SkillPageTopArea.state==1)
							{																											
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[8]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[8]));
							}
							else if(SkillPageTopArea.state==3)
							{
								SkillDisplaySubField.skillimage[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[8]));
								SkillDisplaySubField.move[t-12].setIcon(new ImageIcon(SkillPageMage.ActiveImage[8]));								
							}
							SkillDisplaySubField.set[t-12]=true;
							SkillDisplaySubField.move[t-12].setVisible(true);
						}
						if(SkillPageTopArea.state==1)
						{																											
							SkillDisplayField.numberimage[t]=SkillPageWarrior.ActiveImage[8];
							SkillDisplayField.number[t]=118;
						}
						else if(SkillPageTopArea.state==3)
						{	
							SkillDisplayField.numberimage[t]=SkillPageMage.ActiveImage[8];
							SkillDisplayField.number[t]=218;							
						}
					}
					activemove[8].setBounds(coractive[8][0], coractive[8][1], 40, 40);
			}
		});
		
		activemove[8].addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
					if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[1]-clicky+e.getY())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200 && (nowcor[1]-clicky+e.getY()+40)<=768)
					activemove[8].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=nowcor[1]-clicky+e.getY(), 40, 40);
					else if((nowcor[0]-clickx+e.getX())<0)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[8].setBounds(nowcor[0]=0,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[8].setBounds(nowcor[0]=0,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[8].setBounds(nowcor[0]=0,nowcor[1]=728,40,40);
					}
					else if((nowcor[0]-clickx+e.getX()+40)>1200)
					{
						if((nowcor[1]-clicky+e.getY())>=0 && (nowcor[1]-clicky+e.getY()+40)<=768)
						activemove[8].setBounds(nowcor[0]=1160,nowcor[1]=nowcor[1]-clicky+e.getY(),40,40);
						else if((nowcor[1]-clicky+e.getY())<0)
						activemove[8].setBounds(nowcor[0]=1160,nowcor[1]=0,40,40);
						else if((nowcor[1]-clicky+e.getY()+40)>768)
						activemove[8].setBounds(nowcor[0]=1160,nowcor[1]=728,40,40);
					}
					else if((nowcor[1]-clicky+e.getY())<0)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[8].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=0, 40, 40);
					}
					else if((nowcor[1]-clicky+e.getY()+40)>768)
					{
						if((nowcor[0]-clickx+e.getX())>=0 && (nowcor[0]-clickx+e.getX()+40)<=1200)
						activemove[8].setBounds(nowcor[0]=nowcor[0]-clickx+e.getX(), nowcor[1]=728, 40, 40);
					}
			}
		});

		inactivemove[0].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = inactiveskillname[0][0];
				else if(SkillPageTopArea.state==3)
				s = inactiveskillname[1][0];
				
				if(inactivelv[0]>0)
				s = s + "[Lv." + inactivelv[0] + "]";
				else
				s = s + "[未學習]";

				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.InActiveImage[0]));
					SkillInfo.setText(inactiveskillstatement[0][0][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.InActiveImage[0]));
					SkillInfo.setText(inactiveskillstatement[1][0][1]);				
				}
				nowselect=0;
			}
		});
		
		inactivemove[1].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = inactiveskillname[0][1];
				else if(SkillPageTopArea.state==3)
				s = inactiveskillname[1][1];
				
				if(inactivelv[1]>0)
				s = s + "[Lv." + inactivelv[1] + "]";
				else
				s = s + "[未學習]";
				
				DemoSkillName.setText(s);

				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.InActiveImage[1]));
					SkillInfo.setText(inactiveskillstatement[0][1][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.InActiveImage[1]));
					SkillInfo.setText(inactiveskillstatement[1][1][1]);				
				}
				nowselect=1;
			}
		});

		inactivemove[2].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = inactiveskillname[0][2];
				else if(SkillPageTopArea.state==3)
				s = inactiveskillname[1][2];
				
				if(inactivelv[2]>0)
				s = s + "[Lv." + inactivelv[2] + "]";
				else
				s = s + "[未學習]";
				
				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.InActiveImage[2]));
					SkillInfo.setText(inactiveskillstatement[0][2][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.InActiveImage[2]));
					SkillInfo.setText(inactiveskillstatement[1][2][1]);				
				}				
				nowselect=2;
			}
		});

		inactivemove[3].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = inactiveskillname[0][3];
				else if(SkillPageTopArea.state==3)
				s = inactiveskillname[1][3];
				
				if(inactivelv[3]>0)
				s = s + "[Lv." + inactivelv[3] + "]";
				else
				s = s + "[未學習]";
				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.InActiveImage[3]));
					SkillInfo.setText(inactiveskillstatement[0][3][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.InActiveImage[3]));
					SkillInfo.setText(inactiveskillstatement[1][3][1]);				
				}
				nowselect=3;
			}
		});

		inactivemove[4].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = inactiveskillname[0][4];
				else if(SkillPageTopArea.state==3)
				s = inactiveskillname[1][4];
				
				if(inactivelv[4]>0)
				s = s + "[Lv." + inactivelv[4] + "]";
				else
				s = s + "[未學習]";
				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.InActiveImage[4]));
					SkillInfo.setText(inactiveskillstatement[0][4][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.InActiveImage[4]));
					SkillInfo.setText(inactiveskillstatement[1][4][1]);				
				}
				nowselect=4;
			}
		});

		inactivemove[5].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = inactiveskillname[0][5];
				else if(SkillPageTopArea.state==3)
				s = inactiveskillname[1][5];
				
				if(inactivelv[5]>0)
				s = s + "[Lv." + inactivelv[5] + "]";
				else
				s = s + "[未學習]";

				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.InActiveImage[5]));
					SkillInfo.setText(inactiveskillstatement[0][5][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.InActiveImage[5]));
					SkillInfo.setText(inactiveskillstatement[1][5][1]);				
				}				
				nowselect=5;
			}
		});
		
		inactivemove[6].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = inactiveskillname[0][6];
				else if(SkillPageTopArea.state==3)
				s = inactiveskillname[1][6];
				
				if(inactivelv[6]>0)
				s = s + "[Lv." + inactivelv[6] + "]";
				else
				s = s + "[未學習]";

				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.InActiveImage[6]));
					SkillInfo.setText(inactiveskillstatement[0][6][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.InActiveImage[6]));
					SkillInfo.setText(inactiveskillstatement[1][6][1]);				
				}				
				nowselect=6;
			}
		});

		inactivemove[7].addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				String s="";
				if(SkillPageTopArea.state==1)
				s = inactiveskillname[0][7];
				else if(SkillPageTopArea.state==3)
				s = inactiveskillname[1][7];
				
				if(inactivelv[7]>0)
				s = s + "[Lv." + inactivelv[7] + "]";
				else
				s = s + "[未學習]";

				DemoSkillName.setText(s);
				if(SkillPageTopArea.state==1)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageWarrior.InActiveImage[7]));
					SkillInfo.setText(inactiveskillstatement[0][7][1]);
				}
				else if(SkillPageTopArea.state==3)
				{
					DemoImage.setIcon(new ImageIcon(SkillPageMage.InActiveImage[7]));
					SkillInfo.setText(inactiveskillstatement[1][7][1]);				
				}
				nowselect=7;
			}
		});


		
	}
}

class SkillLearnArea extends JPanel{
	Image leaimage[] = new Image[2];
	SkillLearnArea(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//int levellim [] = new int[] {10,15,10,16,25,20,35,14,20,21,13,25,13,30};
		JButton LevelUpbtn = new JButton();
		JLabel textimage = new JLabel("消耗1點技能點數");
		String s = "/SkillPage/2-1.png";
		URL url = getClass().getResource(s);
		try {
			leaimage[0] = ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		s = "/SkillPage/2-2.png";
		url = getClass().getResource(s);
		try {
			leaimage[1] = ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		
		LevelUpbtn.setBounds(5, 5, 60, 30);
		LevelUpbtn.setFocusable(false);
		LevelUpbtn.setBorderPainted(false);
		LevelUpbtn.setFocusPainted(false);
		LevelUpbtn.setContentAreaFilled(false);
		LevelUpbtn.setIcon(new ImageIcon(leaimage[0]));
		
		textimage.setBounds(100, 5, 180, 30);
		textimage.setFont(new Font("標楷體",1,20));
		this.add(LevelUpbtn);
		this.add(textimage);
		/*
		LevelUpbtn.addActionListener(new ActionListener(){ 
			public void actionPerformed(ActionEvent e) 
			{
				String s = null;
				
				if(SkillPageTopArea.state==1 && SkillPageLeftArea.nowselect/10==1)
				{
					if(SkillPage.skillpoint>0 && SkillPageLeftArea.activelearnlevel[SkillPageLeftArea.nowselect%10]<5 && Playing.playerlevel>=levellim[SkillPageLeftArea.nowselect%10])
					{
						SkillPage.skillpoint--;
						InformationPowerUpdate.pointshow.setText("當前技能點數：" + SkillPage.skillpoint);
						SkillPageLeftArea.activelearnlevel[SkillPageLeftArea.nowselect%10]++;
					}
					s = SkillPageLeftArea.activeskillname[SkillPageLeftArea.nowselect%10] + "[Lv." + SkillPageLeftArea.activelearnlevel[SkillPageLeftArea.nowselect%10] + "]";
				}
				else if(SkillPageTopArea.state==1 && SkillPageLeftArea.nowselect/10==0)
				{
					if(SkillPage.skillpoint>0 && SkillPageLeftArea.inactivelearnlevel[SkillPageLeftArea.nowselect%10]<5 && Playing.playerlevel>=levellim[7+SkillPageLeftArea.nowselect%10])
					{
						SkillPage.skillpoint--;
						InformationPowerUpdate.pointshow.setText("當前技能點數：" + SkillPage.skillpoint);
						SkillPageLeftArea.inactivelearnlevel[SkillPageLeftArea.nowselect%10]++;
					}				
					s = SkillPageLeftArea.inactiveskillname[SkillPageLeftArea.nowselect%10] + "[Lv." + SkillPageLeftArea.inactivelearnlevel[SkillPageLeftArea.nowselect%10] + "]";
				}
				else if(SkillPageTopArea.state==0)
				{
					if(SkillPage.skillpoint>0 && SkillPageBeginner.attacklevel<30)
					{
						SkillPage.skillpoint--;
						InformationPowerUpdate.pointshow.setText("當前技能點數：" + SkillPage.skillpoint);
						SkillPageBeginner.attacklevel++;
					}
					s = "普通攻擊" + "[Lv." +  SkillPageBeginner.attacklevel + "]";
					SkillPageLeftArea.SkillInfo.setText("當前等級：Lv" + SkillPageBeginner.attacklevel +"\n等級上限：Lv30\n"
							+ "攻擊範圍：角色正前方1格\n技能等級每提升1級攻擊力+5%\n基礎傷害為100%物理傷害" );

				}
				SkillPageLeftArea.DemoSkillName.setText(s);
			} 
		}); 
		*/
		LevelUpbtn.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e)
			{
				String s = null;
				LevelUpbtn.setIcon(new ImageIcon(leaimage[1]));
				if(SkillPageTopArea.state==1 && SkillPageLeftArea.nowselect/10==1)
				{
					if(Playing.career==1 && SkillPage.skillpoint>0 && 
					SkillPageLeftArea.activelv[SkillPageLeftArea.nowselect%10]<SkillPageLeftArea.activelearntoplv[0][SkillPageLeftArea.nowselect%10] && 
					Playing.playerlevel>=SkillPageLeftArea.activelearnlv[0][SkillPageLeftArea.nowselect%10])
					{
						SkillPage.skillpoint--;
						InformationPowerUpdate.pointshow1.setText("當前技能點數：" + SkillPage.skillpoint);
						InformationPowerUpdate.pointshow2.setText("當前技能點數：" + SkillPage.skillpoint);
						InformationPowerUpdate.pointshow3.setText("當前技能點數：" + SkillPage.skillpoint);

						SkillPageLeftArea.activelv[SkillPageLeftArea.nowselect%10]++;
					}
					if(SkillPageLeftArea.activelv[SkillPageLeftArea.nowselect%10]>0)
					s = SkillPageLeftArea.activeskillname[0][SkillPageLeftArea.nowselect%10] + "[Lv." + SkillPageLeftArea.activelv[SkillPageLeftArea.nowselect%10] + "]";
					else
					s = SkillPageLeftArea.activeskillname[0][SkillPageLeftArea.nowselect%10] + "[未學習]";					
				}
				else if(SkillPageTopArea.state==1 && SkillPageLeftArea.nowselect/10==0)
				{
					if(Playing.career==1 && SkillPage.skillpoint>0 && 
					SkillPageLeftArea.inactivelv[SkillPageLeftArea.nowselect%10]<SkillPageLeftArea.inactivelearntoplv[0][SkillPageLeftArea.nowselect%10] && 
					Playing.playerlevel>=SkillPageLeftArea.inactivelearnlv[0][SkillPageLeftArea.nowselect%10])
					{
						SkillPage.skillpoint--;
						InformationPowerUpdate.pointshow1.setText("當前技能點數：" + SkillPage.skillpoint);
						InformationPowerUpdate.pointshow2.setText("當前技能點數：" + SkillPage.skillpoint);
						InformationPowerUpdate.pointshow3.setText("當前技能點數：" + SkillPage.skillpoint);
						
						SkillPageLeftArea.inactivelv[SkillPageLeftArea.nowselect%10]++;
					}	
					if(SkillPageLeftArea.inactivelv[SkillPageLeftArea.nowselect%10]>0)
					s = SkillPageLeftArea.inactiveskillname[0][SkillPageLeftArea.nowselect%10] + "[Lv." + SkillPageLeftArea.inactivelv[SkillPageLeftArea.nowselect%10] + "]";
					else
					s = SkillPageLeftArea.inactiveskillname[0][SkillPageLeftArea.nowselect%10] + "[未學習]";				
				}
				else if(SkillPageTopArea.state==3 && SkillPageLeftArea.nowselect/10==1)
				{
					if(Playing.career==1 && SkillPage.skillpoint>0 && 
					SkillPageLeftArea.activelv[SkillPageLeftArea.nowselect%10]<SkillPageLeftArea.activelearntoplv[1][SkillPageLeftArea.nowselect%10] && 
					Playing.playerlevel>=SkillPageLeftArea.activelearnlv[1][SkillPageLeftArea.nowselect%10])
					{
						SkillPage.skillpoint--;
						InformationPowerUpdate.pointshow1.setText("當前技能點數：" + SkillPage.skillpoint);
						InformationPowerUpdate.pointshow2.setText("當前技能點數：" + SkillPage.skillpoint);
						InformationPowerUpdate.pointshow3.setText("當前技能點數：" + SkillPage.skillpoint);
						
						SkillPageLeftArea.activelv[SkillPageLeftArea.nowselect%10]++;
					}
					if(SkillPageLeftArea.activelv[SkillPageLeftArea.nowselect%10]>0)
					s = SkillPageLeftArea.activeskillname[1][SkillPageLeftArea.nowselect%10] + "[Lv." + SkillPageLeftArea.activelv[SkillPageLeftArea.nowselect%10] + "]";
					else
					s = SkillPageLeftArea.activeskillname[1][SkillPageLeftArea.nowselect%10] + "[未學習]";
				}
				else if(SkillPageTopArea.state==3 && SkillPageLeftArea.nowselect/10==0)
				{
					if(Playing.career==1 && SkillPage.skillpoint>0 && 
					SkillPageLeftArea.inactivelv[SkillPageLeftArea.nowselect%10]<SkillPageLeftArea.inactivelearntoplv[1][SkillPageLeftArea.nowselect%10] && 
					Playing.playerlevel>=SkillPageLeftArea.inactivelearnlv[1][SkillPageLeftArea.nowselect%10])
					{
						SkillPage.skillpoint--;
						InformationPowerUpdate.pointshow1.setText("當前技能點數：" + SkillPage.skillpoint);
						InformationPowerUpdate.pointshow2.setText("當前技能點數：" + SkillPage.skillpoint);
						InformationPowerUpdate.pointshow3.setText("當前技能點數：" + SkillPage.skillpoint);
						
						SkillPageLeftArea.inactivelv[SkillPageLeftArea.nowselect%10]++;
					}	
					if(SkillPageLeftArea.inactivelv[SkillPageLeftArea.nowselect%10]>0)
					s = SkillPageLeftArea.inactiveskillname[1][SkillPageLeftArea.nowselect%10] + "[Lv." + SkillPageLeftArea.inactivelv[SkillPageLeftArea.nowselect%10] + "]";
					else
					s = SkillPageLeftArea.inactiveskillname[1][SkillPageLeftArea.nowselect%10] + "[未學習]";
					
				}		
				/*
				else if(SkillPageTopArea.state==0)
				{
					if(SkillPage.skillpoint>0 && SkillPageBeginner.attacklevel<30)
					{
						SkillPage.skillpoint--;
						InformationPowerUpdate.pointshow1.setText("當前技能點數：" + SkillPage.skillpoint);
						InformationPowerUpdate.pointshow2.setText("當前技能點數：" + SkillPage.skillpoint);
						SkillPageBeginner.attacklevel++;
					}
					s = "普通攻擊" + "[Lv." +  SkillPageBeginner.attacklevel + "]";
					SkillPageLeftArea.SkillInfo.setText("當前等級：Lv" + SkillPageBeginner.attacklevel +"\n等級上限：Lv30\n"
							+ "攻擊範圍：角色正前方1格\n" );

				}
				*/
				SkillPageLeftArea.DemoSkillName.setText(s);

			}
			public void mouseReleased(MouseEvent e)
			{
				LevelUpbtn.setIcon(new ImageIcon(leaimage[0]));
			}
		});
		
	}
	
	
}

class SkillPageRightBase extends JPanel{
	CardLayout skillpagerightcardlayout;

	SkillPageRightBase(){
		super();
		this.setLayout(new CardLayout());
		this.setOpaque(false);
		SkillPageBeginner skillpagebeginner = new SkillPageBeginner();
		SkillPageWarrior skillpagewarrior = new SkillPageWarrior();
		SkillPageShooter skillpageshooter = new SkillPageShooter();
		SkillPageMage skillpagemage = new SkillPageMage();
		
		skillpagerightcardlayout=(CardLayout)this.getLayout();
		

		this.add(skillpagebeginner, "beginner");
		this.add(skillpagewarrior, "warrior");
		this.add(skillpageshooter, "shooter");
		this.add(skillpagemage, "mage");
		skillpagerightcardlayout.show(this, "beginner");

	}
}

class SkillPageBeginner extends JPanel{
	static int attacklevel = 1;
	SkillPageBeginner(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//this.setBackground(new Color(125,125,125));
		JLabel attack = new JLabel();
		JLabel pointshow = new JLabel();
		String s = "/Skill/666.png";
		URL url = getClass().getResource(s);
		
		pointshow.setFont(new Font("標楷體",0,20));
		pointshow.setText("當前技能點數：" + SkillPage.skillpoint);
		pointshow.setOpaque(false);
		//pointshow.setBackground(new Color(255,255,255));
		pointshow.setBounds(255, 340, 170, 30);
		InformationPowerUpdate.pointshow1=pointshow;
		this.add(pointshow);
		try {
			attack.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}
		SkillPageLeftArea.DemoImage.setIcon(attack.getIcon());
		attack.setBounds(190, 145, 40, 40);
		
		
		this.add(attack);
		
		attack.addMouseListener(new MouseAdapter() { 
			public void mouseClicked(MouseEvent e)
			{
				SkillPageLeftArea.DemoImage.setIcon(attack.getIcon());
				SkillPageLeftArea.DemoSkillName.setText("普通攻擊[Lv."+ attacklevel +"]");
				SkillPageLeftArea.SkillInfo.setText("當前等級：Lv" + attacklevel +"\n等級上限：Lv1\n"
						+ "攻擊範圍：角色正前方1格\n基礎傷害為100%物理傷害\n" );
			}	
		});
	}
}

class SkillPageWarrior extends JPanel{
	static Image ActiveImage[] = new Image[9];
	static Image InActiveImage[] = new Image[8];
	SkillPageWarrior(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		//this.setBackground(new Color(125,125,125));
		JLabel Active[] = new JLabel[9];
		JLabel InActive[] = new JLabel[8];
		JLabel pointshow = new JLabel();
		String ActiveString[] = new String[9];
		String InActiveString[] = new String[8];
		URL url[]= new URL[2];
		
		/*
		for(int i=0;i<7;i++)
		{
			Active[i] = new JLabel();
			InActive[i] = new JLabel();
			Active[i].setOpaque(true);
			Active[i].setBackground(new Color(255,255,255));
			InActive[i].setOpaque(true);
			InActive[i].setBackground(new Color(255,255,255));
			ActiveString[i] = "/Skill/11" + i +".png";
			InActiveString[i] = "/Skill/10" + i + ".png";
			url[0]=getClass().getResource(ActiveString[i]);
			url[1]=getClass().getResource(InActiveString[i]);
			try {
				ActiveImage[i]=ImageIO.read(url[0]);
				InActiveImage[i]=ImageIO.read(url[1]);
			} catch (IOException e) {
				e.printStackTrace();
			}
			Active[i].setIcon(new ImageIcon(ActiveImage[i]));
			InActive[i].setIcon(new ImageIcon(InActiveImage[i]));
			SkillPageLeftArea.activemove[i].setIcon(new ImageIcon(ActiveImage[i]));
			SkillPageLeftArea.inactivemove[i].setIcon(new ImageIcon(InActiveImage[i]));
			this.add(Active[i]);
			this.add(InActive[i]);
		}
		*/
		for(int i=0;i<8;i++)
		{
			InActive[i] = new JLabel();
			InActive[i].setOpaque(true);
			InActive[i].setBackground(new Color(255,255,255));
			InActiveString[i] = "/Skill/10" + i + ".png";
			url[1]=getClass().getResource(InActiveString[i]);
			try {
				InActiveImage[i]=ImageIO.read(url[1]);
			} catch (IOException e) {
				e.printStackTrace();
			}
			InActive[i].setIcon(new ImageIcon(InActiveImage[i]));
			SkillPageLeftArea.inactivemove[i].setIcon(new ImageIcon(InActiveImage[i]));
			this.add(InActive[i]);
		}
		for(int i=0;i<9;i++)
		{
			Active[i] = new JLabel();
			Active[i].setOpaque(true);
			Active[i].setBackground(new Color(255,255,255));
			ActiveString[i] = "/Skill/11" + i +".png";
			url[0]=getClass().getResource(ActiveString[i]);
			try {
				ActiveImage[i]=ImageIO.read(url[0]);
			} catch (IOException e) {
				e.printStackTrace();
			}
			Active[i].setIcon(new ImageIcon(ActiveImage[i]));
			SkillPageLeftArea.activemove[i].setIcon(new ImageIcon(ActiveImage[i]));
			this.add(Active[i]);
		}
		
		
		
		pointshow.setFont(new Font("標楷體",0,20));
		pointshow.setText("當前技能點數：" + SkillPage.skillpoint);
		pointshow.setOpaque(false);
		//pointshow.setBackground(new Color(255,255,255));
		pointshow.setBounds(255, 340, 170, 30);
		InformationPowerUpdate.pointshow2=pointshow;
		this.add(pointshow);
		//SkillPageLeftArea.DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[0]));
		
		Active[0].setBounds(70, 10, 40, 40);
		Active[1].setBounds(10, 150, 40, 40);
		Active[2].setBounds(130, 150, 40, 40);
		Active[3].setBounds(310, 150, 40, 40);
		Active[4].setBounds(70, 150, 40, 40);
		Active[5].setBounds(190, 10, 40, 40);
		Active[6].setBounds(250, 10, 40, 40);
		Active[7].setBounds(370, 220, 40, 40);
		Active[8].setBounds(190, 290, 40, 40);
		
		InActive[0].setBounds(310, 10, 40, 40);
		InActive[1].setBounds(310, 80, 40, 40);
		InActive[2].setBounds(130, 10, 40, 40);
		InActive[3].setBounds(70, 220, 40, 40);
		InActive[4].setBounds(190, 150, 40, 40);
		InActive[5].setBounds(250, 150, 40, 40);
		InActive[6].setBounds(370, 10, 40, 40);
		InActive[7].setBounds(250, 290, 40, 40);
		/*
		Active[0].setBounds(90, 10, 40, 40);
		InActive[3].setBounds(220, 10, 40, 40);
		Active[2].setBounds(285, 10, 40, 40);
		InActive[2].setBounds(350, 10, 40, 40);
		
		InActive[0].setBounds(25, 75, 40, 40);
		InActive[5].setBounds(155, 75, 40, 40);
		Active[1].setBounds(220, 75, 40, 40);
		Active[5].setBounds(285, 75, 40, 40);

		Active[3].setBounds(90, 140, 40, 40);
		InActive[1].setBounds(220, 140, 40, 40);
		Active[4].setBounds(285, 140, 40, 40);
		InActive[4].setBounds(350, 140, 40, 40);
	
		InActive[6].setBounds(200, 205, 40, 40);
	
		Active[6].setBounds(200, 270, 40, 40);
		*/

	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		g.setColor(new Color(255,255,255));
		
		g.drawLine(110, 30, 130, 30);
		g.drawLine(90, 50, 90, 150);
		
		g.drawLine(60, 80, 90, 80);
		g.drawLine(60, 80, 60, 120);
		g.drawLine(30, 120, 60, 120);
		g.drawLine(30, 120, 30, 150);
		
		g.drawLine(90, 80, 120, 80);
		g.drawLine(120, 80, 120, 120);
		g.drawLine(120, 120, 150, 120);
		g.drawLine(150, 120, 150, 150);
	
		g.drawLine(30, 190, 30, 240);
		g.drawLine(90, 190, 90, 220);
		g.drawLine(150, 190, 150, 240);
		g.drawLine(30, 240, 70, 240);
		g.drawLine(110, 240, 150, 240);
		
		g.drawLine(210, 50, 210, 150);
		g.drawLine(270, 50, 270, 150);
		
		g.drawLine(330, 50, 330, 80);
		
		g.drawLine(390, 50, 390, 220);
		
		g.drawLine(210, 240, 370, 240);
		
		g.drawLine(210, 240, 210, 290);
		g.drawLine(230, 310, 250, 310);

		g.drawLine(90, 240, 90, 310);
		g.drawLine(90, 310, 190, 310);

		
		
		/*
		g.drawLine(45, 30, 90, 30);
		g.drawLine(45, 30, 45, 75);
		
		g.drawLine(45, 115, 45, 160);
		g.drawLine(45, 160, 90, 160);
		
		g.drawLine(130, 30, 175, 30);
		g.drawLine(175, 30, 175, 75);
		
		g.drawLine(175, 115, 175, 160);
		g.drawLine(130, 160, 175, 160);
		
		g.drawLine(240, 50, 240, 75);
		
		g.drawLine(240, 115, 240, 140);
		
		g.drawLine(305, 50, 305, 75);

		g.drawLine(370, 50, 370, 140);

		g.drawLine(110, 180, 110, 225);
		g.drawLine(110, 225, 200, 225);

		g.drawLine(370, 180, 370, 225);
		g.drawLine(240, 225, 370, 225);

		g.drawLine(220, 245, 220, 270);
		*/
	}
}

class SkillPageShooter extends JPanel{
	SkillPageShooter(){
		super();
		this.setLayout(null);
		JLabel bk = new JLabel();
		String s = "/SkillPage/not.png";
		URL url = getClass().getResource(s);
		try {
			bk.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
		bk.setBounds(0, 0, 425, 370);
		this.add(bk);
		//this.setOpaque();
	}
}

class SkillPageMage extends JPanel{
	static Image ActiveImage[] = new Image[9];
	static Image InActiveImage[] = new Image[8];	
	SkillPageMage(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		JLabel Active[] = new JLabel[9];
		JLabel InActive[] = new JLabel[8];
		JLabel pointshow = new JLabel();
		String ActiveString[] = new String[9];
		String InActiveString[] = new String[8];
		URL url[]= new URL[2];
		
		for(int i=0;i<8;i++)
		{
			InActive[i] = new JLabel();
			InActive[i].setOpaque(true);
			InActive[i].setBackground(new Color(255,255,255));
			InActiveString[i] = "/Skill/20" + i + ".png";
			url[1]=getClass().getResource(InActiveString[i]);
			try {
				InActiveImage[i]=ImageIO.read(url[1]);
			} catch (IOException e) {
				e.printStackTrace();
			}
			InActive[i].setIcon(new ImageIcon(InActiveImage[i]));
			//SkillPageLeftArea.inactivemove[i].setIcon(new ImageIcon(InActiveImage[i]));
			this.add(InActive[i]);
		}
		for(int i=0;i<9;i++)
		{
			Active[i] = new JLabel();
			Active[i].setOpaque(true);
			Active[i].setBackground(new Color(255,255,255));
			ActiveString[i] = "/Skill/21" + i +".png";
			url[0]=getClass().getResource(ActiveString[i]);
			try {
				ActiveImage[i]=ImageIO.read(url[0]);
			} catch (IOException e) {
				e.printStackTrace();
			}
			Active[i].setIcon(new ImageIcon(ActiveImage[i]));
			//SkillPageLeftArea.activemove[i].setIcon(new ImageIcon(ActiveImage[i]));
			this.add(Active[i]);
		}
		
		
		
		pointshow.setFont(new Font("標楷體",0,20));
		pointshow.setText("當前技能點數：" + SkillPage.skillpoint);
		pointshow.setOpaque(false);
		//pointshow.setBackground(new Color(255,255,255));
		pointshow.setBounds(255, 340, 170, 30);
		InformationPowerUpdate.pointshow3=pointshow;
		//InformationPowerUpdate.pointshow2=pointshow; 記得補
		
		this.add(pointshow);
		//SkillPageLeftArea.DemoImage.setIcon(new ImageIcon(SkillPageWarrior.ActiveImage[0]));
		
		Active[0].setBounds(10, 80, 40, 40);
		Active[1].setBounds(370, 220, 40, 40);
		Active[2].setBounds(82, 80, 40, 40);
		Active[3].setBounds(154, 80, 40, 40);
		Active[4].setBounds(226, 80, 40, 40);
		Active[5].setBounds(298, 80, 40, 40);
		Active[6].setBounds(10, 290, 40, 40);
		Active[7].setBounds(130, 290, 40, 40);
		Active[8].setBounds(250, 290, 40, 40);
		
		InActive[0].setBounds(154, 10, 40, 40);
		InActive[1].setBounds(10, 150, 40, 40);
		InActive[2].setBounds(82, 150, 40, 40);
		InActive[3].setBounds(154, 150, 40, 40);
		InActive[4].setBounds(226, 150, 40, 40);
		InActive[5].setBounds(298, 150, 40, 40);
		InActive[6].setBounds(10, 220, 40, 40);
		InActive[7].setBounds(370, 290, 40, 40);
		
		/*
		JLabel bk = new JLabel();
		String s = "/SkillPage/not.png";
		URL url = getClass().getResource(s);
		try {
			bk.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
		bk.setBounds(0, 0, 425, 370);
		this.add(bk);
		*/
	}
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		g.setColor(new Color(255,255,255));
		
		g.drawLine(30, 30, 390, 30);
		
		g.drawLine(30, 30, 30, 80);
		g.drawLine(102, 30, 102, 80);
		g.drawLine(174, 50, 174, 80);
		g.drawLine(246, 30, 246, 80);
		g.drawLine(318, 30, 318, 80);
		g.drawLine(390, 30, 390, 220);
		
		g.drawLine(30, 120, 30, 150);
		g.drawLine(102, 120, 102, 150);
		g.drawLine(174, 120, 174, 150);
		g.drawLine(246, 120, 246, 150);
		g.drawLine(318, 120, 318, 150);

		g.drawLine(30, 190, 30, 220);
		g.drawLine(102, 190, 102, 240);
		g.drawLine(174, 190, 174, 240);
		g.drawLine(246, 190, 246, 240);
		g.drawLine(318, 190, 318, 240);

		g.drawLine(50, 240, 318, 240);
		
		g.drawLine(30, 260, 30, 290);
		
		g.drawLine(50, 310, 130, 310);
		g.drawLine(170, 310, 250, 310);
		g.drawLine(290, 310, 370, 310);
		
		
	}

	
}



class PlayerEquipmentInfo extends JPanel{
	static int playerinfox=450,playerinfoy=240,clickx,clicky;
	static Image btnimage[] = new Image[2];
	PlayerEquipmentInfo(){
		super();
		this.setLayout(null);
		ImageShowArea imageshowarea = new ImageShowArea();
		MovableAreaAndClose movableareaandclose = new MovableAreaAndClose();
		PlayerEquipmentCenterInfo playerequipmentcenterinfo = new PlayerEquipmentCenterInfo();
		JToggleButton showimagebtn = new JToggleButton();
		JLabel background = new JLabel();
		String s = "/playinfo/bk.png";
		URL url = getClass().getResource(s);
		try {
			background.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/playinfo/0-1.png";
		url = getClass().getResource(s);
		try {
			btnimage[0]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		s = "/playinfo/0-2.png";
		url = getClass().getResource(s);
		try {
			btnimage[1]=ImageIO.read(url);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		PanelListenner.imageshowarea=imageshowarea;
		movableareaandclose.setBounds(0, 0, 200, 25);
		movableareaandclose.closebtn.setBounds(160, 0, 40, 25);
		movableareaandclose.closebtn.setFont(new Font("標楷體",0,10));
		
		showimagebtn.setBounds(135, 35, 60, 20);
		showimagebtn.setFocusable(false);
		showimagebtn.setBorderPainted(false);
		showimagebtn.setFocusPainted(false);
		showimagebtn.setContentAreaFilled(false);
		showimagebtn.setIcon(new ImageIcon(btnimage[0]));
		
		playerequipmentcenterinfo.setBounds(5, 55, 190, 250);
		
		background.setBounds(0, 0, 200, 310);
		this.add(background);
		
		background.add(showimagebtn);
		background.add(movableareaandclose);
		background.add(playerequipmentcenterinfo);
		
		movableareaandclose.closebtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PanelListenner.playerinfo=false;
				showimagebtn.setSelected(false);
				showimagebtn.setIcon(new ImageIcon(btnimage[0]));
				PanelListenner.w.remove(imageshowarea);
				PanelListenner.w.remove(PlayerEquipmentInfo.this);
			}

		});

		
		movableareaandclose.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				clickx=e.getX();
				clicky=e.getY();
			}
		});
		
		movableareaandclose.addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				int x=e.getX();
				int y=e.getY();
				if((playerinfox+x-clickx)>=0 && (playerinfox+x-clickx)+200<=1200 && (playerinfoy+y-clicky)>=0 && (playerinfoy+y-clicky)+310<=768)
				{	
					PlayerEquipmentInfo.this.setBounds(playerinfox=playerinfox+x-clickx, playerinfoy=playerinfoy+y-clicky, 200, 310);
				}
				else if((playerinfox+x-clickx)<0)
				{
					if((playerinfoy+y-clicky)>=0 && (playerinfoy+y-clicky)+310<=768)
					PlayerEquipmentInfo.this.setBounds(playerinfox=0, playerinfoy=playerinfoy+y-clicky, 200, 310);
					else if((playerinfoy+y-clicky)<0)
					PlayerEquipmentInfo.this.setBounds(playerinfox=0, playerinfoy=0, 200, 310);
					else if((playerinfoy+y-clicky)+310>768)
					PlayerEquipmentInfo.this.setBounds(playerinfox=0, playerinfoy=458, 200, 310);
				}
				else if((playerinfox+x-clickx)+200>1200)
				{
					if((playerinfoy+y-clicky)>=0 && (playerinfoy+y-clicky)+310<=768)
					PlayerEquipmentInfo.this.setBounds(playerinfox=1000, playerinfoy=playerinfoy+y-clicky, 200, 310);
					else if((playerinfoy+y-clicky)<0)
					PlayerEquipmentInfo.this.setBounds(playerinfox=1000, playerinfoy=0, 200, 310);
					else if((playerinfoy+y-clicky)+310>768)
					PlayerEquipmentInfo.this.setBounds(playerinfox=1000, playerinfoy=458, 200, 310);
				}
				else if((playerinfoy+y-clicky)<0)
				{
					if((playerinfox+x-clickx)>=0 && (playerinfox+x-clickx)+200<=1200)
					PlayerEquipmentInfo.this.setBounds(playerinfox=playerinfox+x-clickx, playerinfoy=0, 200, 310);
				}
				else if((playerinfoy+y-clicky)+310>768)
				{
					if((playerinfox+x-clickx)>=0 && (playerinfox+x-clickx)+200<=1200)
					PlayerEquipmentInfo.this.setBounds(playerinfox=playerinfox+x-clickx, playerinfoy=458, 200, 310);					
				}
			}
		});

		showimagebtn.addChangeListener(new ChangeListener() {			
			public void stateChanged(ChangeEvent e) {
				if(showimagebtn.isSelected()==true)
				{
					showimagebtn.setIcon(new ImageIcon(btnimage[1]));
					imageshowarea.setBounds(playerinfox+200, playerinfoy, 210, 310);
					PanelListenner.w.add(imageshowarea,0);
					
				}
				else if(showimagebtn.isSelected()==false)
				{
					showimagebtn.setIcon(new ImageIcon(btnimage[0]));
					PanelListenner.w.remove(imageshowarea);
				}
			}		
		});

		
	}
}

class PlayerEquipmentCenterInfo extends JPanel{
	PlayerEquipmentCenterInfo(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
	
		//this.setBackground(new Color(210,210,210));
		CenterPlayer centerplayer = new CenterPlayer();
		PlayerHat playerhat = new PlayerHat();
		PlayerTop playertop = new PlayerTop();
		PlayerBelt playerbelt = new PlayerBelt();
		PlayerBracer playerbracer = new PlayerBracer();
		PlayerGlove playerglove = new PlayerGlove();
		PlayerPant playerpant = new PlayerPant();
		PlayerShoe playershoe = new PlayerShoe();
		PlayerWeapon playerweapon = new PlayerWeapon();
		PlayerRing1 playerring1 = new PlayerRing1();
		PlayerRing2 playerring2 = new PlayerRing2();
		PlayerTalisman1 playertalisman1 = new PlayerTalisman1();
		PlayerTalisman2 playertalisman2 = new PlayerTalisman2();

		
		playerhat.setBounds(7, 5, 40, 40);
		playertop.setBounds(7, 55, 40, 40);
		playerbelt.setBounds(7, 105, 40, 40);
		playerbracer.setBounds(7, 155, 40, 40);
		playerglove.setBounds(7, 205, 40, 40);
		playerpant.setBounds(52, 205, 40, 40);
		playershoe.setBounds(97, 205, 40, 40);
		playerweapon.setBounds(142, 205, 40, 40);
		playerring1.setBounds(142, 155, 40, 40);
		playerring2.setBounds(142, 105, 40, 40);
		playertalisman1.setBounds(142, 55, 40, 40);
		playertalisman2.setBounds(142, 5, 40, 40);
		centerplayer.setBounds(70, 125, 48, 48);
		
		
		this.add(centerplayer);
		this.add(playertalisman2);
		this.add(playertalisman1);
		this.add(playerring2);
		this.add(playerring1);
		this.add(playerweapon);
		this.add(playershoe);
		this.add(playerpant);
		this.add(playerglove);
		this.add(playerbracer);
		this.add(playerbelt);
		this.add(playertop);
		this.add(playerhat);


		
	}
}

class ImageShowArea extends JPanel{
	static Image img;
	ImageShowArea(){
		super();
		this.setLayout(null);
		JLabel bk = new JLabel();
		String s = "/playinfo/imgit.png";
		URL url = getClass().getResource(s);
		try {
			bk.setIcon(new ImageIcon(ImageIO.read(url)));
		} catch (IOException e) {
			e.printStackTrace();
		}
		bk.setBounds(0, 0, 210, 310);
		this.add(bk);
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.drawImage(img, 5, 5, 205, 305, 0, 0, 400, 600, null);
	}
}

class CenterPlayer extends JPanel{
	CenterPlayer(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.drawImage(Player.mainplayer, 0, 0, 48, 48, 48, 0, 96, 48, null);
	}
}

class PlayerHat extends JLabel{
	PlayerHat(){
		super("帽子",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class PlayerTop extends JLabel{
	PlayerTop(){
		super("衣服",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class PlayerBelt extends JLabel{
	PlayerBelt(){
		super("腰帶",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class PlayerBracer extends JLabel{
	PlayerBracer(){
		super("護腕",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class PlayerGlove extends JLabel{
	PlayerGlove(){
		super("手套",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class PlayerPant extends JLabel{
	PlayerPant(){
		super("褲子",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class PlayerShoe extends JLabel{
	PlayerShoe(){
		super("鞋子",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class PlayerWeapon extends JLabel{
	PlayerWeapon(){
		super("武器",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class PlayerRing1 extends JLabel{
	PlayerRing1(){
		super("戒指",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class PlayerRing2 extends JLabel{
	PlayerRing2(){
		super("戒指",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class PlayerTalisman1 extends JLabel{
	PlayerTalisman1(){
		super("護符",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class PlayerTalisman2 extends JLabel{
	PlayerTalisman2(){
		super("護符",SwingConstants.CENTER);
		this.setOpaque(true);
		this.setBackground(new Color(255,255,255));
		this.setFont(new Font("標楷體",0,16));
	}
}

class RefreshMap extends Thread{
	public void run() {
		
	}
}

class Player extends Thread{
	static int playerx=34,playery=32,preplayerx=34,preplayery=32,rx,ry;
	//static int mapx,mapy;
	static Monster monster; 
	static boolean playermovable=true;
	static boolean paintable=true;
	static boolean up=false;
	static boolean down=false;
	static boolean left=false;
	static boolean right=false;
	static int up1=0;
	static int down1=0;
	static int left1=0;
	static int right1=0;
	static int toward=1;
	static Image mainplayer;
	Player(){
		//playermovable=false;
	}
	/*
	public void initial(Image img1) {
		//mapx=img1.getWidth(null)/48;
		//mapy=img1.getHeight(null)/48;
		//mainplayer=Displaycharacter.testwalk;
	}
	*/	
	public void run(){
		/*
		while(true)
		{
		*/
			mainplayer=DisplayC.mainplayer;
			/*if(up || down || right || left)
			{
			*/
				move();
				rx=preplayerx*48;
				ry=preplayery*48;
				/*
				if(up || down || right || left)
				{
				*/
				if(paintable && (preplayerx!=playerx || preplayery!=playery))
				{
				
					for(int i=0;i<48;i++)
					{
					//move();
						try {  
							Thread.sleep(5);  
						} catch (InterruptedException e) {  
							e.printStackTrace();  
						}
					
						if(toward==1)
						{
							//if(preplayery!=playery)
							ry=ry-1;
							up1++;
							if(up1>=48)
							up1%=48;
						}
						else if(toward==2)
						{
							//if(preplayery!=playery)
							ry=ry+1;
							down1++;
							if(down1>=48)
							down1%=48;
						}
						else if(toward==3)
						{
							//if(preplayerx!=playerx)
							rx=rx-1;
							left1++;
							if(left1>=48)
							left1%=48;
						}
						else if(toward==4)
						{
							//if(preplayerx!=playerx)
							rx=rx+1;
							right1++;
							if(right1>=48)
							right1%=48;
						}
					}
				}
				else if(preplayerx==playerx && preplayery==playery)
				{
					for(int i=0;i<48;i++)
					{
						try {  
							Thread.sleep(5);  
						} catch (InterruptedException e) {  
							e.printStackTrace();  
						}	
						if(toward==1)
						{
							up1++;
							if(up1>=48)
							up1%=48;
						}
						else if(toward==2)
						{
							down1++;
							if(down1>=48)
							down1%=48;
						}
						else if(toward==3)
						{
							left1++;
							if(left1>=48)
							left1%=48;
						}
						else if(toward==4)
						{
							right1++;
							if(right1>=48)
							right1%=48;
						}
					}
				}
				playermovable=true;
			//}
		//}
	}
	
	public void move() {
		//movef();
		preplayerx=playerx;
		preplayery=playery;
		movef();
		
		switch(Playing.nowmap)
		{
			case 0:
				if(playerx==36 && playery==14)
				{
					Playing.nowmap=31;
					playerx=22;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}
				else if(playerx==21 && playery==17)
				{
					Playing.nowmap=11;
					playerx=37;
					playery=48;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();		
					progressbarupdate.index=4;			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();
				}
				else if(playerx==52 && playery==17)
				{
					Playing.nowmap=33;
					playerx=22;
					playery=28;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();				
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();
				}
				else if(playerx==12 && playery==25)
				{
					Playing.nowmap=43;
					playerx=31;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}
				else if(playerx==61 && playery==26)
				{
					Playing.nowmap=39;
					playerx=13;
					playery=10;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}				
				else if(playerx==19 && playery==28)
				{
					Playing.nowmap=3;
					playerx=22;
					playery=13;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}
				else if(playerx==26 && playery==29)
				{
					Playing.nowmap=10;
					playerx=22;
					playery=13;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}				
				else if(playerx==37 && playery==28)
				{
					Playing.nowmap=1;
					playerx=29;
					playery=13;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}				
				else if(playerx==39 && playery==28)
				{
					Playing.nowmap=9;
					playerx=13;
					playery=13;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}				
				else if(playerx==16 && playery==38)
				{
					Playing.nowmap=2;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}
				else if(playerx==16 && playery==46)
				{
					Playing.nowmap=4;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}
				else if(playerx==29 && playery==46)
				{
					Playing.nowmap=8;
					playerx=17;
					playery=18;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}
				else if(playerx==52 && playery==40)
				{
					Playing.nowmap=25;
					playerx=14;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}		
			break;
			case 1:
				if(playerx==30 && playery==13)
				{
					Playing.nowmap=0;
					playerx=38;
					playery=28;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}			
			break;
			case 2:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=0;
					playerx=16;
					playery=39;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}			
			break;
			case 3:
				if(playerx==23 && playery==13)
				{
					Playing.nowmap=0;
					playerx=20;
					playery=28;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}			
			break;
			case 4:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=0;
					playerx=16;
					playery=47;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}			
			break;
			case 5:
				if(playerx==12 && (playery==17 || playery==18))
				{
					Playing.nowmap=8;
					playerx=22;
					playery=13;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}			
			break;
			case 6:
				if(playerx==17 && playery==8)
				{
					Playing.nowmap=7;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}			
			break;
			case 7:
				if(playerx==17 && playery==8)
				{
					Playing.nowmap=8;
					playerx=17;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}	
				else if(playerx==17 && playery==18)
				{
					Playing.nowmap=6;
					playerx=17;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}	
			
			break;
			case 8:
				if(playerx==17 && playery==19)
				{
					Playing.nowmap=0;
					playerx=29;
					playery=47;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}			
				else if(playerx==17 && playery==8)
				{
					Playing.nowmap=7;
					playerx=17;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}		
				else if(playerx==23 && playery==13)
				{
					Playing.nowmap=5;
					playerx=13;
					playery=17;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}			
				
			break;
			case 9:
				if(playerx==12 && playery==13)
				{
					Playing.nowmap=0;
					playerx=38;
					playery=28;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}			
			break;
			case 10:
				if(playerx==23 && playery==13)
				{
					Playing.nowmap=0;
					playerx=27;
					playery=29;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();			
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();				
				}			
			break;
			case 11:
				if(playerx==36 && playery==8)
				{
					Playing.nowmap=13;
					playerx=21;
					playery=26;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==37 && playery==8)
				{
					Playing.nowmap=13;
					playerx=22;
					playery=26;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
				else if(playerx==61 && playery==28)
				{
					Playing.nowmap=21;
					playerx=13;
					playery=19;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}					
				else if(playerx==37 && playery==49)
				{
					Playing.nowmap=0;
					playerx=21;
					playery=18;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					progressbarupdate.index=2;
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
				else if(playerx==11 && playery==28)
				{
					Playing.nowmap=12;
					playerx=28;
					playery=16;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					progressbarupdate.index=5;
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
			break;
			case 12:
				if(playerx==29 && (playery==16 || playery==17))
				{
					Playing.nowmap=11;
					playerx=12;
					playery=28;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					progressbarupdate.index=4;
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
			break;
			case 13:
				if(playerx==21 && playery==27)
				{
					Playing.nowmap=11;
					playerx=36;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==27)
				{
					Playing.nowmap=11;
					playerx=37;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==21 && playery==15)
				{
					Playing.nowmap=14;
					playerx=19;
					playery=22;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}					
				
			break;
			case 14:
				if(playerx==19 && playery==23)
				{
					Playing.nowmap=13;
					playerx=21;
					playery=16;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 15:
				if(playerx==19 && playery==23)
				{
					Playing.nowmap=13;
					playerx=21;
					playery=16;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==26 && playery==10)
				{
					Playing.nowmap=16;
					playerx=26;
					playery=10;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 16:
				if(playerx==19 && playery==23)
				{
					Playing.nowmap=13;
					playerx=21;
					playery=16;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==9)
				{
					Playing.nowmap=17;
					playerx=21;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 17:
				if(playerx==21 && playery==8)
				{
					Playing.nowmap=16;
					playerx=19;
					playery=10;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=16;
					playerx=19;
					playery=10;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==21 && playery==23)
				{
					Playing.nowmap=18;
					playerx=21;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
				else if(playerx==22 && playery==23)
				{
					Playing.nowmap=18;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 18:
				if(playerx==21 && playery==8)
				{
					Playing.nowmap=17;
					playerx=21;
					playery=22;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=17;
					playerx=22;
					playery=22;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==21 && playery==23)
				{
					Playing.nowmap=19;
					playerx=21;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==23)
				{
					Playing.nowmap=19;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 19:
				if(playerx==21 && playery==8)
				{
					Playing.nowmap=18;
					playerx=21;
					playery=22;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=18;
					playerx=22;
					playery=22;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;			
		   case 20:
				if(playerx==21 && playery==8)
				{
					Playing.nowmap=18;
					playerx=21;
					playery=22;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=18;
					playerx=22;
					playery=22;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;			
		   case 21:
				if(playerx==12 && playery==19)
				{
					Playing.nowmap=11;
					playerx=60;
					playery=28;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=23;
					playerx=22;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==19)
				{
					Playing.nowmap=22;
					playerx=13;
					playery=19;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;			
		   case 22:
				if(playerx==12 && playery==19)
				{
					Playing.nowmap=21;
					playerx=31;
					playery=19;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=24;
					playerx=22;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;			
		   case 23:
				if(playerx==22 && playery==28)
				{
					Playing.nowmap=21;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==13)
				{
					Playing.nowmap=24;
					playerx=13;
					playery=13;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==32 && playery==14)
				{
					Playing.nowmap=24;
					playerx=13;
					playery=14;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;			
		   case 24:
				if(playerx==22 && playery==28)
				{
					Playing.nowmap=22;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==13)
				{
					Playing.nowmap=23;
					playerx=31;
					playery=13;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==12 && playery==14)
				{
					Playing.nowmap=23;
					playerx=31;
					playery=14;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;			
		   case 25:
				if(playerx==14 && playery==8)
				{
					Playing.nowmap=0;
					playerx=52;
					playery=41;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==14 && playery==19)
				{
					Playing.nowmap=26;
					playerx=14;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;			
		   case 26:
				if(playerx==14 && playery==8)
				{
					Playing.nowmap=25;
					playerx=14;
					playery=18;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==14 && playery==19)
				{
					Playing.nowmap=27;
					playerx=16;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;			
		   case 27:
				if(playerx==16 && playery==8)
				{
					Playing.nowmap=26;
					playerx=14;
					playery=18;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;					   
		   case 28:
				if(playerx==14 && playery==8)
				{
					Playing.nowmap=0;
					playerx=52;
					playery=41;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==14 && playery==19)
				{
					Playing.nowmap=29;
					playerx=14;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;			
		   case 29:
				if(playerx==14 && playery==8)
				{
					Playing.nowmap=28;
					playerx=14;
					playery=18;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==14 && playery==19)
				{
					Playing.nowmap=30;
					playerx=16;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;			
		   case 30:
				if(playerx==16 && playery==8)
				{
					Playing.nowmap=29;
					playerx=14;
					playery=18;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;			
		   case 31:
				if(playerx==22 && playery==28)
				{
					Playing.nowmap=0;
					playerx=36;
					playery=15;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==33 && playery==8)
				{
					Playing.nowmap=32;
					playerx=13;
					playery=8;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;			
		   case 32:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=31;
					playerx=32;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;			
		   case 33:
				if(playerx==22 && playery==29)
				{
					Playing.nowmap=0;
					playerx=52;
					playery=18;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==16 && playery==24)
				{
					Playing.nowmap=34;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==28 && playery==24)
				{
					Playing.nowmap=35;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
				else if(playerx==17 && playery==13)
				{
					Playing.nowmap=36;
					playerx=21;
					playery=13;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
				else if(playerx==27 && playery==13)
				{
					Playing.nowmap=37;
					playerx=13;
					playery=13;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=38;
					playerx=22;
					playery=13;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;			
		   case 34:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=33;
					playerx=16;
					playery=25;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;			
		   case 35:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=33;
					playerx=28;
					playery=25;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;			
		   case 36:
				if(playerx==22 && playery==13)
				{
					Playing.nowmap=33;
					playerx=18;
					playery=13;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;			
		   case 37:
				if(playerx==12 && playery==13)
				{
					Playing.nowmap=33;
					playerx=26;
					playery=13;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;			
		   case 38:
				if(playerx==22 && playery==14)
				{
					Playing.nowmap=33;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;			
		   case 39:
				if(playerx==12 && playery==10)
				{
					Playing.nowmap=0;
					playerx=60;
					playery=26;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==10)
				{
					Playing.nowmap=42;
					playerx=13;
					playery=12;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}														
		   break;			
		   case 40:
				if(playerx==12 && playery==10)
				{
					Playing.nowmap=0;
					playerx=60;
					playery=26;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==10)
				{
					Playing.nowmap=42;
					playerx=13;
					playery=12;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==13)
				{
					Playing.nowmap=41;
					playerx=27;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}																	
		   break;			
		   case 41:
				if(playerx==27 && playery==8)
				{
					Playing.nowmap=40;
					playerx=22;
					playery=12;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}																	
		   break;			
		   case 42:
				if(playerx==12 && playery==12)
				{
					Playing.nowmap=39;
					playerx=31;
					playery=10;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==13)
				{
					Playing.nowmap=39;
					playerx=31;
					playery=10;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}																
		   break;			
		   case 43:
				if(playerx==32 && playery==8)
				{
					Playing.nowmap=0;
					playerx=13;
					playery=25;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==8)
				{
					Playing.nowmap=44;
					playerx=31;
					playery=13;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}																
		   break;			
		   case 44:
				if(playerx==32 && playery==13)
				{
					Playing.nowmap=43;
					playerx=13;
					playery=8;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==13)
				{
					Playing.nowmap=46;
					playerx=31;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=45;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}																				
		   break;			
		   case 45:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=44;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}																				
		   break;			
		   case 46:
				if(playerx==32 && playery==8)
				{
					Playing.nowmap=44;
					playerx=13;
					playery=13;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==8)
				{
					Playing.nowmap=47;
					playerx=33;
					playery=19;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;			
		   case 47:
				if(playerx==34 && playery==19)
				{
					Playing.nowmap=46;
					playerx=13;
					playery=8;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==19)
				{
					Playing.nowmap=56;
					playerx=31;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==26 && playery==10)
				{
					Playing.nowmap=48;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==31 && playery==10)
				{
					Playing.nowmap=49;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==26 && playery==14)
				{
					Playing.nowmap=50;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==14)
				{
					Playing.nowmap=51;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==26 && playery==18)
				{
					Playing.nowmap=52;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==18)
				{
					Playing.nowmap=53;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==18)
				{
					Playing.nowmap=54;
					playerx=17;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==21)
				{
					Playing.nowmap=54;
					playerx=17;
					playery=28;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==28 && playery==22)
				{
					Playing.nowmap=55;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;			
		   case 48:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=47;
					playerx=26;
					playery=11;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 49:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=47;
					playerx=31;
					playery=11;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 50:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=47;
					playerx=26;
					playery=15;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 51:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=47;
					playerx=32;
					playery=15;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 52:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=47;
					playerx=26;
					playery=19;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 53:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=47;
					playerx=32;
					playery=19;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 54:
				if(playerx==17 && playery==8)
				{
					Playing.nowmap=47;
					playerx=22;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==17 && playery==29)
				{
					Playing.nowmap=47;
					playerx=22;
					playery=22;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 55:
				if(playerx==22 && playery==8)
				{
					Playing.nowmap=47;
					playerx=28;
					playery=21;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 56:
				if(playerx==32 && playery==8)
				{
					Playing.nowmap=47;
					playerx=13;
					playery=19;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==8)
				{
					Playing.nowmap=57;
					playerx=31;
					playery=9;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;
		   case 57:
				if(playerx==32 && playery==9)
				{
					Playing.nowmap=56;
					playerx=13;
					playery=8;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==9)
				{
					Playing.nowmap=58;
					playerx=31;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=59;
					playerx=22;
					playery=28;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;
		   case 58:
				if(playerx==32 && playery==8)
				{
					Playing.nowmap=57;
					playerx=13;
					playery=9;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==8)
				{
					Playing.nowmap=64;
					playerx=43;
					playery=23;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;
		   case 59:
				if(playerx==22 && playery==29)
				{
					Playing.nowmap=57;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=60;
					playerx=22;
					playery=28;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;
		   case 60:
				if(playerx==22 && playery==29)
				{
					Playing.nowmap=59;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=62;
					playerx=22;
					playery=28;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;
		   case 61:
				if(playerx==22 && playery==29)
				{
					Playing.nowmap=59;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=62;
					playerx=22;
					playery=28;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;
		   case 62:
				if(playerx==22 && playery==29)
				{
					Playing.nowmap=61;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=63;
					playerx=22;
					playery=28;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;
		   case 63:
				if(playerx==22 && playery==29)
				{
					Playing.nowmap=62;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}											
		   break;
		   case 64:
				if(playerx==28 && playery==8)
				{
					Playing.nowmap=65;
					playerx=12;
					playery=23;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==28 && playery==39)
				{
					Playing.nowmap=98;
					playerx=12;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==44 && playery==23)
				{
					Playing.nowmap=58;
					playerx=12;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==44 && playery==24)
				{
					Playing.nowmap=58;
					playerx=12;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==23)
				{
					Playing.nowmap=109;
					playerx=22;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==24)
				{
					Playing.nowmap=109;
					playerx=22;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 65:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=66;
					playerx=17;
					playery=18;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==24)
				{
					Playing.nowmap=64;
					playerx=28;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 66:
				if(playerx==17 && playery==8)
				{
					Playing.nowmap=67;
					playerx=12;
					playery=23;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==17 && playery==19)
				{
					Playing.nowmap=65;
					playerx=12;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 67:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=68;
					playerx=36;
					playery=48;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==24)
				{
					Playing.nowmap=66;
					playerx=17;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 68:
				if(playerx==36 && playery==49)
				{
					Playing.nowmap=67;
					playerx=12;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==37 && playery==49)
				{
					Playing.nowmap=67;
					playerx=12;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==36 && playery==8)
				{
					Playing.nowmap=69;
					playerx=32;
					playery=49;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==37 && playery==8)
				{
					Playing.nowmap=69;
					playerx=32;
					playery=49;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==17 && playery==45)
				{
					Playing.nowmap=70;
					playerx=22;
					playery=14;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==25 && playery==45)
				{
					Playing.nowmap=71;
					playerx=22;
					playery=14;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==33 && playery==45)
				{
					Playing.nowmap=72;
					playerx=22;
					playery=14;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==40 && playery==45)
				{
					Playing.nowmap=73;
					playerx=13;
					playery=14;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==48 && playery==45)
				{
					Playing.nowmap=74;
					playerx=13;
					playery=14;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==56 && playery==45)
				{
					Playing.nowmap=75;
					playerx=13;
					playery=14;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==24 && playery==34)
				{
					Playing.nowmap=82;
					playerx=22;
					playery=14;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==47 && playery==34)
				{
					Playing.nowmap=84;
					playerx=13;
					playery=14;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==36 && playery==36)
				{
					Playing.nowmap=86;
					playerx=17;
					playery=18;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==16 && playery==18)
				{
					Playing.nowmap=89;
					playerx=16;
					playery=21;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==25 && playery==18)
				{
					Playing.nowmap=89;
					playerx=32;
					playery=21;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==18)
				{
					Playing.nowmap=88;
					playerx=17;
					playery=21;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==41 && playery==18)
				{
					Playing.nowmap=88;
					playerx=33;
					playery=21;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==48 && playery==18)
				{
					Playing.nowmap=90;
					playerx=17;
					playery=21;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==57 && playery==18)
				{
					Playing.nowmap=90;
					playerx=33;
					playery=21;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 69:
				if(playerx==32 && playery==50)
				{
					Playing.nowmap=68;
					playerx=36;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==33 && playery==50)
				{
					Playing.nowmap=68;
					playerx=37;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 70:
				if(playerx==17 && playery==8)
				{
					Playing.nowmap=76;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==14)
				{
					Playing.nowmap=68;
					playerx=18;
					playery=45;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 71:
				if(playerx==17 && playery==8)
				{
					Playing.nowmap=77;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==14)
				{
					Playing.nowmap=68;
					playerx=26;
					playery=45;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 72:
				if(playerx==17 && playery==8)
				{
					Playing.nowmap=78;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==14)
				{
					Playing.nowmap=68;
					playerx=34;
					playery=45;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 73:
				if(playerx==18 && playery==8)
				{
					Playing.nowmap=79;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==14)
				{
					Playing.nowmap=68;
					playerx=39;
					playery=45;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 74:
				if(playerx==18 && playery==8)
				{
					Playing.nowmap=80;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==14)
				{
					Playing.nowmap=68;
					playerx=47;
					playery=45;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 75:
				if(playerx==18 && playery==8)
				{
					Playing.nowmap=81;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==14)
				{
					Playing.nowmap=68;
					playerx=55;
					playery=45;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 76:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=70;
					playerx=17;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 77:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=71;
					playerx=17;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 78:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=72;
					playerx=17;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 79:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=73;
					playerx=18;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 80:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=74;
					playerx=18;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 81:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=75;
					playerx=18;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 82:
				if(playerx==17 && playery==8)
				{
					Playing.nowmap=83;
					playerx=22;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==14)
				{
					Playing.nowmap=68;
					playerx=25;
					playery=34;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
		   break;
		   case 83:
				if(playerx==22 && playery==28)
				{
					Playing.nowmap=82;
					playerx=17;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
		   break;
		   case 84:
				if(playerx==18 && playery==8)
				{
					Playing.nowmap=85;
					playerx=22;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==14)
				{
					Playing.nowmap=68;
					playerx=46;
					playery=34;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
		   break;
		   case 85:
				if(playerx==22 && playery==28)
				{
					Playing.nowmap=84;
					playerx=18;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
		   break;
		   case 86:
				if(playerx==17 && playery==8)
				{
					Playing.nowmap=87;
					playerx=22;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==17 && playery==19)
				{
					Playing.nowmap=68;
					playerx=36;
					playery=37;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 87:
				if(playerx==22 && playery==28)
				{
					Playing.nowmap=86;
					playerx=17;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;
		   case 88:
				if(playerx==25 && playery==8)
				{
					Playing.nowmap=91;
					playerx=25;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==16)
				{
					Playing.nowmap=94;
					playerx=22;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==38 && playery==16)
				{
					Playing.nowmap=95;
					playerx=13;
					playery=8;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==21)
				{
					Playing.nowmap=68;
					playerx=33;
					playery=18;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==21)
				{
					Playing.nowmap=68;
					playerx=40;
					playery=18;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 89:
				if(playerx==24 && playery==8)
				{
					Playing.nowmap=92;
					playerx=24;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==17 && playery==21)
				{
					Playing.nowmap=68;
					playerx=17;
					playery=18;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==31 && playery==21)
				{
					Playing.nowmap=68;
					playerx=24;
					playery=18;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==37 && playery==16)
				{
					Playing.nowmap=94;
					playerx=13;
					playery=8;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 90:
				if(playerx==25 && playery==8)
				{
					Playing.nowmap=93;
					playerx=25;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==16)
				{
					Playing.nowmap=95;
					playerx=22;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}								
				else if(playerx==18 && playery==21)
				{
					Playing.nowmap=68;
					playerx=49;
					playery=18;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==21)
				{
					Playing.nowmap=68;
					playerx=56;
					playery=18;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 91:
				if(playerx==25 && playery==8)
				{
					Playing.nowmap=88;
					playerx=25;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==16)
				{
					Playing.nowmap=96;
					playerx=22;
					playery=10;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}								
				else if(playerx==38 && playery==16)
				{
					Playing.nowmap=97;
					playerx=13;
					playery=10;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 92:
				if(playerx==24 && playery==8)
				{
					Playing.nowmap=89;
					playerx=24;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==37 && playery==16)
				{
					Playing.nowmap=96;
					playerx=13;
					playery=10;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}								
		   break;
		   case 93:
				if(playerx==25 && playery==8)
				{
					Playing.nowmap=90;
					playerx=25;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==16)
				{
					Playing.nowmap=97;
					playerx=22;
					playery=10;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}								
		   break;
		   case 94:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=89;
					playerx=36;
					playery=16;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==8)
				{
					Playing.nowmap=88;
					playerx=13;
					playery=16;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}								
		   break;
		   case 95:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=88;
					playerx=37;
					playery=16;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==8)
				{
					Playing.nowmap=90;
					playerx=13;
					playery=16;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}								
		   break;
		   case 96:
				if(playerx==12 && playery==10)
				{
					Playing.nowmap=92;
					playerx=36;
					playery=16;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==10)
				{
					Playing.nowmap=91;
					playerx=13;
					playery=16;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}								
		   break;
		   case 97:
				if(playerx==12 && playery==10)
				{
					Playing.nowmap=91;
					playerx=37;
					playery=16;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==10)
				{
					Playing.nowmap=93;
					playerx=13;
					playery=16;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}								
		   break;
		   case 98:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=64;
					playerx=28;
					playery=38;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==24)
				{
					Playing.nowmap=99;
					playerx=17;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}								
		   break;
		   case 99:
				if(playerx==17 && playery==8)
				{
					Playing.nowmap=98;
					playerx=12;
					playery=23;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==17 && playery==19)
				{
					Playing.nowmap=100;
					playerx=12;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}								
		   break;
		   case 100:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=99;
					playerx=17;
					playery=18;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==24)
				{
					Playing.nowmap=101;
					playerx=36;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}								
		   break;
		   case 101:
				if(playerx==36 && playery==8)
				{
					Playing.nowmap=100;
					playerx=12;
					playery=23;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==37 && playery==8)
				{
					Playing.nowmap=100;
					playerx=12;
					playery=23;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==48 && playery==10)
				{
					Playing.nowmap=102;
					playerx=22;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==60 && playery==31)
				{
					Playing.nowmap=103;
					playerx=22;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==34)
				{
					Playing.nowmap=104;
					playerx=26;
					playery=21;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==46)
				{
					Playing.nowmap=105;
					playerx=21;
					playery=16;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==29 && playery==46)
				{
					Playing.nowmap=106;
					playerx=21;
					playery=16;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==42 && playery==46)
				{
					Playing.nowmap=107;
					playerx=21;
					playery=16;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==57 && playery==47)
				{
					Playing.nowmap=108;
					playerx=26;
					playery=15;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
		   break;
		   case 102:
				if(playerx==22 && playery==28)
				{
					Playing.nowmap=101;
					playerx=48;
					playery=11;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 103:
				if(playerx==22 && playery==28)
				{
					Playing.nowmap=101;
					playerx=60;
					playery=32;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 104:
				if(playerx==27 && playery==21)
				{
					Playing.nowmap=101;
					playerx=19;
					playery=34;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 105:
				if(playerx==22 && playery==16)
				{
					Playing.nowmap=101;
					playerx=19;
					playery=46;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 106:
				if(playerx==22 && playery==16)
				{
					Playing.nowmap=101;
					playerx=30;
					playery=46;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 107:
				if(playerx==22 && playery==16)
				{
					Playing.nowmap=101;
					playerx=43;
					playery=46;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 108:
				if(playerx==27 && playery==15)
				{
					Playing.nowmap=101;
					playerx=58;
					playery=47;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 109:
				if(playerx==23 && playery==8)
				{
					Playing.nowmap=64;
					playerx=13;
					playery=23;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==8)
				{
					Playing.nowmap=111;
					playerx=32;
					playery=18;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 110:
				if(playerx==23 && playery==8)
				{
					Playing.nowmap=111;
					playerx=13;
					playery=18;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==8)
				{
					Playing.nowmap=154;
					playerx=51;
					playery=18;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 111:
				if(playerx==18 && playery==9)
				{
					Playing.nowmap=112;
					playerx=21;
					playery=13;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==27 && playery==9)
				{
					Playing.nowmap=113;
					playerx=13;
					playery=13;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==10)
				{
					Playing.nowmap=114;
					playerx=17;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==12 && playery==18)
				{
					Playing.nowmap=110;
					playerx=22;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==33 && playery==18)
				{
					Playing.nowmap=109;
					playerx=13;
					playery=8;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 112:
				if(playerx==22 && playery==13)
				{
					Playing.nowmap=111;
					playerx=19;
					playery=9;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 113:
				if(playerx==12 && playery==13)
				{
					Playing.nowmap=111;
					playerx=26;
					playery=9;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 114:
				if(playerx==17 && playery==18)
				{
					Playing.nowmap=111;
					playerx=22;
					playery=11;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 115:
				if(playerx==31 && playery==46)
				{
					Playing.nowmap=140;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==43 && playery==38)
				{
					Playing.nowmap=116;
					playerx=13;
					playery=11;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==47 && playery==38)
				{
					Playing.nowmap=117;
					playerx=13;
					playery=11;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==51 && playery==38)
				{
					Playing.nowmap=118;
					playerx=13;
					playery=11;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==43 && playery==32)
				{
					Playing.nowmap=119;
					playerx=14;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==49 && playery==32)
				{
					Playing.nowmap=120;
					playerx=14;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==17 && playery==39)
				{
					Playing.nowmap=121;
					playerx=20;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==26 && playery==39)
				{
					Playing.nowmap=198;
					playerx=16;
					playery=15;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==14 && playery==25)
				{
					Playing.nowmap=122;
					playerx=14;
					playery=12;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==26 && playery==25)
				{
					Playing.nowmap=123;
					playerx=18;
					playery=12;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==14 && playery==30)
				{
					Playing.nowmap=124;
					playerx=14;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==26 && playery==30)
				{
					Playing.nowmap=126;
					playerx=14;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==16 && playery==17)
				{
					Playing.nowmap=128;
					playerx=18;
					playery=20;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==33 && playery==10)
				{
					Playing.nowmap=132;
					playerx=25;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}					
		   break;
		   case 116:
				if(playerx==13 && playery==12)
				{
					Playing.nowmap=115;
					playerx=43;
					playery=39;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==14 && playery==12)
				{
					Playing.nowmap=115;
					playerx=43;
					playery=39;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 117:
				if(playerx==13 && playery==12)
				{
					Playing.nowmap=115;
					playerx=47;
					playery=39;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==14 && playery==12)
				{
					Playing.nowmap=115;
					playerx=47;
					playery=39;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 118:
				if(playerx==13 && playery==12)
				{
					Playing.nowmap=115;
					playerx=51;
					playery=39;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==14 && playery==12)
				{
					Playing.nowmap=115;
					playerx=51;
					playery=39;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 119:
				if(playerx==14 && playery==8)
				{
					Playing.nowmap=115;
					playerx=43;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 120:
				if(playerx==14 && playery==8)
				{
					Playing.nowmap=115;
					playerx=49;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 121:
				if(playerx==20 && playery==18)
				{
					Playing.nowmap=115;
					playerx=17;
					playery=40;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==21 && playery==18)
				{
					Playing.nowmap=115;
					playerx=17;
					playery=40;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;
		   case 122:
				if(playerx==14 && playery==13)
				{
					Playing.nowmap=115;
					playerx=14;
					playery=26;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==15 && playery==13)
				{
					Playing.nowmap=115;
					playerx=14;
					playery=26;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;
		   case 123:
				if(playerx==18 && playery==13)
				{
					Playing.nowmap=115;
					playerx=26;
					playery=26;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==19 && playery==13)
				{
					Playing.nowmap=115;
					playerx=26;
					playery=26;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;
		   case 124:
				if(playerx==14 && playery==8)
				{
					Playing.nowmap=115;
					playerx=14;
					playery=29;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==15 && playery==8)
				{
					Playing.nowmap=115;
					playerx=14;
					playery=29;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==26 && playery==9)
				{
					Playing.nowmap=125;
					playerx=26;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 125:
				if(playerx==26 && playery==8)
				{
					Playing.nowmap=124;
					playerx=25;
					playery=9;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 126:
				if(playerx==14 && playery==8)
				{
					Playing.nowmap=115;
					playerx=26;
					playery=29;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==15 && playery==8)
				{
					Playing.nowmap=115;
					playerx=26;
					playery=29;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==26 && playery==9)
				{
					Playing.nowmap=127;
					playerx=27;
					playery=8;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 127:
				if(playerx==26 && playery==8)
				{
					Playing.nowmap=126;
					playerx=25;
					playery=9;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 128:
				if(playerx==18 && playery==21)
				{
					Playing.nowmap=115;
					playerx=16;
					playery=18;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==21)
				{
					Playing.nowmap=115;
					playerx=16;
					playery=18;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==13 && playery==8)
				{
					Playing.nowmap=129;
					playerx=18;
					playery=9;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==24 && playery==8)
				{
					Playing.nowmap=130;
					playerx=12;
					playery=9;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 129:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=131;
					playerx=13;
					playery=8;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==17 && playery==9)
				{
					Playing.nowmap=128;
					playerx=13;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 130:
				if(playerx==13 && playery==9)
				{
					Playing.nowmap=128;
					playerx=24;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==8)
				{
					Playing.nowmap=131;
					playerx=24;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 131:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=129;
					playerx=12;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==25 && playery==8)
				{
					Playing.nowmap=130;
					playerx=18;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 132:
				if(playerx==14 && playery==8)
				{
					Playing.nowmap=137;
					playerx=20;
					playery=22;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==20)
				{
					Playing.nowmap=133;
					playerx=22;
					playery=9;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==40 && playery==20)
				{
					Playing.nowmap=135;
					playerx=13;
					playery=9;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==25 && playery==34)
				{
					Playing.nowmap=115;
					playerx=33;
					playery=11;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==37 && playery==8)
				{
					Playing.nowmap=138;
					playerx=42;
					playery=9;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==38 && playery==8)
				{
					Playing.nowmap=138;
					playerx=43;
					playery=9;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==39 && playery==8)
				{
					Playing.nowmap=138;
					playerx=44;
					playery=9;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 133:
				if(playerx==23 && playery==8)
				{
					Playing.nowmap=132;
					playerx=13;
					playery=20;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==9)
				{
					Playing.nowmap=132;
					playerx=13;
					playery=20;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==23 && playery==10)
				{
					Playing.nowmap=132;
					playerx=13;
					playery=20;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==23 && playery==11)
				{
					Playing.nowmap=132;
					playerx=13;
					playery=20;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==12 && playery==8)
				{
					Playing.nowmap=134;
					playerx=31;
					playery=12;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==12 && playery==9)
				{
					Playing.nowmap=134;
					playerx=31;
					playery=13;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==12 && playery==10)
				{
					Playing.nowmap=134;
					playerx=31;
					playery=14;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==12 && playery==11)
				{
					Playing.nowmap=134;
					playerx=31;
					playery=15;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}													
		   break;
		   case 134:
				if(playerx==32 && playery==12)
				{
					Playing.nowmap=133;
					playerx=13;
					playery=8;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==13)
				{
					Playing.nowmap=133;
					playerx=13;
					playery=9;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==32 && playery==14)
				{
					Playing.nowmap=133;
					playerx=13;
					playery=10;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==32 && playery==15)
				{
					Playing.nowmap=133;
					playerx=13;
					playery=11;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==21 && playery==16)
				{
					Playing.nowmap=193;
					playerx=17;
					playery=26;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}														
		   break;
		   case 135:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=132;
					playerx=39;
					playery=20;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==9)
				{
					Playing.nowmap=132;
					playerx=39;
					playery=20;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==12 && playery==10)
				{
					Playing.nowmap=132;
					playerx=39;
					playery=20;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==12 && playery==11)
				{
					Playing.nowmap=132;
					playerx=39;
					playery=20;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==23 && playery==8)
				{
					Playing.nowmap=136;
					playerx=14;
					playery=19;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==23 && playery==9)
				{
					Playing.nowmap=136;
					playerx=14;
					playery=19;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}														
				else if(playerx==23 && playery==10)
				{
					Playing.nowmap=136;
					playerx=14;
					playery=19;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}														
				else if(playerx==23 && playery==11)
				{
					Playing.nowmap=136;
					playerx=14;
					playery=19;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}																		
		   break;
		   case 136:
				if(playerx==13 && playery==19)
				{
					Playing.nowmap=135;
					playerx=22;
					playery=9;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
		   break;
		   case 137:
				if(playerx==20 && playery==23)
				{
					Playing.nowmap=132;
					playerx=14;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
		   break;
		   case 138:
				if(playerx==42 && playery==10)
				{
					Playing.nowmap=132;
					playerx=37;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==43 && playery==10)
				{
					Playing.nowmap=132;
					playerx=38;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==44 && playery==10)
				{
					Playing.nowmap=132;
					playerx=39;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==27 && playery==26)
				{
					Playing.nowmap=139;
					playerx=27;
					playery=26;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==28 && playery==26)
				{
					Playing.nowmap=139;
					playerx=28;
					playery=26;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==29 && playery==26)
				{
					Playing.nowmap=139;
					playerx=29;
					playery=26;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 139:
				if(playerx==29 && playery==30)
				{
					Playing.nowmap=138;
					playerx=27;
					playery=25;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==30 && playery==30)
				{
					Playing.nowmap=138;
					playerx=28;
					playery=25;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==31 && playery==30)
				{
					Playing.nowmap=138;
					playerx=29;
					playery=25;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 140:
				if(playerx==18 && playery==8)
				{
					Playing.nowmap=115;
					playerx=31;
					playery=45;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==8)
				{
					Playing.nowmap=115;
					playerx=31;
					playery=45;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==20 && playery==8)
				{
					Playing.nowmap=115;
					playerx=31;
					playery=45;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==28)
				{
					Playing.nowmap=141;
					playerx=18;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==28)
				{
					Playing.nowmap=141;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==20 && playery==28)
				{
					Playing.nowmap=141;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 141:
				if(playerx==18 && playery==8)
				{
					Playing.nowmap=140;
					playerx=18;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==8)
				{
					Playing.nowmap=140;
					playerx=19;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==20 && playery==8)
				{
					Playing.nowmap=140;
					playerx=20;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==16)
				{
					Playing.nowmap=142;
					playerx=24;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==19)
				{
					Playing.nowmap=142;
					playerx=24;
					playery=15;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==28)
				{
					Playing.nowmap=143;
					playerx=18;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==19 && playery==28)
				{
					Playing.nowmap=143;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==20 && playery==28)
				{
					Playing.nowmap=143;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}					
		   break;
		   case 142:
				if(playerx==24 && playery==9)
				{
					Playing.nowmap=141;
					playerx=19;
					playery=15;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==16)
				{
					Playing.nowmap=141;
					playerx=19;
					playery=20;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==24 && playery==16)
				{
					Playing.nowmap=141;
					playerx=19;
					playery=20;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==25 && playery==16)
				{
					Playing.nowmap=141;
					playerx=19;
					playery=20;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 143:
				if(playerx==18 && playery==8)
				{
					Playing.nowmap=141;
					playerx=18;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==8)
				{
					Playing.nowmap=141;
					playerx=19;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==20 && playery==8)
				{
					Playing.nowmap=141;
					playerx=20;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==28)
				{
					Playing.nowmap=144;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==28)
				{
					Playing.nowmap=144;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==20 && playery==28)
				{
					Playing.nowmap=144;
					playerx=22;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 144:
				if(playerx==22 && playery==8)
				{
					Playing.nowmap=143;
					playerx=19;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==16 && playery==13)
				{
					Playing.nowmap=145;
					playerx=19;
					playery=10;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==21 && playery==13)
				{
					Playing.nowmap=146;
					playerx=16;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==28 && playery==13)
				{
					Playing.nowmap=146;
					playerx=29;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==28 && playery==17)
				{
					Playing.nowmap=146;
					playerx=29;
					playery=21;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==33 && playery==12)
				{
					Playing.nowmap=202;
					playerx=13;
					playery=9;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==31 && playery==25)
				{
					Playing.nowmap=147;
					playerx=26;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==36 && playery==25)
				{
					Playing.nowmap=148;
					playerx=26;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==21 && playery==26)
				{
					Playing.nowmap=149;
					playerx=29;
					playery=12;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==25 && playery==33)
				{
					Playing.nowmap=151;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}							
		   break;
		   case 145:
				if(playerx==20 && playery==10)
				{
					Playing.nowmap=144;
					playerx=17;
					playery=13;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 146:
				if(playerx==16 && playery==8)
				{
					Playing.nowmap=144;
					playerx=21;
					playery=12;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==29 && playery==8)
				{
					Playing.nowmap=144;
					playerx=28;
					playery=12;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==29 && playery==22)
				{
					Playing.nowmap=144;
					playerx=28;
					playery=18;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==28 && playery==14)
				{
					Playing.nowmap=209;
					playerx=23;
					playery=23;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 147:
				if(playerx==26 && playery==8)
				{
					Playing.nowmap=144;
					playerx=31;
					playery=24;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 148:
				if(playerx==26 && playery==8)
				{
					Playing.nowmap=144;
					playerx=36;
					playery=24;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 149:
				if(playerx==30 && playery==12)
				{
					Playing.nowmap=144;
					playerx=22;
					playery=26;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==12)
				{
					Playing.nowmap=150;
					playerx=21;
					playery=12;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 150:
				if(playerx==22 && playery==12)
				{
					Playing.nowmap=149;
					playerx=13;
					playery=12;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;	   
		   case 151:
				if(playerx==19 && playery==8)
				{
					Playing.nowmap=144;
					playerx=25;
					playery=32;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==32)
				{
					Playing.nowmap=152;
					playerx=18;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==32)
				{
					Playing.nowmap=152;
					playerx=18;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==20 && playery==32)
				{
					Playing.nowmap=152;
					playerx=18;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 152:
				if(playerx==18 && playery==8)
				{
					Playing.nowmap=151;
					playerx=19;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==15 && playery==13)
				{
					Playing.nowmap=200;
					playerx=14;
					playery=10;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==13)
				{
					Playing.nowmap=199;
					playerx=14;
					playery=10;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==26 && playery==25)
				{
					Playing.nowmap=201;
					playerx=29;
					playery=42;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==17 && playery==30)
				{
					Playing.nowmap=153;
					playerx=15;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 153:
				if(playerx==14 && playery==8)
				{
					Playing.nowmap=152;
					playerx=17;
					playery=29;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==15 && playery==8)
				{
					Playing.nowmap=152;
					playerx=17;
					playery=29;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==16 && playery==8)
				{
					Playing.nowmap=152;
					playerx=17;
					playery=29;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==14 && playery==32)
				{
					Playing.nowmap=154;
					playerx=24;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==15 && playery==32)
				{
					Playing.nowmap=154;
					playerx=25;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==16 && playery==32)
				{
					Playing.nowmap=154;
					playerx=27;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				
		   break;
		   case 154:
				if(playerx==24 && playery==8)
				{
					Playing.nowmap=153;
					playerx=14;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==25 && playery==8)
				{
					Playing.nowmap=153;
					playerx=15;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==26 && playery==8)
				{
					Playing.nowmap=153;
					playerx=15;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==27 && playery==8)
				{
					Playing.nowmap=153;
					playerx=16;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==52 && playery==18)
				{
					Playing.nowmap=110;
					playerx=13;
					playery=8;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==46)
				{
					Playing.nowmap=155;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 155:
				if(playerx==15 && playery==8)
				{
					Playing.nowmap=154;
					playerx=19;
					playery=46;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==17 && playery==8)
				{
					Playing.nowmap=154;
					playerx=19;
					playery=46;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==8)
				{
					Playing.nowmap=154;
					playerx=19;
					playery=46;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==20 && playery==8)
				{
					Playing.nowmap=154;
					playerx=19;
					playery=46;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==21 && playery==8)
				{
					Playing.nowmap=154;
					playerx=19;
					playery=46;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==8)
				{
					Playing.nowmap=154;
					playerx=19;
					playery=46;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==25 && playery==8)
				{
					Playing.nowmap=154;
					playerx=19;
					playery=46;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==14 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==15 && playery==31)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==16 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==17 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==18 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==19 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==20 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==21 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==22 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==23 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==24 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==25 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==15 && playery==32)
				{
					Playing.nowmap=156;
					playerx=20;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}					
		   break;
		   case 156:
				if(playerx==19 && playery==8)
				{
					Playing.nowmap=155;
					playerx=20;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==20 && playery==9)
				{
					Playing.nowmap=155;
					playerx=20;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==21 && playery==8)
				{
					Playing.nowmap=155;
					playerx=20;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==34)
				{
					Playing.nowmap=161;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==27 && playery==22)
				{
					Playing.nowmap=157;
					playerx=13;
					playery=15;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==14 && playery==15)
				{
					Playing.nowmap=205;
					playerx=17;
					playery=14;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==24 && playery==25)
				{
					Playing.nowmap=206;
					playerx=14;
					playery=14;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==14 && playery==21)
				{
					Playing.nowmap=207;
					playerx=17;
					playery=14;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==24 && playery==27)
				{
					Playing.nowmap=208;
					playerx=14;
					playery=14;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==13 && playery==27)
				{
					Playing.nowmap=204;
					playerx=14;
					playery=10;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 157:
				if(playerx==12 && playery==15)
				{
					Playing.nowmap=156;
					playerx=26;
					playery=22;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==37 && playery==30)
				{
					Playing.nowmap=158;
					playerx=13;
					playery=22;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
		   break;
		   case 158:
				if(playerx==12 && playery==22)
				{
					Playing.nowmap=157;
					playerx=36;
					playery=30;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==22 && playery==18)
				{
					Playing.nowmap=159;
					playerx=25;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
		   break;
		   case 159:
				if(playerx==23 && playery==34)
				{
					Playing.nowmap=158;
					playerx=22;
					playery=19;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==24 && playery==34)
				{
					Playing.nowmap=158;
					playerx=22;
					playery=19;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==25 && playery==34)
				{
					Playing.nowmap=158;
					playerx=22;
					playery=19;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==26 && playery==34)
				{
					Playing.nowmap=158;
					playerx=22;
					playery=19;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==27 && playery==34)
				{
					Playing.nowmap=158;
					playerx=22;
					playery=19;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==19 && playery==13)
				{
					Playing.nowmap=160;
					playerx=19;
					playery=13;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==20 && playery==13)
				{
					Playing.nowmap=160;
					playerx=20;
					playery=13;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==21 && playery==13)
				{
					Playing.nowmap=160;
					playerx=21;
					playery=13;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==29 && playery==13)
				{
					Playing.nowmap=160;
					playerx=29;
					playery=13;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==30 && playery==13)
				{
					Playing.nowmap=160;
					playerx=30;
					playery=13;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==31 && playery==13)
				{
					Playing.nowmap=160;
					playerx=31;
					playery=13;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}													
		   break;
		   case 160:
				if(playerx==19 && playery==14)
				{
					Playing.nowmap=159;
					playerx=19;
					playery=14;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==20 && playery==14)
				{
					Playing.nowmap=159;
					playerx=20;
					playery=14;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==21 && playery==14)
				{
					Playing.nowmap=159;
					playerx=21;
					playery=14;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==29 && playery==14)
				{
					Playing.nowmap=159;
					playerx=29;
					playery=14;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==30 && playery==14)
				{
					Playing.nowmap=159;
					playerx=30;
					playery=14;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==31 && playery==14)
				{
					Playing.nowmap=159;
					playerx=31;
					playery=14;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				
		   break;
		   case 161:
				if(playerx==19 && playery==8)
				{
					Playing.nowmap=156;
					playerx=19;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==20 && playery==9)
				{
					Playing.nowmap=156;
					playerx=19;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==19 && playery==32)
				{
					Playing.nowmap=162;
					playerx=24;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==20 && playery==32)
				{
					Playing.nowmap=162;
					playerx=24;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;
		   case 162:
				if(playerx==23 && playery==8)
				{
					Playing.nowmap=161;
					playerx=19;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==24 && playery==8)
				{
					Playing.nowmap=161;
					playerx=19;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==25 && playery==8)
				{
					Playing.nowmap=161;
					playerx=19;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==14 && playery==12)
				{
					Playing.nowmap=163;
					playerx=43;
					playery=32;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==16)
				{
					Playing.nowmap=164;
					playerx=14;
					playery=16;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==22)
				{
					Playing.nowmap=165;
					playerx=24;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==26)
				{
					Playing.nowmap=166;
					playerx=24;
					playery=8;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==24 && playery==26)
				{
					Playing.nowmap=167;
					playerx=13;
					playery=9;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==14 && playery==31)
				{
					Playing.nowmap=169;
					playerx=14;
					playery=10;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==24 && playery==22)
				{
					Playing.nowmap=168;
					playerx=13;
					playery=9;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==29 && playery==30)
				{
					Playing.nowmap=170;
					playerx=13;
					playery=9;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==21 && playery==34)
				{
					Playing.nowmap=171;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;
		   case 163:
				if(playerx==43 && playery==33)
				{
					Playing.nowmap=162;
					playerx=14;
					playery=13;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 164:
				if(playerx==14 && playery==17)
				{
					Playing.nowmap=162;
					playerx=19;
					playery=17;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 165:
				if(playerx==25 && playery==8)
				{
					Playing.nowmap=162;
					playerx=19;
					playery=22;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 166:
				if(playerx==24 && playery==8)
				{
					Playing.nowmap=162;
					playerx=19;
					playery=26;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 167:
				if(playerx==12 && playery==9)
				{
					Playing.nowmap=162;
					playerx=23;
					playery=26;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 168:
				if(playerx==12 && playery==9)
				{
					Playing.nowmap=162;
					playerx=23;
					playery=22;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 169:
				if(playerx==14 && playery==11)
				{
					Playing.nowmap=162;
					playerx=14;
					playery=32;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;
		   case 170:
				if(playerx==12 && playery==9)
				{
					Playing.nowmap=162;
					playerx=28;
					playery=30;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
		   break;		   
		   case 171:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==13 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==14 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==15 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==16 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==17 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==18 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==19 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==20 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==21 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==22 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==23 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==24 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==25 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==26 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==27 && playery==8)
				{
					Playing.nowmap=162;
					playerx=21;
					playery=33;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==12 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==13 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==14 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==15 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==16 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==17 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==18 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==19 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==20 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==21 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==22 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==23 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==24 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==25 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==26 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==27 && playery==32)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}					
		   break;
		   case 172:
				if(playerx==19 && playery==8)
				{
					Playing.nowmap=171;
					playerx=19;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==20 && playery==8)
				{
					Playing.nowmap=171;
					playerx=19;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==19 && playery==32)
				{
					Playing.nowmap=180;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==15 && playery==13)
				{
					Playing.nowmap=173;
					playerx=12;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
				else if(playerx==15 && playery==26)
				{
					Playing.nowmap=179;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}												
		   break;
		   case 173:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=172;
					playerx=16;
					playery=13;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==12 && playery==12)
				{
					Playing.nowmap=174;
					playerx=34;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==12)
				{
					Playing.nowmap=175;
					playerx=25;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}												
		   break;
		   case 174:
				if(playerx==34 && playery==7)
				{
					Playing.nowmap=173;
					playerx=12;
					playery=11;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==12 && playery==9)
				{
					Playing.nowmap=176;
					playerx=12;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==12 && playery==27)
				{
					Playing.nowmap=178;
					playerx=21;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==22 && playery==28)
				{
					Playing.nowmap=179;
					playerx=14;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}																
		   break;
		   case 175:
				if(playerx==12 && playery==9)
				{
					Playing.nowmap=176;
					playerx=33;
					playery=10;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==25 && playery==8)
				{
					Playing.nowmap=173;
					playerx=32;
					playery=11;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
		   break;
		   case 176:
				if(playerx==12 && playery==8)
				{
					Playing.nowmap=174;
					playerx=13;
					playery=9;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==33 && playery==9)
				{
					Playing.nowmap=175;
					playerx=13;
					playery=9;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==12 && playery==15)
				{
					Playing.nowmap=177;
					playerx=25;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}					
		   break;
		   case 177:
				if(playerx==25 && playery==8)
				{
					Playing.nowmap=176;
					playerx=13;
					playery=15;
					toward=4;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;	
		   case 178:
				if(playerx==21 && playery==8)
				{
					Playing.nowmap=174;
					playerx=12;
					playery=26;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}						
		   break;	
		   case 179:
				if(playerx==14 && playery==8)
				{
					Playing.nowmap=174;
					playerx=22;
					playery=27;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==19 && playery==8)
				{
					Playing.nowmap=172;
					playerx=15;
					playery=25;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;	
		   case 180:
				if(playerx==19 && playery==8)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==20 && playery==8)
				{
					Playing.nowmap=172;
					playerx=19;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==18 && playery==32)
				{
					Playing.nowmap=181;
					playerx=36;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==19 && playery==32)
				{
					Playing.nowmap=181;
					playerx=37;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==20 && playery==32)
				{
					Playing.nowmap=181;
					playerx=38;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==21 && playery==32)
				{
					Playing.nowmap=181;
					playerx=39;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
		   break;	
		   case 181:
				if(playerx==35 && playery==8)
				{
					Playing.nowmap=180;
					playerx=18;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==36 && playery==8)
				{
					Playing.nowmap=180;
					playerx=18;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==37 && playery==8)
				{
					Playing.nowmap=180;
					playerx=19;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==38 && playery==8)
				{
					Playing.nowmap=180;
					playerx=20;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==39 && playery==8)
				{
					Playing.nowmap=180;
					playerx=21;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}				
				else if(playerx==40 && playery==8)
				{
					Playing.nowmap=180;
					playerx=21;
					playery=31;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==46 && playery==19)
				{
					Playing.nowmap=186;
					playerx=17;
					playery=16;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==47 && playery==27)
				{
					Playing.nowmap=187;
					playerx=19;
					playery=38;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==55 && playery==26)
				{
					Playing.nowmap=187;
					playerx=49;
					playery=34;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==44 && playery==34)
				{
					Playing.nowmap=182;
					playerx=16;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==55 && playery==34)
				{
					Playing.nowmap=183;
					playerx=16;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==44 && playery==40)
				{
					Playing.nowmap=184;
					playerx=16;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==53 && playery==40)
				{
					Playing.nowmap=185;
					playerx=16;
					playery=17;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==24 && playery==45)
				{
					Playing.nowmap=188;
					playerx=31;
					playery=25;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}		
				else if(playerx==23 && playery==21)
				{
					Playing.nowmap=190;
					playerx=27;
					playery=36;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}					
		   break;
		   case 182:
				if(playerx==16 && playery==18)
				{
					Playing.nowmap=181;
					playerx=44;
					playery=35;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 183:
				if(playerx==16 && playery==18)
				{
					Playing.nowmap=181;
					playerx=53;
					playery=35;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 184:
				if(playerx==16 && playery==18)
				{
					Playing.nowmap=181;
					playerx=45;
					playery=41;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 185:
				if(playerx==16 && playery==18)
				{
					Playing.nowmap=181;
					playerx=53;
					playery=41;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 186:
				if(playerx==17 && playery==17)
				{
					Playing.nowmap=181;
					playerx=46;
					playery=20;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 187:
				if(playerx==18 && playery==38)
				{
					Playing.nowmap=181;
					playerx=47;
					playery=28;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==19 && playery==38)
				{
					Playing.nowmap=181;
					playerx=47;
					playery=28;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==20 && playery==38)
				{
					Playing.nowmap=181;
					playerx=47;
					playery=28;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==21 && playery==38)
				{
					Playing.nowmap=181;
					playerx=47;
					playery=28;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==48 && playery==34)
				{
					Playing.nowmap=181;
					playerx=55;
					playery=27;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==49 && playery==34)
				{
					Playing.nowmap=181;
					playerx=55;
					playery=27;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==50 && playery==34)
				{
					Playing.nowmap=181;
					playerx=55;
					playery=27;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 188:
				if(playerx==30 && playery==26)
				{
					Playing.nowmap=181;
					playerx=24;
					playery=46;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==31 && playery==26)
				{
					Playing.nowmap=181;
					playerx=24;
					playery=46;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==32 && playery==26)
				{
					Playing.nowmap=181;
					playerx=24;
					playery=46;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==46 && playery==13)
				{
					Playing.nowmap=189;
					playerx=44;
					playery=18;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==47 && playery==13)
				{
					Playing.nowmap=189;
					playerx=44;
					playery=18;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==48 && playery==13)
				{
					Playing.nowmap=189;
					playerx=44;
					playery=18;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 189:
				if(playerx==44 && playery==17)
				{
					Playing.nowmap=188;
					playerx=47;
					playery=14;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 190:
				if(playerx==26 && playery==37)
				{
					Playing.nowmap=181;
					playerx=23;
					playery=22;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==27 && playery==37)
				{
					Playing.nowmap=181;
					playerx=23;
					playery=22;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==28 && playery==37)
				{
					Playing.nowmap=181;
					playerx=23;
					playery=22;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==26 && playery==21)
				{
					Playing.nowmap=191;
					playerx=22;
					playery=17;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==27 && playery==21)
				{
					Playing.nowmap=191;
					playerx=22;
					playery=17;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==28 && playery==21)
				{
					Playing.nowmap=191;
					playerx=22;
					playery=17;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==42 && playery==20)
				{
					Playing.nowmap=203;
					playerx=45;
					playery=35;
					toward=1;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}			
		   break;
		   case 191:
				if(playerx==22 && playery==16)
				{
					Playing.nowmap=190;
					playerx=27;
					playery=22;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==25 && playery==14)
				{
					Playing.nowmap=192;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==26 && playery==14)
				{
					Playing.nowmap=192;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==27 && playery==14)
				{
					Playing.nowmap=192;
					playerx=19;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 192:
				if(playerx==19 && playery==8)
				{
					Playing.nowmap=191;
					playerx=26;
					playery=15;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 193:
				if(playerx==17 && playery==25)
				{
					Playing.nowmap=134;
					playerx=21;
					playery=17;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==15 && playery==85)
				{
					Playing.nowmap=194;
					playerx=16;
					playery=39;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 194:
				if(playerx==16 && playery==38)
				{
					Playing.nowmap=193;
					playerx=15;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==8)
				{
					Playing.nowmap=195;
					playerx=23;
					playery=41;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   /*
		   case 195:
		   break;
		   */
		   case 196:
				if(playerx==25 && playery==8)
				{
					Playing.nowmap=197;
					playerx=13;
					playery=27;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==23 && playery==41)
				{
					Playing.nowmap=194;
					playerx=18;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;
		   case 197:
				if(playerx==13 && playery==26)
				{
					Playing.nowmap=196;
					playerx=25;
					playery=9;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
				else if(playerx==18 && playery==8)
				{
					Playing.nowmap=137;
					playerx=29;
					playery=17;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}
		   break;	   
		   case 198:
				if(playerx==16 && playery==16)
				{
					Playing.nowmap=115;
					playerx=26;
					playery=40;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}	
				else if(playerx==17 && playery==16)
				{
					Playing.nowmap=115;
					playerx=26;
					playery=40;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}									
		   break;
		   case 199:
				if(playerx==14 && playery==11)
				{
					Playing.nowmap=152;
					playerx=23;
					playery=14;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;		   
		   case 200:
				if(playerx==14 && playery==11)
				{
					Playing.nowmap=152;
					playerx=15;
					playery=14;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;
		   case 201:
				if(playerx==29 && playery==43)
				{
					Playing.nowmap=152;
					playerx=26;
					playery=26;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;
		   case 202:
				if(playerx==12 && playery==9)
				{
					Playing.nowmap=144;
					playerx=32;
					playery=12;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;
		   case 203:
				if(playerx==45 && playery==36)
				{
					Playing.nowmap=190;
					playerx=41;
					playery=10;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;		   
		   case 204:
				if(playerx==14 && playery==11)
				{
					Playing.nowmap=156;
					playerx=13;
					playery=28;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;
		   case 205:
				if(playerx==17 && playery==15)
				{
					Playing.nowmap=156;
					playerx=14;
					playery=16;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;
		   case 206:
				if(playerx==14 && playery==15)
				{
					Playing.nowmap=156;
					playerx=24;
					playery=16;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;
		   case 207:
				if(playerx==17 && playery==15)
				{
					Playing.nowmap=156;
					playerx=14;
					playery=22;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;
		   case 208:
				if(playerx==14 && playery==15)
				{
					Playing.nowmap=156;
					playerx=24;
					playery=28;
					toward=2;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;		   
		   case 209:
				if(playerx==23 && playery==22)
				{
					Playing.nowmap=146;
					playerx=27;
					playery=14;
					toward=3;
					ProgressbarUpdate.modelcardlayout.show(ProgressbarUpdate.basis, "c0");
					ProgressbarUpdate progressbarupdate = new ProgressbarUpdate(); 
					progressbarupdate.start();	
					up=down=left=right=false;				
					monster.stop();
					this.stop();
					this.start();	
				}										
		   break;
		   
		}
		
		
		//System.out.println("nowmap=" + Playing.nowmap + "x=" + playerx + ",y=" + playery);
		//movef();	
	}
	
	void movef() {
		if(up)
		{
			if(Playing.nowmap>=0 && Playing.nowmap<=30)
			{
				if(playery>0 && (Playing.IsRun[Playing.nowmap][playery-1][playerx]==1 || Playing.IsRun[Playing.nowmap][playery-1][playerx]==2))
				playery--;
			}
			else if(Playing.nowmap>=31 && Playing.nowmap<=60)
			{
				if(playery>0 && (Playing1.IsRun[Playing.nowmap-31][playery-1][playerx]==1 || Playing1.IsRun[Playing.nowmap-31][playery-1][playerx]==2))
				playery--;
			}
			else if(Playing.nowmap>=61 && Playing.nowmap<=90)
			{
				if(playery>0 && (Playing2.IsRun[Playing.nowmap-61][playery-1][playerx]==1 || Playing2.IsRun[Playing.nowmap-61][playery-1][playerx]==2))
				playery--;
			}
			else if(Playing.nowmap>=91 && Playing.nowmap<=120)
			{
				if(playery>0 && (Playing3.IsRun[Playing.nowmap-91][playery-1][playerx]==1 || Playing3.IsRun[Playing.nowmap-91][playery-1][playerx]==2))
				playery--;
			}
			else if(Playing.nowmap>=121 && Playing.nowmap<=150)
			{
				if(playery>0 && (Playing4.IsRun[Playing.nowmap-121][playery-1][playerx]==1 || Playing4.IsRun[Playing.nowmap-121][playery-1][playerx]==2))
				playery--;
			}
			else if(Playing.nowmap>=151 && Playing.nowmap<=180)
			{
				if(playery>0 && (Playing5.IsRun[Playing.nowmap-151][playery-1][playerx]==1 || Playing5.IsRun[Playing.nowmap-151][playery-1][playerx]==2))
				playery--;
			}
			else if(Playing.nowmap>=181 && Playing.nowmap<=210)
			{
				if(playery>0 && (Playing6.IsRun[Playing.nowmap-181][playery-1][playerx]==1 || Playing6.IsRun[Playing.nowmap-181][playery-1][playerx]==2))
				playery--;
			}
			
			//up1++;
			if(up1>15)
			up1=up1%15;
			toward=1;
		}
		else if(down)
		{
			if(Playing.nowmap>=0 && Playing.nowmap<=30)
			{
				if(playery<Playing.BigMap.getHeight(null)/48-1 && (Playing.IsRun[Playing.nowmap][playery+1][playerx]==1 || Playing.IsRun[Playing.nowmap][playery+1][playerx]==2))
				playery++;
			}
			else if(Playing.nowmap>=31 && Playing.nowmap<=60)
			{
				if(playery<Playing.BigMap.getHeight(null)/48-1 && (Playing1.IsRun[Playing.nowmap-31][playery+1][playerx]==1 || Playing1.IsRun[Playing.nowmap-31][playery+1][playerx]==2))
				playery++;
			}
			else if(Playing.nowmap>=61 && Playing.nowmap<=90)
			{
				if(playery<Playing.BigMap.getHeight(null)/48-1 && (Playing2.IsRun[Playing.nowmap-61][playery+1][playerx]==1 || Playing2.IsRun[Playing.nowmap-61][playery+1][playerx]==2))
				playery++;
			}
			else if(Playing.nowmap>=91 && Playing.nowmap<=120)
			{
				if(playery<Playing.BigMap.getHeight(null)/48-1 && (Playing3.IsRun[Playing.nowmap-91][playery+1][playerx]==1 || Playing3.IsRun[Playing.nowmap-91][playery+1][playerx]==2))
				playery++;
			}
			else if(Playing.nowmap>=121 && Playing.nowmap<=150)
			{
				if(playery<Playing.BigMap.getHeight(null)/48-1 && (Playing4.IsRun[Playing.nowmap-121][playery+1][playerx]==1 || Playing4.IsRun[Playing.nowmap-121][playery+1][playerx]==2))
				playery++;
			}
			else if(Playing.nowmap>=151 && Playing.nowmap<=180)
			{
				if(playery<Playing.BigMap.getHeight(null)/48-1 && (Playing5.IsRun[Playing.nowmap-151][playery+1][playerx]==1 || Playing5.IsRun[Playing.nowmap-151][playery+1][playerx]==2))
				playery++;
			}
			else if(Playing.nowmap>=181 && Playing.nowmap<=210)
			{
				if(playery<Playing.BigMap.getHeight(null)/48-1 && (Playing6.IsRun[Playing.nowmap-181][playery+1][playerx]==1 || Playing6.IsRun[Playing.nowmap-181][playery+1][playerx]==2))
				playery++;
			}
			/*
			if(playery<Playing.BigMap[Playing.nowmap].getHeight(null)/48-1 && (Playing.IsRun[Playing.nowmap][playery+1][playerx]==1 || Playing.IsRun[Playing.nowmap][playery+1][playerx]==2))
			playery++;
			*/
			//down1++;
			if(down1>15)
			down1=down1%15;
			toward=2;
		}
		else if(left)
		{
			if(Playing.nowmap>=0 && Playing.nowmap<=30)
			{
				if(playerx>0 && (Playing.IsRun[Playing.nowmap][playery][playerx-1]==1 || Playing.IsRun[Playing.nowmap][playery][playerx-1]==2))
				playerx--;
			}
			else if(Playing.nowmap>=31 && Playing.nowmap<=60)
			{
				if(playerx>0 && (Playing1.IsRun[Playing.nowmap-31][playery][playerx-1]==1 || Playing1.IsRun[Playing.nowmap-31][playery][playerx-1]==2))
				playerx--;
			}
			else if(Playing.nowmap>=61 && Playing.nowmap<=90)
			{
				if(playerx>0 && (Playing2.IsRun[Playing.nowmap-61][playery][playerx-1]==1 || Playing2.IsRun[Playing.nowmap-61][playery][playerx-1]==2))
				playerx--;
			}
			else if(Playing.nowmap>=91 && Playing.nowmap<=120)
			{
				if(playerx>0 && (Playing3.IsRun[Playing.nowmap-91][playery][playerx-1]==1 || Playing3.IsRun[Playing.nowmap-91][playery][playerx-1]==2))
				playerx--;
			}
			else if(Playing.nowmap>=121 && Playing.nowmap<=150)
			{
				if(playerx>0 && (Playing4.IsRun[Playing.nowmap-121][playery][playerx-1]==1 || Playing4.IsRun[Playing.nowmap-121][playery][playerx-1]==2))
				playerx--;
			}
			else if(Playing.nowmap>=151 && Playing.nowmap<=180)
			{
				if(playerx>0 && (Playing5.IsRun[Playing.nowmap-151][playery][playerx-1]==1 || Playing5.IsRun[Playing.nowmap-151][playery][playerx-1]==2))
				playerx--;
			}
			else if(Playing.nowmap>=181 && Playing.nowmap<=210)
			{
				if(playerx>0 && (Playing6.IsRun[Playing.nowmap-181][playery][playerx-1]==1 || Playing6.IsRun[Playing.nowmap-181][playery][playerx-1]==2))
				playerx--;
			}
			/*
			if(playerx>0 && (Playing.IsRun[Playing.nowmap][playery][playerx-1]==1 || Playing.IsRun[Playing.nowmap][playery][playerx-1]==2))
			playerx--;
			*/
			//left1++;
			if(left1>15)
			left1=left1%15;	
			toward=3;
		}
		else if(right)
		{
			if(Playing.nowmap>=0 && Playing.nowmap<=30)
			{
				if(playerx<Playing.BigMap.getWidth(null)/48-1 && (Playing.IsRun[Playing.nowmap][playery][playerx+1]==1 || Playing.IsRun[Playing.nowmap][playery][playerx+1]==2))
				playerx++;
			}
			else if(Playing.nowmap>=31 && Playing.nowmap<=60)
			{
				if(playerx<Playing.BigMap.getWidth(null)/48-1 && (Playing1.IsRun[Playing.nowmap-31][playery][playerx+1]==1 || Playing1.IsRun[Playing.nowmap-31][playery][playerx+1]==2))
				playerx++;
			}
			else if(Playing.nowmap>=61 && Playing.nowmap<=90)
			{
				if(playerx<Playing.BigMap.getWidth(null)/48-1 && (Playing2.IsRun[Playing.nowmap-61][playery][playerx+1]==1 || Playing2.IsRun[Playing.nowmap-61][playery][playerx+1]==2))
				playerx++;
			}
			else if(Playing.nowmap>=91 && Playing.nowmap<=120)
			{
				if(playerx<Playing.BigMap.getWidth(null)/48-1 && (Playing3.IsRun[Playing.nowmap-91][playery][playerx+1]==1 || Playing3.IsRun[Playing.nowmap-91][playery][playerx+1]==2))
				playerx++;
			}
			else if(Playing.nowmap>=121 && Playing.nowmap<=150)
			{
				if(playerx<Playing.BigMap.getWidth(null)/48-1 && (Playing4.IsRun[Playing.nowmap-121][playery][playerx+1]==1 || Playing4.IsRun[Playing.nowmap-121][playery][playerx+1]==2))
				playerx++;
			}
			else if(Playing.nowmap>=151 && Playing.nowmap<=180)
			{
				if(playerx<Playing.BigMap.getWidth(null)/48-1 && (Playing5.IsRun[Playing.nowmap-151][playery][playerx+1]==1 || Playing5.IsRun[Playing.nowmap-151][playery][playerx+1]==2))
				playerx++;
			}
			else if(Playing.nowmap>=181 && Playing.nowmap<=210)
			{
				if(playerx<Playing.BigMap.getWidth(null)/48-1 && (Playing6.IsRun[Playing.nowmap-181][playery][playerx+1]==1 || Playing6.IsRun[Playing.nowmap-181][playery][playerx+1]==2))
				playerx++;
			}
			/*
			if(playerx<Playing.BigMap[Playing.nowmap].getWidth(null)/48-1 && (Playing.IsRun[Playing.nowmap][playery][playerx+1]==1 || Playing.IsRun[Playing.nowmap][playery][playerx+1]==2))
			playerx++;	
			*/
			//right1++;
			if(right1>15)
			right1=right1%15;
			toward=4;
		}
		
	}
	
	public static void paint(Graphics g,int i,int j)
	{
		if(!up && !down && !left && !right)
		{
			if(toward==1)
			{
				g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48,48*3,48*2,48*4,null);
			}
			else if(toward==2)
			{
				g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48,0,48*2,48,null);
			}
			else if(toward==3)
			{
				g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48,48*1,48*2,48*2,null);
			}
			else if(toward==4)
			{
				g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48,48*2,48*2,48*3,null);
			}
		}
		else
		{
			if(up)
			{
				if(up1>=1 && up1<=16)
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 0,48*3,48,48*4,null);
				}
				else if(up1>=17 && up1<=32)
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48,48*3,48*2,48*4,null);
				}
				else if(up1==0 || (up1>=33 && up1<=48))
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48*2,48*3,48*3,48*4,null);
				}
			}
			else if(down)
			{
				if(down1>=1 && down1<=16)
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 0,0,48,48,null);
				}
				else if(down1>=17 && down1<=32)
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48,0,48*2,48,null);
				}
				else if(down1==0 || (down1>=33 && down1<=48))
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48*2,0,48*3,48,null);
				}
			}
			else if(left)
			{
				if(left1>=1 && left1<=16)
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 0,48*1,48,48*2,null);

				}
				else if(left1>=17 && left1<=32)
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48,48*1,48*2,48*2,null);

				}
				else if(left1==0 || (left1>=33 && left1<=48))
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48*2,48*1,48*3,48*2,null);

				}
			}
			else if(right)
			{
				if(right1>=1 && right1<=16)
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 0,48*2,48,48*3,null);

				}
				else if(right1>=17 && right1<=32)
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48,48*2,48*2,48*3,null);

				}
				else if(right1==0 || (right1>=33 && right1<=48))
				{
					g.drawImage(mainplayer, i*48, j*48, (i+1)*48, (j+1)*48, 48*2,48*2,48*3,48*3,null);
				}
			}
		}
		//if()
		//g.setColor(Color.RED);
		//g.fillRect(i*48, j*48, 48, 48);

		//g.drawImage(Playing.BigMap[Playing.nowmap], x*48, y*48,(x+1)*48,(y+1)*48,m,n,m+48,n+48,null);

	}
	/*
	public static void paint2(Graphics g,int x,int y,int i,int j)
	{
		g.drawImage(Playing.TopBigMap[Playing.nowmap], x*48, y*48,(x+1)*48,(y+1)*48,i,j,i+48,j+48,null);
	}
	*/
	public static int getplayerx() {
		return rx;
	}
	
	public static int getplayery() {
		return ry;
	}

}


class Monster extends Thread{
	static boolean monsterset[] = new boolean[220];
	static int monster[][][] = new int[220][100][2];
	static int monstert[][] = new int[220][100];
	static int monstercount = 10;
	static int monstermaxhp[][] = new int[220][100];
	static int monsterhp[][] = new int[220][100];
	static int monstertype[][] = new int[220][100];
	static boolean monsteractive[][] = new boolean[220][100];
	static int mapindex[] = new int []{11,17,18,21,22,23,24,41,45,59,60,61,62,63,111,140,
							   143,153,154,155,157,161,163,171,172,189,193,194,195,201};
	static int monsterminlv[] = new int[220];
	static int monstermaxlv[] = new int[220];	
	//static int mapmonsteratk[][] = new int[]][]{};
	static int monsternowlv[][] = new int[220][100];
	static int mapcount = 210;
	//static boolean monstershowhp[][] = new boolean[8][40]; 
	static MonsterHP monsterhpbar[][] = new MonsterHP[220][100];
	static int premonsterhp[][][] = new int [220][100][30];
	int direction[][] = new int[][] {{-1,0},{1,0},{0,-1},{0,1}};
	Random ran = new Random();
	static MonsterInformationValue monsterinfo = new MonsterInformationValue();

	Monster(){
		monsterset[11]=true;
		monsterset[17]=true;
		monsterset[18]=true;
		monsterset[21]=true;
		monsterset[22]=true;
		monsterset[23]=true;
		monsterset[24]=true;
		monsterset[41]=true;
		monsterset[45]=true;
		monsterset[59]=true;
		monsterset[60]=true;
		monsterset[61]=true;
		monsterset[62]=true;
		monsterset[63]=true;
		monsterset[111]=true;
		monsterset[140]=true;
		monsterset[143]=true;
		monsterset[153]=true;
		monsterset[154]=true;
		monsterset[155]=true;
		monsterset[157]=true;
		monsterset[161]=true;
		monsterset[163]=true;
		monsterset[171]=true;
		monsterset[172]=true;
		monsterset[189]=true;
		monsterset[193]=true;
		monsterset[194]=true;
		monsterset[195]=true;
		monsterset[201]=true;
		monsterminlv[11]=1;
		monsterminlv[17]=42;
		monsterminlv[18]=43;
		monsterminlv[21]=2;
		monsterminlv[22]=3;
		monsterminlv[23]=4;
		monsterminlv[24]=5;
		monsterminlv[41]=8;
		monsterminlv[45]=10;
		monsterminlv[59]=11;
		monsterminlv[60]=14;
		monsterminlv[61]=14;
		monsterminlv[62]=15;
		monsterminlv[63]=17;
		monsterminlv[111]=20;
		monsterminlv[140]=24;
		monsterminlv[143]=25;
		monsterminlv[153]=23;
		monsterminlv[154]=21;
		monsterminlv[155]=32;
		monsterminlv[157]=33;
		monsterminlv[161]=34;
		monsterminlv[163]=35;
		monsterminlv[171]=36;
		monsterminlv[172]=37;
		monsterminlv[189]=41;
		monsterminlv[193]=27;
		monsterminlv[194]=28;
		monsterminlv[195]=29;
		monsterminlv[201]=22;
		
		monstermaxlv[11]=3;
		monstermaxlv[17]=44;
		monstermaxlv[18]=45;
		monstermaxlv[21]=4;
		monstermaxlv[22]=5;
		monstermaxlv[23]=6;
		monstermaxlv[24]=7;
		monstermaxlv[41]=9;
		monstermaxlv[45]=12;
		monstermaxlv[59]=13;
		monstermaxlv[60]=16;
		monstermaxlv[61]=16;
		monstermaxlv[62]=17;
		monstermaxlv[63]=19;
		monstermaxlv[111]=20;
		monstermaxlv[140]=27;
		monstermaxlv[143]=28;
		monstermaxlv[153]=25;
		monstermaxlv[154]=23;
		monstermaxlv[155]=35;
		monstermaxlv[157]=36;
		monstermaxlv[161]=37;
		monstermaxlv[163]=38;
		monstermaxlv[171]=39;
		monstermaxlv[172]=40;
		monstermaxlv[189]=43;
		monstermaxlv[193]=29;
		monstermaxlv[194]=30;
		monstermaxlv[195]=31;
		monstermaxlv[201]=24;

		monsterinfo.setBounds(560, 0, 440, 145);
		//30
		for(int i=0;i<mapcount;i++)
		{
			for(int j=0;j<monstercount;j++)
			{
				if(monsterset[i])
				monsterhpbar[i][j] = new MonsterHP();
				//monstershowhp[i][j] = false;
			}
		}
	}
	/*
	public void initial() {
		//System.out.println(c);
	}
	*/
	public void run() {
		while(true)
		{
			int x,y;
			for(int kt=0;kt<mapindex.length;kt++)
			{
			//	int c=0;
				int k=mapindex[kt];
				if(monsterset[k])
				{
					for(int i=0;i<monstercount;i++)
					{
						if(monsteractive[k][i]==true)
						{
							x=ran.nextInt(4);
							int dx=monster[k][i][1]+direction[x][0];
							int dy=monster[k][i][0]+direction[x][1];		
							if(k>=0 && k<=30)
							{
								if(Playing.IsRun[k][dx][dy]==1 && (dy!=Player.playerx || dx!=Player.playery))
								{
									monstert[k][i]=x+1;
									Playing.IsRun[k][monster[k][i][1]][monster[k][i][0]]=1;
									monster[k][i][0]+=direction[x][1];
									monster[k][i][1]+=direction[x][0];
									Playing.IsRun[k][dx][dy]=4;	
								}
							}
							else if(k>=31 && k<=60)
							{
								if(Playing1.IsRun[k-31][dx][dy]==1 && (dy!=Player.playerx || dx!=Player.playery))
								{
									monstert[k][i]=x+1;
									Playing1.IsRun[k-31][monster[k][i][1]][monster[k][i][0]]=1;
									monster[k][i][0]+=direction[x][1];
									monster[k][i][1]+=direction[x][0];
									Playing1.IsRun[k-31][dx][dy]=4;	
								}							
							}
							else if(k>=61 && k<=90)
							{
								if(Playing2.IsRun[k-61][dx][dy]==1 && (dy!=Player.playerx || dx!=Player.playery))
								{
									monstert[k][i]=x+1;
									Playing2.IsRun[k-61][monster[k][i][1]][monster[k][i][0]]=1;
									monster[k][i][0]+=direction[x][1];
									monster[k][i][1]+=direction[x][0];
									Playing2.IsRun[k-61][dx][dy]=4;	
								}							
							}
							else if(k>=91 && k<=120)
							{
								if(Playing3.IsRun[k-91][dx][dy]==1 && (dy!=Player.playerx || dx!=Player.playery))
								{
									monstert[k][i]=x+1;
									Playing3.IsRun[k-91][monster[k][i][1]][monster[k][i][0]]=1;
									monster[k][i][0]+=direction[x][1];
									monster[k][i][1]+=direction[x][0];
									Playing3.IsRun[k-91][dx][dy]=4;	
								}							
							}
							else if(k>=121 && k<=150)
							{
								if(Playing4.IsRun[k-121][dx][dy]==1 && (dy!=Player.playerx || dx!=Player.playery))
								{
									monstert[k][i]=x+1;
									Playing4.IsRun[k-121][monster[k][i][1]][monster[k][i][0]]=1;
									monster[k][i][0]+=direction[x][1];
									monster[k][i][1]+=direction[x][0];
									Playing4.IsRun[k-121][dx][dy]=4;	
								}							
							}
							else if(k>=151 && k<=180)
							{
								if(Playing5.IsRun[k-151][dx][dy]==1 && (dy!=Player.playerx || dx!=Player.playery))
								{
									monstert[k][i]=x+1;
									Playing5.IsRun[k-151][monster[k][i][1]][monster[k][i][0]]=1;
									monster[k][i][0]+=direction[x][1];
									monster[k][i][1]+=direction[x][0];
									Playing5.IsRun[k-151][dx][dy]=4;	
								}							
							}
							else if(k>=181 && k<=209)
							{
								if(Playing6.IsRun[k-181][dx][dy]==1 && (dy!=Player.playerx || dx!=Player.playery))
								{
									monstert[k][i]=x+1;
									Playing6.IsRun[k-181][monster[k][i][1]][monster[k][i][0]]=1;
									monster[k][i][0]+=direction[x][1];
									monster[k][i][1]+=direction[x][0];
									Playing6.IsRun[k-181][dx][dy]=4;	
								}							
							}
							
							for(int j=0;j<29;j++)
							premonsterhp[k][i][j]=premonsterhp[k][i][j+1];
							premonsterhp[k][i][29]=monsterhp[k][i];
							if(premonsterhp[k][i][29]!=premonsterhp[k][i][28])
							Design.playing.add(Monster.monsterhpbar[k][i]);
							else if(premonsterhp[k][i][0]==premonsterhp[k][i][29] || premonsterhp[k][i][29]<=0)
							Design.playing.remove(Monster.monsterhpbar[k][i]);
						}
						else
						{
							if(monsteractive[k][i]==false)
							{
								//x=ran.nextInt(41)+8;
								//y=ran.nextInt(50)+12;
								x=y=0;
								if(k>=0 && k<=30)
								{
									x=ran.nextInt(Playing.IsRun[k].length-15)+8;
									y=ran.nextInt(Playing.IsRun[k][0].length-24)+12;
									if(Playing.IsRun[k][x][y]==1)
									{
										Playing.IsRun[k][x][y]=4;
										monster[k][i][0]=y;
										monster[k][i][1]=x;
										monstert[k][i]=ran.nextInt(4)+1;
										monsteractive[k][i]=true;
										monstertype[k][i]=ran.nextInt(8)+1;
										monsternowlv[k][i]=ran.nextInt(monstermaxlv[k]-monsterminlv[k]+1)+monsterminlv[k];
										monstermaxhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;										
										monsterhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;
										monsterhpbar[k][i].setMaximum(monstermaxhp[k][i]);	
										monsterhpbar[k][i].setValue(monsterhp[k][i]);
																							
										//System.out.println(monsterhpbar[k][i].getMaximum());
										for(int j=0;j<30;j++)
										premonsterhp[k][i][j]=monsterhp[k][i];
										//break;
									}
								}
								else if(k>=31 && k<=60)
								{
									x=ran.nextInt(Playing1.IsRun[k-31].length-15)+8;
									y=ran.nextInt(Playing1.IsRun[k-31][0].length-24)+12;								
									if(Playing1.IsRun[k-31][x][y]==1)
									{
										Playing1.IsRun[k-31][x][y]=4;
										monster[k][i][0]=y;
										monster[k][i][1]=x;
										monstert[k][i]=ran.nextInt(4)+1;
										monsteractive[k][i]=true;
										monstertype[k][i]=ran.nextInt(8)+1;
										monsternowlv[k][i]=ran.nextInt(monstermaxlv[k]-monsterminlv[k]+1)+monsterminlv[k];
										monstermaxhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;										
										monsterhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;
										monsterhpbar[k][i].setMaximum(monstermaxhp[k][i]);	
										monsterhpbar[k][i].setValue(monsterhp[k][i]);
										for(int j=0;j<30;j++)
										premonsterhp[k][i][j]=monsterhp[k][i];
										//break;
									}

								}
								else if(k>=61 && k<=90)
								{
									x=ran.nextInt(Playing2.IsRun[k-61].length-15)+8;
									y=ran.nextInt(Playing2.IsRun[k-61][0].length-24)+12;								
									if(Playing2.IsRun[k-61][x][y]==1)
									{
										Playing2.IsRun[k-61][x][y]=4;
										monster[k][i][0]=y;
										monster[k][i][1]=x;
										monstert[k][i]=ran.nextInt(4)+1;
										monsteractive[k][i]=true;
										monstertype[k][i]=ran.nextInt(8)+1;
										monsternowlv[k][i]=ran.nextInt(monstermaxlv[k]-monsterminlv[k]+1)+monsterminlv[k];
										monstermaxhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;										
										monsterhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;
										monsterhpbar[k][i].setMaximum(monstermaxhp[k][i]);	
										monsterhpbar[k][i].setValue(monsterhp[k][i]);
										for(int j=0;j<30;j++)
										premonsterhp[k][i][j]=monsterhp[k][i];
										//break;
									}
							
								}
								else if(k>=91 && k<=120)
								{
									x=ran.nextInt(Playing3.IsRun[k-91].length-15)+8;
									y=ran.nextInt(Playing3.IsRun[k-91][0].length-24)+12;								
									if(Playing3.IsRun[k-91][x][y]==1)
									{
										Playing3.IsRun[k-91][x][y]=4;
										monster[k][i][0]=y;
										monster[k][i][1]=x;
										monstert[k][i]=ran.nextInt(4)+1;
										monsteractive[k][i]=true;
										monstertype[k][i]=ran.nextInt(8)+1;
										monsternowlv[k][i]=ran.nextInt(monstermaxlv[k]-monsterminlv[k]+1)+monsterminlv[k];
										monstermaxhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;										
										monsterhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;
										monsterhpbar[k][i].setMaximum(monstermaxhp[k][i]);	
										monsterhpbar[k][i].setValue(monsterhp[k][i]);
										for(int j=0;j<30;j++)
										premonsterhp[k][i][j]=monsterhp[k][i];
										//break;
									}

								}
								else if(k>=121 && k<=150)
								{
									x=ran.nextInt(Playing4.IsRun[k-121].length-15)+8;
									y=ran.nextInt(Playing4.IsRun[k-121][0].length-24)+12;								
									if(Playing4.IsRun[k-121][x][y]==1)
									{
										Playing4.IsRun[k-121][x][y]=4;
										monster[k][i][0]=y;
										monster[k][i][1]=x;
										monstert[k][i]=ran.nextInt(4)+1;
										monsteractive[k][i]=true;
										monstertype[k][i]=ran.nextInt(8)+1;
										monsternowlv[k][i]=ran.nextInt(monstermaxlv[k]-monsterminlv[k]+1)+monsterminlv[k];
										monstermaxhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;										
										monsterhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;
										monsterhpbar[k][i].setMaximum(monstermaxhp[k][i]);	
										monsterhpbar[k][i].setValue(monsterhp[k][i]);
										for(int j=0;j<30;j++)
										premonsterhp[k][i][j]=monsterhp[k][i];
										//break;
									}

								}
								else if(k>=151 && k<=180)
								{
									x=ran.nextInt(Playing5.IsRun[k-151].length-15)+8;
									y=ran.nextInt(Playing5.IsRun[k-151][0].length-24)+12;								
									if(Playing5.IsRun[k-151][x][y]==1)
									{
										Playing5.IsRun[k-151][x][y]=4;
										monster[k][i][0]=y;
										monster[k][i][1]=x;
										monstert[k][i]=ran.nextInt(4)+1;
										monsteractive[k][i]=true;
										monstertype[k][i]=ran.nextInt(8)+1;
										monsternowlv[k][i]=ran.nextInt(monstermaxlv[k]-monsterminlv[k]+1)+monsterminlv[k];
										monstermaxhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;										
										monsterhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;
										monsterhpbar[k][i].setMaximum(monstermaxhp[k][i]);	
										monsterhpbar[k][i].setValue(monsterhp[k][i]);
										for(int j=0;j<30;j++)
										premonsterhp[k][i][j]=monsterhp[k][i];
										//break;
									}
								
								}
								else if(k>=181 && k<=209)
								{
									x=ran.nextInt(Playing6.IsRun[k-181].length-15)+8;
									y=ran.nextInt(Playing6.IsRun[k-181][0].length-24)+12;								
									if(Playing6.IsRun[k-181][x][y]==1)
									{
										Playing6.IsRun[k-181][x][y]=4;
										monster[k][i][0]=y;
										monster[k][i][1]=x;
										monstert[k][i]=ran.nextInt(4)+1;
										monsteractive[k][i]=true;
										monstertype[k][i]=ran.nextInt(8)+1;
										monsternowlv[k][i]=ran.nextInt(monstermaxlv[k]-monsterminlv[k]+1)+monsterminlv[k];
										monstermaxhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;										
										monsterhp[k][i]=monsternowlv[k][i]*30+monsternowlv[k][i]/10*1000+monsternowlv[k][i]%10*50;
										monsterhpbar[k][i].setMaximum(monstermaxhp[k][i]);	
										monsterhpbar[k][i].setValue(monsterhp[k][i]);
										for(int j=0;j<30;j++)
										premonsterhp[k][i][j]=monsterhp[k][i];
										//break;
									}

								}
							}
						}
					}
				}
				//System.out.println(c);
			}
			
			for(int q=0;q<10;q++)
			{	
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				for(int k=0;k<mapcount;k++)
				{
					if(monsterset[k])
					{
						for(int i=0;i<monstercount;i++)
						{
							if(monsteractive[k][i]==true)
							{
								for(int j=0;j<29;j++)
								premonsterhp[k][i][j]=premonsterhp[k][i][j+1];
								premonsterhp[k][i][29]=monsterhp[k][i];
								if(premonsterhp[k][i][29]!=premonsterhp[k][i][28])
								{
									Monster.monsterhpbar[k][i].setMaximum(Monster.monstermaxhp[k][i]);
									Monster.monsterhpbar[k][i].setValue(Monster.monsterhp[k][i]);
									Design.playing.add(Monster.monsterhpbar[k][i]);
								}
								else if(premonsterhp[k][i][0]==premonsterhp[k][i][29] || premonsterhp[k][i][29]<=0)
								{
									if(k==MonsterInformationValue.monsternowmap && i==MonsterInformationValue.monsteridx)
									{
										MonsterInformationValue.monsternowmap=-1;
										MonsterInformationValue.monsteridx=-1;
										SkillImage.monsterinfoclose();
										//System.out.println("GGG");
									}
									Design.playing.remove(Monster.monsterhpbar[k][i]);
								}
							}
						}
					}
				}				
			}
			
			for(int i=0;i<monstercount && Monster.monsterset[Playing.nowmap];i++)
			{
				monstert[Playing.nowmap][i]=ran.nextInt(4)+1;
			}			

			//int prehp=Playing.playernowhp;
			/*
			boolean skillshow[] = new boolean[6];
			for(int i=0;i<6;i++)
			skillshow[i]=false;
			*/
			for(int i=0;i<monstercount && Monster.monsterset[Playing.nowmap];i++)
			{
				if(monsteractive[Playing.nowmap][i]==true)
				{
					switch(monstertype[Playing.nowmap][i])
					{
						case 1: 
						if(Math.sqrt((Player.playerx-monster[Playing.nowmap][i][0])*(Player.playerx-monster[Playing.nowmap][i][0])+(Player.playery-monster[Playing.nowmap][i][1])*(Player.playery-monster[Playing.nowmap][i][1]))<=2)
						{
							if((1000-PlayerAbilitySystem.playermdef)>0)
							Playing.playernowhp-=(1000-PlayerAbilitySystem.playermdef);
							else
							Playing.playernowhp--;
							//skillshow[0]=true;
							SkillImage ski = new SkillImage(1001);
							ski.start();

						}
						break;
						case 2:
						if(Math.sqrt((Player.playerx-monster[Playing.nowmap][i][0])*(Player.playerx-monster[Playing.nowmap][i][0])+(Player.playery-monster[Playing.nowmap][i][1])*(Player.playery-monster[Playing.nowmap][i][1]))<=3)
						{
							if((1000-PlayerAbilitySystem.playerdef)>0)
							Playing.playernowhp-=(1000-PlayerAbilitySystem.playerdef);
							else
							Playing.playernowhp--;
							//skillshow[1]=true;
							SkillImage ski = new SkillImage(1002);
							ski.start();
						}
						break;
						case 3:
						if(Math.sqrt((Player.playerx-monster[Playing.nowmap][i][0])*(Player.playerx-monster[Playing.nowmap][i][0])+(Player.playery-monster[Playing.nowmap][i][1])*(Player.playery-monster[Playing.nowmap][i][1]))<=3)
						{
							if((1000-PlayerAbilitySystem.playermdef)>0)
							Playing.playernowhp-=(1000-PlayerAbilitySystem.playermdef);
							else
							Playing.playernowhp--;
							//skillshow[2]=true;
							SkillImage ski = new SkillImage(1003);
							ski.start();
						}
						break;
						case 4:
						if(Math.sqrt((Player.playerx-monster[Playing.nowmap][i][0])*(Player.playerx-monster[Playing.nowmap][i][0])+(Player.playery-monster[Playing.nowmap][i][1])*(Player.playery-monster[Playing.nowmap][i][1]))<=2)
						{
							if((1000-PlayerAbilitySystem.playerdef)>0)
							Playing.playernowhp-=(1000-PlayerAbilitySystem.playerdef);
							else
							Playing.playernowhp--;
							//skillshow[3]=true;
							SkillImage ski = new SkillImage(1004);
							ski.start();
						}
						break;
						case 5:
						if(Math.sqrt((Player.playerx-monster[Playing.nowmap][i][0])*(Player.playerx-monster[Playing.nowmap][i][0])+(Player.playery-monster[Playing.nowmap][i][1])*(Player.playery-monster[Playing.nowmap][i][1]))<=2)
						{
							if((1000-PlayerAbilitySystem.playerdef)>0)
							Playing.playernowhp-=(1000-PlayerAbilitySystem.playerdef);
							else
							Playing.playernowhp--;
							//skillshow[4]=true;
							SkillImage ski = new SkillImage(1005);
							ski.start();
						}
						break;
						case 6:
						if(Math.sqrt((Player.playerx-monster[Playing.nowmap][i][0])*(Player.playerx-monster[Playing.nowmap][i][0])+(Player.playery-monster[Playing.nowmap][i][1])*(Player.playery-monster[Playing.nowmap][i][1]))<=1)
						{
							if((1000-PlayerAbilitySystem.playerdef)>0)
							Playing.playernowhp-=(1000-PlayerAbilitySystem.playerdef);
							else
							Playing.playernowhp--;				
							//skillshow[5]=true;
							SkillImage ski = new SkillImage(1006);
							ski.start();
						}
						break;
						case 7:
						if(Math.sqrt((Player.playerx-monster[Playing.nowmap][i][0])*(Player.playerx-monster[Playing.nowmap][i][0])+(Player.playery-monster[Playing.nowmap][i][1])*(Player.playery-monster[Playing.nowmap][i][1]))<=1)
						{
							if((1000-PlayerAbilitySystem.playerdef)>0)
							Playing.playernowhp-=(1000-PlayerAbilitySystem.playerdef);
							else
							Playing.playernowhp--;				
							//skillshow[5]=true;
							SkillImage ski = new SkillImage(1007);
							ski.start();
						}
						break;
						case 8:
						if(Math.sqrt((Player.playerx-monster[Playing.nowmap][i][0])*(Player.playerx-monster[Playing.nowmap][i][0])+(Player.playery-monster[Playing.nowmap][i][1])*(Player.playery-monster[Playing.nowmap][i][1]))<=1)
						{
							if((1000-PlayerAbilitySystem.playerdef)>0)
							Playing.playernowhp-=(1000-PlayerAbilitySystem.playerdef);
							else
							Playing.playernowhp--;				
							//skillshow[5]=true;
							SkillImage ski = new SkillImage(1008);
							ski.start();
						}
						break;
						
					}
				}
			}
		
			for(int q=0;q<10;q++)
			{	
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				for(int k=0;k<mapcount;k++)
				{
					if(monsterset[k])
					{
						for(int i=0;i<monstercount;i++)
						{
							if(monsteractive[k][i]==true)
							{
								for(int j=0;j<29;j++)
								premonsterhp[k][i][j]=premonsterhp[k][i][j+1];
								premonsterhp[k][i][29]=monsterhp[k][i];
								if(premonsterhp[k][i][29]!=premonsterhp[k][i][28])
								{
									Monster.monsterhpbar[k][i].setMaximum(Monster.monstermaxhp[k][i]);
									Monster.monsterhpbar[k][i].setValue(Monster.monsterhp[k][i]);
									Design.playing.add(Monster.monsterhpbar[k][i]);
								}
								else if(premonsterhp[k][i][0]==premonsterhp[k][i][29] || premonsterhp[k][i][29]<=0)
								{
									Design.playing.remove(Monster.monsterhpbar[k][i]);
									if(k==MonsterInformationValue.monsternowmap && i==MonsterInformationValue.monsteridx)
									{
										MonsterInformationValue.monsternowmap=-1;
										MonsterInformationValue.monsteridx=-1;
										SkillImage.monsterinfoclose();
									}
								}
							}
						}
					}
				}				
			}
			for(int i=0;i<monstercount && Monster.monsterset[Playing.nowmap];i++)
			{
				monstert[Playing.nowmap][i]=ran.nextInt(4)+1;
			}			

			
			for(int q=0;q<10;q++)
			{	
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				for(int k=0;k<mapcount;k++)
				{
					if(monsterset[k])
					{
						for(int i=0;i<monstercount;i++)
						{
							if(monsteractive[k][i]==true)
							{
								for(int j=0;j<29;j++)
								premonsterhp[k][i][j]=premonsterhp[k][i][j+1];
								premonsterhp[k][i][29]=monsterhp[k][i];
								if(premonsterhp[k][i][29]!=premonsterhp[k][i][28])
								{
									Monster.monsterhpbar[k][i].setMaximum(Monster.monstermaxhp[k][i]);
									Monster.monsterhpbar[k][i].setValue(Monster.monsterhp[k][i]);
									Design.playing.add(Monster.monsterhpbar[k][i]);
								}
								else if(premonsterhp[k][i][0]==premonsterhp[k][i][29] || premonsterhp[k][i][29]<=0)
								{
									Design.playing.remove(Monster.monsterhpbar[k][i]);
									if(k==MonsterInformationValue.monsternowmap && i==MonsterInformationValue.monsteridx)
									{
										MonsterInformationValue.monsternowmap=-1;
										MonsterInformationValue.monsteridx=-1;
										SkillImage.monsterinfoclose();
									}
								}
							}
						}
					}
				}				
			}

			
			for(int i=0;i<monstercount && Monster.monsterset[Playing.nowmap];i++)
			{
				monstert[Playing.nowmap][i]=ran.nextInt(4)+1;
			}			

			
		}
	}
	
	public static void paint(Graphics g,int i,int j,int x,int y){
		for(int t=0;t<Monster.monstercount;t++)
		{
			//Playing.this.remove(Monster.monsterhpbar[nowmap][t]);
			switch(Monster.monstertype[Playing.nowmap][t])
			{
				case 1:
				if(Monster.monsteractive[Playing.nowmap][t]==true && i/48==Monster.monster[Playing.nowmap][t][0] && j/48==Monster.monster[Playing.nowmap][t][1])
				{
					if(Monster.monstert[Playing.nowmap][t]==1)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*7,48*7,48*8,48*8,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==2)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*7,48*4,48*8,48*5,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==3)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*7,48*5,48*8,48*6,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==4)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*7,48*6,48*8,48*7,null);
					}
					Monster.monsterhpbar[Playing.nowmap][t].setBounds(x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48, 48, 5);
					Monster.monsterhpbar[Playing.nowmap][t].setValue(Monster.monsterhp[Playing.nowmap][t]);
				}
				break;
				case 2:
				if(Monster.monsteractive[Playing.nowmap][t]==true && i/48==Monster.monster[Playing.nowmap][t][0] && j/48==Monster.monster[Playing.nowmap][t][1])
				{
					if(Monster.monstert[Playing.nowmap][t]==1)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*3,48*2,48*4,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==2)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*0,48*2,48*1,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==3)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*1,48*2,48*2,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==4)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*2,48*2,48*3,null);
					}
					Monster.monsterhpbar[Playing.nowmap][t].setBounds(x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48, 48, 5);
					Monster.monsterhpbar[Playing.nowmap][t].setValue(Monster.monsterhp[Playing.nowmap][t]);
				}
				break;
				case 3:
				if(Monster.monsteractive[Playing.nowmap][t]==true && i/48==Monster.monster[Playing.nowmap][t][0] && j/48==Monster.monster[Playing.nowmap][t][1])
				{
					if(Monster.monstert[Playing.nowmap][t]==1)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*4,48*3,48*5,48*4,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==2)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*4,48*0,48*5,48*1,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==3)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*4,48*1,48*5,48*2,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==4)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*4,48*2,48*5,48*3,null);
					}
					Monster.monsterhpbar[Playing.nowmap][t].setBounds(x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48, 48, 5);
					Monster.monsterhpbar[Playing.nowmap][t].setValue(Monster.monsterhp[Playing.nowmap][t]);

				}
				break;
				case 4:
				if(Monster.monsteractive[Playing.nowmap][t]==true && i/48==Monster.monster[Playing.nowmap][t][0] && j/48==Monster.monster[Playing.nowmap][t][1])
				{
					if(Monster.monstert[Playing.nowmap][t]==1)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*10,48*7,48*11,48*8,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==2)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*10,48*4,48*11,48*5,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==3)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*10,48*5,48*11,48*6,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==4)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*10,48*6,48*11,48*7,null);
					}
					Monster.monsterhpbar[Playing.nowmap][t].setBounds(x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48, 48, 5);
					Monster.monsterhpbar[Playing.nowmap][t].setValue(Monster.monsterhp[Playing.nowmap][t]);

				}
				break;
				case 5:
				if(Monster.monsteractive[Playing.nowmap][t]==true && i/48==Monster.monster[Playing.nowmap][t][0] && j/48==Monster.monster[Playing.nowmap][t][1])
				{
					if(Monster.monstert[Playing.nowmap][t]==1)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*7,48*2,48*8,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==2)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*4,48*2,48*5,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==3)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*5,48*2,48*6,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==4)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*1,48*6,48*2,48*7,null);
					}
					Monster.monsterhpbar[Playing.nowmap][t].setBounds(x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48, 48, 5);
					Monster.monsterhpbar[Playing.nowmap][t].setValue(Monster.monsterhp[Playing.nowmap][t]);
				}
				break;
				case 6:
				if(Monster.monsteractive[Playing.nowmap][t]==true && i/48==Monster.monster[Playing.nowmap][t][0] && j/48==Monster.monster[Playing.nowmap][t][1])
				{
					if(Monster.monstert[Playing.nowmap][t]==1)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*10,48*3,48*11,48*4,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==2)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*10,48*0,48*11,48*1,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==3)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*10,48*1,48*11,48*2,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==4)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*10,48*2,48*11,48*3,null);
					}
					Monster.monsterhpbar[Playing.nowmap][t].setBounds(x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48, 48, 5);
					Monster.monsterhpbar[Playing.nowmap][t].setValue(Monster.monsterhp[Playing.nowmap][t]);
				}
				break;
				case 7:
				if(Monster.monsteractive[Playing.nowmap][t]==true && i/48==Monster.monster[Playing.nowmap][t][0] && j/48==Monster.monster[Playing.nowmap][t][1])
				{
					if(Monster.monstert[Playing.nowmap][t]==1)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*7,48*3,48*8,48*4,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==2)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*7,48*0,48*8,48*1,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==3)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*7,48*1,48*8,48*2,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==4)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*7,48*2,48*8,48*3,null);
					}
					Monster.monsterhpbar[Playing.nowmap][t].setBounds(x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48, 48, 5);
					Monster.monsterhpbar[Playing.nowmap][t].setValue(Monster.monsterhp[Playing.nowmap][t]);
				}
				break;
				case 8:
				if(Monster.monsteractive[Playing.nowmap][t]==true && i/48==Monster.monster[Playing.nowmap][t][0] && j/48==Monster.monster[Playing.nowmap][t][1])
				{
					if(Monster.monstert[Playing.nowmap][t]==1)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*4,48*7,48*5,48*8,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==2)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*4,48*4,48*5,48*5,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==3)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*4,48*5,48*5,48*6,null);
					}
					else if(Monster.monstert[Playing.nowmap][t]==4)
					{
						g.drawImage(Playing.monsterimage, x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48,(x+1)*48-Player.getplayerx()%48,(y+1)*48-Player.getplayery()%48,48*4,48*6,48*5,48*7,null);
					}
					Monster.monsterhpbar[Playing.nowmap][t].setBounds(x*48-Player.getplayerx()%48, y*48-Player.getplayery()%48, 48, 5);
					Monster.monsterhpbar[Playing.nowmap][t].setValue(Monster.monsterhp[Playing.nowmap][t]);
				}
				break;
				
			}
		}
				
	
	}
}

class Screenupdate extends Thread{
	static JPanel panel;
	Screenupdate(JPanel panel){
		this.panel=panel;
	}
	
    public void run() {  
        while(true){ 
        	//panel.paintComponents(panel.getGraphics());
        	//panel.paintComponent1(panel.getGraphics());
        	//panel.repa
        	//panel.updateUI();
        	panel.repaint(); 
            try {  
            	Thread.sleep(5);  
           	} catch (InterruptedException e) {  
            	e.printStackTrace();  
            }	
        }  
    }
}

class Screenupdate1 extends Thread{
	JPanel panel;
	Screenupdate1(JPanel panel){
		this.panel=panel;
	}
	
    public void run() {  
        while(true){  
            panel.repaint();  
            try {  
                Thread.sleep(100);  
            } catch (InterruptedException e) {  
                e.printStackTrace();  
            }  
        	
        }  
    }
}

class BGMmusicbox extends Thread{
	static float bgmvalue=-10;
	String s1 = "/music/Per.wav";
	String s2 = "/music/bgm2.wav";
	String s3 = "/music/bgm3.wav";
	String s4 = "/music/bgm4.wav";
	String s5 = "/music/bgm5.wav";
	URL url = getClass().getResource(s1);
	URL ur2 = getClass().getResource(s2);
	URL ur3 = getClass().getResource(s3);
	URL ur4 = getClass().getResource(s4);
	URL ur5 = getClass().getResource(s5);
	
	static Clip clip = null;
	static AudioInputStream musicfile = null;
	static AudioInputStream bgm2 = null;
	static AudioInputStream bgm3 = null;
	static AudioInputStream bgm4 = null;
	static AudioInputStream bgm5 = null;
	BGMmusicbox(int index){	
		
		try {
			musicfile = AudioSystem.getAudioInputStream(url);
			bgm2 = AudioSystem.getAudioInputStream(ur2);
			bgm3 = AudioSystem.getAudioInputStream(ur3);
			bgm4 = AudioSystem.getAudioInputStream(ur4);
			bgm5 = AudioSystem.getAudioInputStream(ur5);
		} catch (UnsupportedAudioFileException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		try {
			clip = AudioSystem.getClip();
		} catch (LineUnavailableException e) {
			e.printStackTrace();
		}
		try {
			if(index==1)
			clip.open(musicfile);
			else if(index==2)
			clip.open(bgm2);
			else if(index==3)
			clip.open(bgm3);
			else if(index==4)
			clip.open(bgm4);
			else if(index==5)
			clip.open(bgm5);
			
		} catch (LineUnavailableException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void run()
	{
		clip.loop(Clip.LOOP_CONTINUOUSLY);	
	}    
	
	public static Clip GetNowClip() {
		return clip;
	}
}

class BGSmusicbox extends Thread{
	static float bgsvalue=-10;
	BGSmusicbox(){
		
	}
	
	public void run() {
		
	}
}

class SEmusicbox extends Thread{
	static float sevalue=-10;
	Clip clip = null;
	//static Clip clipbox[] = new Clip[40];
	AudioInputStream musicfile = null;
	SEmusicbox(int i){
		
		String s[] = new String[55];
		s[0] = "/music/Decision1.wav";
		s[1] = "/music/Decision2.wav";
		s[2] = "/music/Save.wav";
		s[3] = "/music/116.wav";
		s[4] = "/music/levelup.wav";
		s[5] = "/music/Skill3.wav";
		s[6] = "/music/110-1.wav";
		s[7] = "/music/110-2.wav";
		s[8] = "/music/111-1.wav";
		s[9] = "/music/112-1.wav";
		s[10] = "/music/112-2.wav";
		s[11] = "/music/113-1.wav";
		s[12] = "/music/113-2.wav";
		s[13] = "/music/114-1.wav";
		s[14] = "/music/115-1.wav";
		s[15] = "/music/115-2.wav";
		s[23] = "/music/116-1.wav";
		s[24] = "/music/116-2.wav";		
		s[25] = "/music/117-1.wav";		
		s[26] = "/music/118-1.wav";		
		s[27] = "/music/118-2.wav";	
		s[28] = "/music/210-1.wav";	
		s[29] = "/music/211-1.wav";	
		s[30] = "/music/212-1.wav";	
		s[31] = "/music/213-1.wav";	
		s[32] = "/music/213-2.wav";	
		s[33] = "/music/214-1.wav";	
		s[34] = "/music/214-2.wav";	
		s[35] = "/music/215-1.wav";	
		s[36] = "/music/215-2.wav";	
		s[37] = "/music/216-1.wav";	
		s[38] = "/music/217-1.wav";	
		s[39] = "/music/218-1.wav";	
		s[40] = "/music/218-2.wav";	
		s[41] = "/music/218-3.wav";	
		s[42] = "/music/1007.wav";	
		s[43] = "/music/1008.wav";	
		s[16] = "/music/space.wav";
		s[17] = "/music/Darkness3.wav";
		s[18] = "/music/Slash2.wav";
		s[19] = "/music/Water5.wav";
		s[20] = "/music/Sword4.wav";
		s[21] = "/music/Thunder4.wav";
		s[22] = "/music/Earth1.wav";
		URL url = null;
		
		if(i==0)
		{
			//clip=clipbox[0];
			url = getClass().getResource(s[0]);
		}
		else if(i==1)
		{
			//clip=clipbox[1];
			url = getClass().getResource(s[1]);
		}
		else if(i==2)
		{
			//clip=clipbox[2];
			url = getClass().getResource(s[2]);		
		}
		else if(i==1101)
		{
			//clip=clipbox[6];
			url = getClass().getResource(s[6]);	
		}
		else if(i==1102)
		{
			url = getClass().getResource(s[7]);	
		}
		else if(i==1111)
		{
			//clip=clipbox[7];
			url = getClass().getResource(s[8]);	
		}
		else if(i==1121)
		{
			//clip=clipbox[8];
			url = getClass().getResource(s[9]);	
		}
		else if(i==1122)
		{
			//clip=clipbox[9];
			url = getClass().getResource(s[10]);	
		}
		else if(i==1131)
		{
			//clip=clipbox[10];
			url = getClass().getResource(s[11]);	
		}
		else if(i==1132)
		{
			//clip=clipbox[11];
			url = getClass().getResource(s[12]);	
		}
		else if(i==1141)
		{
			//clip=clipbox[12];
			url = getClass().getResource(s[13]);	
		}
		else if(i==1151)
		{
			//clip=clipbox[13];
			url = getClass().getResource(s[14]);	
		}
		else if(i==1152)
		{
			//clip=clipbox[14];
			url = getClass().getResource(s[15]);	
		}
		else if(i==1161)
		{
			//clip=clipbox[13];
			url = getClass().getResource(s[23]);	
		}
		else if(i==1162)
		{
			//clip=clipbox[14];
			url = getClass().getResource(s[24]);	
		}	
		else if(i==1171)
		{
			//clip=clipbox[14];
			url = getClass().getResource(s[25]);	
		}	
		else if(i==1181)
		{
			//clip=clipbox[14];
			url = getClass().getResource(s[26]);	
		}	
		else if(i==1182)
		{
			//clip=clipbox[14];
			url = getClass().getResource(s[27]);	
		}	
		else if(i==2101)
		{
			url = getClass().getResource(s[28]);	
		}
		else if(i==2111)
		{
			url = getClass().getResource(s[29]);	
		}
		else if(i==2121)
		{
			url = getClass().getResource(s[30]);	
		}	
		else if(i==2131)
		{
			url = getClass().getResource(s[31]);	
		}		
		else if(i==2132)
		{
			url = getClass().getResource(s[32]);	
		}		
		else if(i==2141)
		{
			url = getClass().getResource(s[33]);				
		}
		else if(i==2142)
		{
			url = getClass().getResource(s[34]);				
		}	
		else if(i==2151)
		{
			url = getClass().getResource(s[35]);				
		}
		else if(i==2152)
		{
			url = getClass().getResource(s[36]);				
		}	
		else if(i==2161)
		{
			url = getClass().getResource(s[37]);				
		}
		else if(i==2171)
		{
			url = getClass().getResource(s[38]);				
		}				
		else if(i==2181)
		{
			url = getClass().getResource(s[39]);				
		}				
		else if(i==2182)
		{
			url = getClass().getResource(s[40]);				
		}				
		else if(i==2183)
		{
			url = getClass().getResource(s[41]);				
		}					
		else if(i==115)
		{
			//clip=clipbox[15];
			url = getClass().getResource(s[15]);	
		}

		else if(i==1161)
		{
			//clip=clipbox[5];
			url = getClass().getResource(s[5]);	
		}
		else if(i==116)
		{
			//clip=clipbox[3];
			url = getClass().getResource(s[3]);		
		}
		else if(i==6666)
		{
			url = getClass().getResource(s[16]);
		}
		else if(i==1000)
		{
			//clip=clipbox[4];
			//clipbox[4].
			url = getClass().getResource(s[4]);	
		}
		else if(i==1001)
		{
			url = getClass().getResource(s[17]);
		}
		else if(i==1002)
		{
			url = getClass().getResource(s[18]);
		}
		else if(i==1003)
		{
			url = getClass().getResource(s[19]);
		}
		else if(i==1004)
		{
			url = getClass().getResource(s[20]);
		}
		else if(i==1005)
		{
			url = getClass().getResource(s[21]);
		}
		else if(i==1006)
		{
			url = getClass().getResource(s[22]);
		}
		else if(i==1007)
		{
			url = getClass().getResource(s[42]);
		}
		else if(i==1008)
		{
			url = getClass().getResource(s[43]);
		}
		
		try {
			musicfile = AudioSystem.getAudioInputStream(url);
		} catch (UnsupportedAudioFileException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		try {
			clip = AudioSystem.getClip();
		} catch (LineUnavailableException e) {
			e.printStackTrace();
		}
		try {
			clip.open(musicfile);
		} catch (LineUnavailableException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		FloatControl volumecontrol = (FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);
		if(SettingInfo.banmusic==true)
		volumecontrol.setValue(volumecontrol.getMinimum());
		else
		volumecontrol.setValue(sevalue);

	}
	static public void initial() {

	}
	
	public void run()
	{
		clip.start();	
		//System.out.println(clip.isActive());
	}    	
}

class MEmusicbox extends Thread{
	static float mevalue=-10;
	MEmusicbox(){
		
	}
	
	public void run() {
		
	}
}

class SkillImage extends Thread{
	BufferedImage base;
	Image skill7[] = new Image[55];
	static PanelListenner plt;
	//int time = 100;
	int index;
	int mdv = 0;
	static boolean skillcd[] = new boolean[9];
	static boolean attack = false;
	static boolean skill218open = false;
	JLabel t[] = new JLabel[85];
	SkillImage(int index){
		String s = "";
		this.index=index;
		for(int i=0;i<85;i++)
		t[i] = new JLabel(); 
		if(index==110)
		{
			s = "/SkillImage/110-1.png";
		}
		else if(index==111)
		{
			s = "/SkillImage/111.png";
		}
		else if(index==112)
		{
			s = "/SkillImage/112.png";
		}
		else if(index==113)
		{
			s = "/SkillImage/113.png";
		}
		else if(index==114)
		{
			s = "/SkillImage/114.png";
		}
		else if(index==115)
		{
			s = "/SkillImage/115-1.png";
		}
		else if(index==116)
		{
			s = "/SkillImage/116-1.png";
		}
		else if(index==117)
		{
			s = "/SkillImage/117.png";			
		}
		else if(index==118)
		{
			s = "/SkillImage/118-1.png";
		}
		else if(index==210)
		{
			s = "/SkillImage/210.png";
		}
		else if(index==211)
		{
			s = "/SkillImage/211.png";
		}
		else if(index==212)
		{
			s = "/SkillImage/212.png";
		}
		else if(index==213)
		{
			s = "/SkillImage/213-1.png";
		}	
		else if(index==214)
		{
			s = "/SkillImage/214-1.png";
		}
		else if(index==215)
		{
			s = "/SkillImage/215-1.png";			
		}
		else if(index==216)
		{
			s = "/SkillImage/216.png";
		}
		else if(index==217)
		{
			s = "/SkillImage/217.png";			
		}
		else if(index==218)
		{
			s = "/SkillImage/218-1.png";			
		}		
		else if(index==0)
		{
			s = "/SkillImage/Holy2.png";
		}
		else if(index==1001)
		{
			s = "/SkillImage/StateDark.png";
		}
		else if(index==1002)
		{
			s = "/SkillImage/CS.png";
		}
		else if(index==1003)
		{
			s = "/SkillImage/Water1.png";
		}
		else if(index==1004)
		{
			s = "/SkillImage/SLS.png";
		}
		else if(index==1005)
		{
			s = "/SkillImage/Thunder2.png";
		}
		else if(index==1006)
		{
			s = "/SkillImage/Earth3.png";
		}
		else if(index==1007)
		{
			s = "/SkillImage/Darkness4.png";
		}
		else if(index==1008)
		{
			s = "/SkillImage/Darkness3.png";
		}

		
		else if(index==1)
		{
			if(skill218open)
			s = "/SkillImage/218-2.png";	
			else
			s = "/SkillImage/Hit1.png";
		}
		URL url = getClass().getResource(s);
		try {
			base = ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}

		if(index==110)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			for(int i=0;i<6;i++)
			{
				if(i<3)
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
				else if(i>=3)
				skill7[3+i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			s = "/SkillImage/110-2.png";
			url = getClass().getResource(s);
			try {
				base = ImageIO.read(url);
			} catch (IOException e) {
				e.printStackTrace();
			}

			for(int i=0;i<3;i++)
			{
				skill7[3+i] = base.getSubimage(144*(4-i%5), 144*(3-i/5), 144, 144);
			}
			
			//Player.up=Player.down=Player.left=Player.right=false;
			
			if(Player.toward==1)
			{
				t[0].setBounds(528, 288, 144, 144);
			}
			else if(Player.toward==2)
			{
				t[0].setBounds(528, 384, 144, 144);
			}
			else if(Player.toward==3)
			{
				t[0].setBounds(480, 336, 144, 144);
			}
			else if(Player.toward==4)
			{
				t[0].setBounds(576, 336, 144, 144);
			}
			
			PanelListenner.w.add(t[0],0);

		}
		else if(index==111)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;

			for(int i=0;i<11;i++)
			{
				skill7[i] = base.getSubimage(144*((3+i)%5), 144*((8+i)/5), 144, 144);
			}
			//Player.up=Player.down=Player.left=Player.right=false;
			if(Player.toward==1)
			{
				t[0].setBounds(528, 288, 144, 144);
			}
			else if(Player.toward==2)
			{
				t[0].setBounds(528, 384, 144, 144);
			}
			else if(Player.toward==3)
			{
				t[0].setBounds(480, 336, 144, 144);
			}
			else if(Player.toward==4)
			{
				t[0].setBounds(576, 336, 144, 144);
			}

			PanelListenner.w.add(t[0],0);
		}
		else if(index==112)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			
			for(int i=0;i<13;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}

			//Player.up=Player.down=Player.left=Player.right=false;
			t[0].setBounds(528, 336, 144, 144);
			/*
			if(Player.toward==1)
			{
				t[0].setBounds(528, 336, 144, 144);
			}
			else if(Player.toward==2)
			{
				t[0].setBounds(528, 336, 144, 144);
				t[1].setBounds(528, 384, 144, 144);
				t[2].setBounds(528, 432, 144, 144);
				t[3].setBounds(528, 480, 144, 144);
				t[4].setBounds(528, 528, 144, 144);
			}
			else if(Player.toward==3)
			{
				t[0].setBounds(528, 336, 144, 144);
				t[1].setBounds(480, 336, 144, 144);
				t[2].setBounds(432, 336, 144, 144);
				t[3].setBounds(384, 336, 144, 144);
				t[4].setBounds(336, 336, 144, 144);
			}
			else if(Player.toward==4)
			{
				t[0].setBounds(528, 336, 144, 144);
				t[1].setBounds(576, 336, 144, 144);
				t[2].setBounds(624, 336, 144, 144);
				t[3].setBounds(672, 336, 144, 144);
				t[4].setBounds(720, 336, 144, 144);
			}
			
			for(int i=0;i<5;i++)
			PanelListenner.w.add(t[i],0);
			*/
			PanelListenner.w.add(t[0],0);
		}
		else if(index==113)
		{
			//int dv=0;
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			//Playing.playerpaint=false;
			//Screenupdate.panel.repaint();
			for(int i=0;i<6;i++)
			{
				skill7[i] = base.getSubimage(144*((1+i)%5), 144*((6+i)/5), 144, 144);
			}
			for(int i=0;i<9;i++)
			{
				skill7[6+i] = base.getSubimage(144*((1+i)%5), 144*((16+i)/5), 144, 144);
			}

			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);

		}
		else if(index==114)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;

			for(int i=0;i<35;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			//Player.up=Player.down=Player.left=Player.right=false;
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		else if(index==115)
		{
			PanelListenner.w.removeKeyListener(plt);			
			Player.up=Player.down=Player.left=Player.right=false;
			
			for(int i=0;i<13;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			s = "/SkillImage/115-2.png";
			url = getClass().getResource(s);
			try {
				base = ImageIO.read(url);
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			for(int i=0;i<7;i++)
			{
				skill7[i+13] = base.getSubimage(144*((1+i)%5), 144*((6+i)/5), 144, 144);
			}
			
			/*
			s = "/SkillImage/sword.png";
			url = getClass().getResource(s);
			try {
				base = ImageIO.read(url);
			} catch (IOException e) {
				e.printStackTrace();
			}
			for(int i=0;i<24;i++)
			{
				skill7[i+26] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			*/
			//Player.up=Player.down=Player.left=Player.right=false;
			
			t[0].setBounds(528, 336, 144, 144);
			/*
			if(Player.toward==1)
			t[1].setBounds(528, 288, 144, 144);
			else if(Player.toward==2)
			t[1].setBounds(528, 384, 144, 144);
			else if(Player.toward==3)
			t[1].setBounds(480, 336, 144, 144);
			else if(Player.toward==4)
			t[1].setBounds(576, 336, 144, 144);
			*/
			
			PanelListenner.w.add(t[0],0);
		//	PanelListenner.w.add(t[1],0);

		}
		else if(index==116)
		{
			PanelListenner.w.removeKeyListener(plt);			
			Player.up=Player.down=Player.left=Player.right=false;
			
			for(int i=0;i<6;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			s = "/SkillImage/116-2.png";
			url = getClass().getResource(s);
			try {
				base = ImageIO.read(url);
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			for(int i=0;i<8;i++)
			{
				skill7[i+6] = base.getSubimage(144*((1+i)%5), 144*((6+i)/5), 144, 144);
			}
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		else if(index==117)
		{
			PanelListenner.w.removeKeyListener(plt);			
			Player.up=Player.down=Player.left=Player.right=false;
			
			for(int i=0;i<7;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
			
		}
		else if(index==118)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;			
			for(int i=0;i<10;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			s = "/SkillImage/118-2.png";
			url = getClass().getResource(s);
			try {
				base = ImageIO.read(url);
			} catch (IOException e) {
				e.printStackTrace();
			}
			for(int i=0;i<20;i++)
			{
				skill7[10+i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			//Player.up=Player.down=Player.left=Player.right=false;
			t[0].setBounds(528, 336, 144, 144);
			if(Player.toward==1)
			t[1].setBounds(528, 288, 144, 144);
			else if(Player.toward==2)
			t[1].setBounds(528, 384, 144, 144);
			else if(Player.toward==3)
			t[1].setBounds(480, 336, 144, 144);
			else if(Player.toward==4)
			t[1].setBounds(576, 336, 144, 144);
			
			PanelListenner.w.add(t[0],0);
		}
		else if(index==210)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			for(int i=0;i<5;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
				
			//Player.up=Player.down=Player.left=Player.right=false;
			mdv=5;
			if(Player.toward==1)
			{
				if(Playing.IsRun[Playing.nowmap][Player.playery-1][Player.playerx]==4)
				{
					mdv=1;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery-2][Player.playerx]==4)
				{
					mdv=2;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery-3][Player.playerx]==4)
				{
					mdv=3;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery-4][Player.playerx]==4)
				{
					mdv=4;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery-5][Player.playerx]==4)
				{
					mdv=5;
				}				
				t[0].setBounds(528, 336-48*mdv, 144, 144);				
			}
			else if(Player.toward==2)
			{
				if(Playing.IsRun[Playing.nowmap][Player.playery+1][Player.playerx]==4)
				{
					mdv=1;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery+2][Player.playerx]==4)
				{
					mdv=2;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery+3][Player.playerx]==4)
				{
					mdv=3;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery+4][Player.playerx]==4)
				{
					mdv=4;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery+5][Player.playerx]==4)
				{
					mdv=5;
				}				
				t[0].setBounds(528, 336+48*mdv, 144, 144);				
			}
			else if(Player.toward==3)
			{
				if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-1]==4)
				{
					mdv=1;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-2]==4)
				{
					mdv=2;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-3]==4)
				{
					mdv=3;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-4]==4)
				{
					mdv=4;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-5]==4)
				{
					mdv=5;
				}			
				t[0].setBounds(528-48*mdv, 336, 144, 144);				
			}
			else if(Player.toward==4)
			{
				if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+1]==4)
				{
					mdv=1;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+2]==4)
				{
					mdv=2;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+3]==4)
				{
					mdv=3;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+4]==4)
				{
					mdv=4;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+5]==4)
				{
					mdv=5;
				}			
				t[0].setBounds(528+48*mdv, 336, 144, 144);
			}			
			PanelListenner.w.add(t[0],0);
		}
		else if(index==211)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			for(int i=0;i<25;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		else if(index==212)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			for(int i=0;i<18;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			t[0].setBounds(480, 288, 144, 144);
			t[1].setBounds(480, 336, 144, 144);
			t[2].setBounds(480, 384, 144, 144);
			t[3].setBounds(528, 288, 144, 144);
			t[4].setBounds(528, 384, 144, 144);
			t[5].setBounds(576, 288, 144, 144);
			t[6].setBounds(576, 336, 144, 144);
			t[7].setBounds(576, 384, 144, 144);
			
			t[8].setBounds(480, 288, 144, 144);
			t[9].setBounds(480, 336, 144, 144);
			t[10].setBounds(480, 384, 144, 144);
			t[11].setBounds(528, 288, 144, 144);
			t[12].setBounds(528, 384, 144, 144);
			t[13].setBounds(576, 288, 144, 144);
			t[14].setBounds(576, 336, 144, 144);
			t[15].setBounds(576, 384, 144, 144);

			t[16].setBounds(480, 288, 144, 144);
			t[17].setBounds(480, 336, 144, 144);
			t[18].setBounds(480, 384, 144, 144);
			t[19].setBounds(528, 288, 144, 144);
			t[20].setBounds(528, 384, 144, 144);
			t[21].setBounds(576, 288, 144, 144);
			t[22].setBounds(576, 336, 144, 144);
			t[23].setBounds(576, 384, 144, 144);

			
			t[24].setBounds(432, 240, 144, 144);
			t[25].setBounds(432, 288, 144, 144);
			t[26].setBounds(432, 336, 144, 144);
			t[27].setBounds(432, 384, 144, 144);
			t[28].setBounds(432, 432, 144, 144);
			t[29].setBounds(480, 240, 144, 144);
			t[30].setBounds(480, 432, 144, 144);
			t[31].setBounds(528, 240, 144, 144);
			t[32].setBounds(528, 432, 144, 144);
			t[33].setBounds(576, 240, 144, 144);
			t[34].setBounds(576, 432, 144, 144);
			t[35].setBounds(624, 240, 144, 144);
			t[36].setBounds(624, 288, 144, 144);
			t[37].setBounds(624, 336, 144, 144);
			t[38].setBounds(624, 384, 144, 144);
			t[39].setBounds(624, 432, 144, 144);

			t[40].setBounds(432, 240, 144, 144);
			t[41].setBounds(432, 288, 144, 144);
			t[42].setBounds(432, 336, 144, 144);
			t[43].setBounds(432, 384, 144, 144);
			t[44].setBounds(432, 432, 144, 144);
			t[45].setBounds(480, 240, 144, 144);
			t[46].setBounds(480, 432, 144, 144);
			t[47].setBounds(528, 240, 144, 144);
			t[48].setBounds(528, 432, 144, 144);
			t[49].setBounds(576, 240, 144, 144);
			t[50].setBounds(576, 432, 144, 144);
			t[51].setBounds(624, 240, 144, 144);
			t[52].setBounds(624, 288, 144, 144);
			t[53].setBounds(624, 336, 144, 144);
			t[54].setBounds(624, 384, 144, 144);
			t[55].setBounds(624, 432, 144, 144);

			t[56].setBounds(432, 240, 144, 144);
			t[57].setBounds(432, 288, 144, 144);
			t[58].setBounds(432, 336, 144, 144);
			t[59].setBounds(432, 384, 144, 144);
			t[60].setBounds(432, 432, 144, 144);
			t[61].setBounds(480, 240, 144, 144);
			t[62].setBounds(480, 432, 144, 144);
			t[63].setBounds(528, 240, 144, 144);
			t[64].setBounds(528, 432, 144, 144);
			t[65].setBounds(576, 240, 144, 144);
			t[66].setBounds(576, 432, 144, 144);
			t[67].setBounds(624, 240, 144, 144);
			t[68].setBounds(624, 288, 144, 144);
			t[69].setBounds(624, 336, 144, 144);
			t[70].setBounds(624, 384, 144, 144);
			t[71].setBounds(624, 432, 144, 144);
			
			for(int i=0;i<8;i++)
			PanelListenner.w.add(t[i],0);
			for(int i=0;i<8;i++)
			PanelListenner.w.add(t[8+i],0);
			for(int i=0;i<8;i++)
			PanelListenner.w.add(t[16+i],0);
			
		}
		else if(index==213)
		{
			
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			for(int i=0;i<8;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			s = "/SkillImage/213-2.png";
			url = getClass().getResource(s);
			try {
				base = ImageIO.read(url);
			} catch (IOException e) {
				e.printStackTrace();
			}
			for(int i=0;i<5;i++)
			{
				skill7[8+i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			
			
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		else if(index==214)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			for(int i=0;i<21;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		else if(index==215)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			for(int i=0;i<8;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		else if(index==216)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			for(int i=0;i<15;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		else if(index==217)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			for(int i=0;i<11;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		else if(index==218)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			for(int i=0;i<13;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			
			t[0].setBounds(528, 240, 144, 144);
			t[1].setBounds(528, 432, 144, 144);
			t[2].setBounds(432, 336, 144, 144);
			t[3].setBounds(624, 336, 144, 144);

			for(int i=0;i<4;i++)
			PanelListenner.w.add(t[i],0);
		}
		
		else if(index==1)
		{
			PanelListenner.w.removeKeyListener(plt);
			Player.up=Player.down=Player.left=Player.right=false;
			if(skill218open)
			{
				for(int i=0;i<17;i++)
				{
					skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
				}

				if(Player.toward==1)
				{
					if(Playing.nowmap>=0 && Playing.nowmap<=30)
					{
						if(Playing.IsRun[Playing.nowmap][Player.playery-1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery-2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery-3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery-4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=31 && Playing.nowmap<=60)
					{
						if(Playing1.IsRun[Playing.nowmap-31][Player.playery-1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=61 && Playing.nowmap<=90)
					{
						if(Playing2.IsRun[Playing.nowmap-61][Player.playery-1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=91 && Playing.nowmap<=120)
					{
						if(Playing3.IsRun[Playing.nowmap-91][Player.playery-1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=121 && Playing.nowmap<=150)
					{
						if(Playing4.IsRun[Playing.nowmap-121][Player.playery-1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=151 && Playing.nowmap<=180)
					{
						if(Playing5.IsRun[Playing.nowmap-151][Player.playery-1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=181 && Playing.nowmap<=209)
					{
						if(Playing6.IsRun[Playing.nowmap-181][Player.playery-1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					t[0].setBounds(528, 336-48*mdv, 144, 144);		
				}
				else if(Player.toward==2)
				{
					if(Playing.nowmap>=0 && Playing.nowmap<=30)
					{
						if(Playing.IsRun[Playing.nowmap][Player.playery+1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery+2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery+3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery+4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=31 && Playing.nowmap<=60)
					{
						if(Playing1.IsRun[Playing.nowmap-31][Player.playery+1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=61 && Playing.nowmap<=90)
					{
						if(Playing2.IsRun[Playing.nowmap-61][Player.playery+1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=91 && Playing.nowmap<=120)
					{
						if(Playing3.IsRun[Playing.nowmap-91][Player.playery+1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=121 && Playing.nowmap<=150)
					{
						if(Playing4.IsRun[Playing.nowmap-121][Player.playery+1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=151 && Playing.nowmap<=180)
					{
						if(Playing5.IsRun[Playing.nowmap-151][Player.playery+1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=181 && Playing.nowmap<=209)
					{
						if(Playing6.IsRun[Playing.nowmap-181][Player.playery+1][Player.playerx]==4)
						{
							mdv=1;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+2][Player.playerx]==4)
						{
							mdv=2;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+3][Player.playerx]==4)
						{
							mdv=3;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+4][Player.playerx]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					
					t[0].setBounds(528, 336+48*mdv, 144, 144);		
					
				}
				else if(Player.toward==3)
				{
					if(Playing.nowmap>=0 && Playing.nowmap<=30)
					{
						if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-1]==4)
						{
							mdv=1;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-2]==4)
						{
							mdv=2;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-3]==4)
						{
							mdv=3;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=31 && Playing.nowmap<=60)
					{
						if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-1]==4)
						{
							mdv=1;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-2]==4)
						{
							mdv=2;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-3]==4)
						{
							mdv=3;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=61 && Playing.nowmap<=90)
					{
						if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-1]==4)
						{
							mdv=1;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-2]==4)
						{
							mdv=2;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-3]==4)
						{
							mdv=3;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=91 && Playing.nowmap<=120)
					{
						if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-1]==4)
						{
							mdv=1;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-2]==4)
						{
							mdv=2;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-3]==4)
						{
							mdv=3;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=121 && Playing.nowmap<=150)
					{
						if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-1]==4)
						{
							mdv=1;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-2]==4)
						{
							mdv=2;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-3]==4)
						{
							mdv=3;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=151 && Playing.nowmap<=180)
					{
						if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-1]==4)
						{
							mdv=1;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-2]==4)
						{
							mdv=2;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-3]==4)
						{
							mdv=3;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=181 && Playing.nowmap<=209)
					{
						if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-1]==4)
						{
							mdv=1;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-2]==4)
						{
							mdv=2;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-3]==4)
						{
							mdv=3;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					/*
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-4]==4)
					{
						mdv=4;
					}
					else
					{
						mdv=4;
					}
					*/
					t[0].setBounds(528-48*mdv, 336, 144, 144);							
				}
				else if(Player.toward==4)
				{
					if(Playing.nowmap>=0 && Playing.nowmap<=30)
					{
						if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+1]==4)
						{
							mdv=1;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+2]==4)
						{
							mdv=2;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+3]==4)
						{
							mdv=3;
						}
						else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=31 && Playing.nowmap<=60)
					{
						if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+1]==4)
						{
							mdv=1;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+2]==4)
						{
							mdv=2;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+3]==4)
						{
							mdv=3;
						}
						else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=61 && Playing.nowmap<=90)
					{
						if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+1]==4)
						{
							mdv=1;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+2]==4)
						{
							mdv=2;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+3]==4)
						{
							mdv=3;
						}
						else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=91 && Playing.nowmap<=120)
					{
						if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+1]==4)
						{
							mdv=1;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+2]==4)
						{
							mdv=2;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+3]==4)
						{
							mdv=3;
						}
						else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=121 && Playing.nowmap<=150)
					{
						if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+1]==4)
						{
							mdv=1;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+2]==4)
						{
							mdv=2;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+3]==4)
						{
							mdv=3;
						}
						else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=151 && Playing.nowmap<=180)
					{
						if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+1]==4)
						{
							mdv=1;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+2]==4)
						{
							mdv=2;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+3]==4)
						{
							mdv=3;
						}
						else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					else if(Playing.nowmap>=181 && Playing.nowmap<=209)
					{
						if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+1]==4)
						{
							mdv=1;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+2]==4)
						{
							mdv=2;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+3]==4)
						{
							mdv=3;
						}
						else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+4]==4)
						{
							mdv=4;
						}
						else
						{
							mdv=4;
						}
					}
					
					/*
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+4]==4)
					{
						mdv=4;
					}
					else
					{
						mdv=4;
					}
					*/
					t[0].setBounds(528+48*mdv, 336, 144, 144);							
				}
			}
			else
			{
				for(int i=0;i<4;i++)
				{
					skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
				}
				if(Player.toward==1)
				t[0].setBounds(528, 288, 144, 144);
				else if(Player.toward==2)
				t[0].setBounds(528, 384, 144, 144);
				else if(Player.toward==3)
				t[0].setBounds(480, 336, 144, 144);
				else if(Player.toward==4)
				t[0].setBounds(576, 336, 144, 144);
			}
			PanelListenner.w.add(t[0],0);
		}
		else if(index==1001)
		{
			for(int i=0;i<20;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);

		}
		else if(index==1002)
		{
			for(int i=0;i<12;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);

		}
		else if(index==1003)
		{
			for(int i=0;i<23;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);

		}
		else if(index==1004)
		{
			for(int i=0;i<16;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);

		}
		else if(index==1005)
		{
			for(int i=0;i<6;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);

		}
		else if(index==1006)
		{
			for(int i=0;i<7;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		else if(index==1007)
		{
			for(int i=0;i<9;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		else if(index==1008)
		{
			for(int i=0;i<9;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			t[0].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		else if(index==0)
		{
			for(int i=0;i<15;i++)
			{
				skill7[i] = base.getSubimage(144*(i%5), 144*(i/5), 144, 144);
			}
			t[0].setBounds(528, 288, 144, 144);
			PanelListenner.w.add(t[0],0);
		}
		/*
		thunder1 = base.getSubimage(0, 0, 192, 192);
		thunder2 = base.getSubimage(192, 0, 192, 192);
		thunder3 = base.getSubimage(384, 0, 192, 192);
		thunder4 = base.getSubimage(576, 0, 192, 192);
		thunder5 = base.getSubimage(768, 0, 192, 192);
		*/
		//t.setOpaque(false);
		
	}
	
	public void run()
	{
		
		//t.setIcon(new ImageIcon(thunder1));
		if(index==1001)
		{
			SEmusicbox se = new SEmusicbox(1001);
			se.start();
			for(int i=0;i<20;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(20);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  

			}
			PanelListenner.w.remove(t[0]);
		}
		else if(index==1002)
		{
			SEmusicbox se = new SEmusicbox(1002);
			se.start();
			for(int i=0;i<12;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(30);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  

			}
			PanelListenner.w.remove(t[0]);
		}
		else if(index==1003)
		{
			SEmusicbox se = new SEmusicbox(1003);
			se.start();
			for(int i=0;i<23;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(30);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  

			}
			PanelListenner.w.remove(t[0]);
		}
		else if(index==1004)
		{
			SEmusicbox se = new SEmusicbox(1004);
			se.start();
			for(int i=0;i<16;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(30);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  

			}
			PanelListenner.w.remove(t[0]);
		}
		else if(index==1005)
		{
			SEmusicbox se = new SEmusicbox(1005);
			se.start();
			for(int i=0;i<6;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(50);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  

			}
			PanelListenner.w.remove(t[0]);
		}
		else if(index==1006)
		{
			SEmusicbox se = new SEmusicbox(1006);
			se.start();
			for(int i=0;i<7;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(30);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  

			}
			PanelListenner.w.remove(t[0]);
		}
		else if(index==1007)
		{
			SEmusicbox se = new SEmusicbox(1007);
			se.start();
			for(int i=0;i<9;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(50);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  

			}
			PanelListenner.w.remove(t[0]);
		}
		else if(index==1008)
		{
			SEmusicbox se = new SEmusicbox(1008);
			se.start();
			for(int i=0;i<9;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(40);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  

			}
			PanelListenner.w.remove(t[0]);
		}

		else if(index==110)
		{
			PanelListenner.w.removeKeyListener(plt);
			for(int i=0;i<9;i++)
			skillcd[i]=true;
			//SEmusicbox se = new SEmusicbox(110);
			//se.start();
			//int c=0;
			/*
			for(int i=0;i<3;i++)
			{
				for(int j=0;j<3;j++)
				{
					SEmusicbox se = new SEmusicbox(110);
					se.start();

					for(int k=0;k<=j;k++)
					{
						//c++;
						t[k].setIcon(new ImageIcon(skill7[i]));
						try {  
							Thread.sleep(20);  
						} catch (InterruptedException e) {  
							e.printStackTrace();  
						}  

					}
				}
			}
			*/
			for(int i=0;i<3;i++)
			{
				if(i<=1)
				{
					SEmusicbox se = new SEmusicbox(1101);
					se.start();
				}
				else
				{
					SEmusicbox se = new SEmusicbox(1102);
					se.start();					
				}
				for(int j=0;j<3;j++)
				{
					if(i==0)
					{
						if(Player.toward==1)
						{
							t[0].setBounds(528, 274, 144, 144);
						}
						else if(Player.toward==2)
						{
							t[0].setBounds(528, 370, 144, 144);
						}
						else if(Player.toward==3)
						{
							t[0].setBounds(480, 322, 144, 144);
						}
						else if(Player.toward==4)
						{
							t[0].setBounds(576, 322, 144, 144);
						}
					}
					else if(i==1)
					{
						if(Player.toward==1)
						{
							t[0].setBounds(528, 302, 144, 144);
						}
						else if(Player.toward==2)
						{
							t[0].setBounds(528, 398, 144, 144);
						}
						else if(Player.toward==3)
						{
							t[0].setBounds(480, 350, 144, 144);
						}
						else if(Player.toward==4)
						{
							t[0].setBounds(576, 350, 144, 144);
						}				
					}
					else
					{
						if(Player.toward==1)
						{
							t[0].setBounds(528, 288, 144, 144);
						}
						else if(Player.toward==2)
						{
							t[0].setBounds(528, 384, 144, 144);
						}
						else if(Player.toward==3)
						{
							t[0].setBounds(480, 336, 144, 144);
						}
						else if(Player.toward==4)
						{
							t[0].setBounds(576, 336, 144, 144);
						}					
					}
					t[0].setIcon(new ImageIcon(skill7[i*3+j]));
					try {  
						Thread.sleep(90);  
					} catch (InterruptedException e) {  
						e.printStackTrace();  
					}  	
				}
			}
			
			int x=Player.playerx,y=Player.playery;

			PanelListenner.w.remove(t[0]);
			PanelListenner.w.addKeyListener(plt);
			
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=0)
				skillcd[i]=false;
			}
			
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[0]=false;
			
		}
		else if(index==111)
		{
			int dv=0;
			PanelListenner.w.removeKeyListener(plt);
			for(int i=0;i<9;i++)
			skillcd[i]=true;

			//PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(1111);
			se.start();
			if(Player.toward==1)
			{
				dv=288;
			}
			else if(Player.toward==2)
			{
				dv=384;
			}
			else if(Player.toward==3)
			{
				dv=480;
			}
			else if(Player.toward==4)
			{
				dv=576;
			}
			for(int i=0;i<8;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				if(Player.toward==1)
				{
					if(dv==48)
					break;
					t[0].setBounds(528, dv--, 144, 144);
				}
				else if(Player.toward==2)
				{
					if(dv==624)
					break;
					t[0].setBounds(528, dv++, 144, 144);
				}
				else if(Player.toward==3)
				{
					if(dv==240)
					break;
					t[0].setBounds(dv--, 336, 144, 144);
				}
				else if(Player.toward==4)
				{
					if(dv==816)
					break;
					t[0].setBounds(dv++, 336, 144, 144);
				}
				//System.out.println(dv);
				try {  
					Thread.sleep(2);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  				
				i%=7;
			}
			for(int i=0;i<3;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[8+i]));
				if(Player.toward==1)
				{
					t[0].setBounds(528, dv, 144, 144);
				}
				else if(Player.toward==2)
				{
					t[0].setBounds(528, dv, 144, 144);
				}
				else if(Player.toward==3)
				{
					t[0].setBounds(dv, 336, 144, 144);
				}
				else if(Player.toward==4)
				{
					t[0].setBounds(dv, 336, 144, 144);
				}
				try {  
					Thread.sleep(50);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  								
			}
			/*
			for(int i=0;i<35;i++)
			{
				
				t[0].setIcon(new ImageIcon(skill7[i]));
				if(i==13 || i==14)
				{
					try {  
						Thread.sleep(110);  
					} catch (InterruptedException e) {  
						e.printStackTrace();  
					}  
				}
				try {  
					Thread.sleep(40);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			*/
			
			PanelListenner.w.remove(t[0]);
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=1)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[1]=false;	
		}
		else if(index==112)
		{
			PanelListenner.w.removeKeyListener(plt);			
			for(int i=0;i<9;i++)
			skillcd[i]=true;

			//PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(1121);
			se.start();
			
			for(int i=0;i<13;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(30);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			SEmusicbox se1 = new SEmusicbox(1122);
			se1.start();

			try {  
				Thread.sleep(100);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			PanelListenner.w.remove(t[0]);
			
			/*
			for(int i=0;i<6;i++)
			{
				for(int j=1;j<5;j++)
				{
					SEmusicbox se1 = new SEmusicbox(112);
					se1.start();

					for(int k=1;k<=j;k++)
					{
						t[k].setIcon(new ImageIcon(skill7[8+i]));
						try {  
							Thread.sleep(20);  
						} catch (InterruptedException e) {  
							e.printStackTrace();  
						}  

					}
				}
			}
			int x=Player.playerx,y=Player.playery;
			
			
			for(int k=0;k<4;k++)
			{
			if(Player.toward==1)
			y--;
			else if(Player.toward==2)
			y++;
			else if(Player.toward==3)
			x--;
			else if(Player.toward==4)
			x++;
			
			for(int i=0;i<Monster.monstercount && Monster.monsterset[Playing.nowmap];i++)
			{
				
				if(Monster.monsteractive[Playing.nowmap][i]==true && Monster.monster[Playing.nowmap][i][0]==x && Monster.monster[Playing.nowmap][i][1]==y)
				{
					Monster.monsterhp[Playing.nowmap][i]-=PlayerAbilitySystem.playeratk*5;
				}
				if(Monster.monsterhp[Playing.nowmap][i]<=0 && Monster.monsteractive[Playing.nowmap][i]==true)
				{
					Monster.monsteractive[Playing.nowmap][i]=false;
					Playing.playerexperience+=600;
					InventoryGoldArea.playercoin+=500;

					Playing.IsRun[Playing.nowmap][Monster.monster[Playing.nowmap][i][1]][Monster.monster[Playing.nowmap][i][0]]=1;
				}
			}
			}
			for(int i=0;i<5;i++)
			PanelListenner.w.remove(t[i]);
			*/
			
			//PanelListenner.w.remove(t[0]);
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=2)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[2]=false;	
		}
		else if(index==113)
		{
			PanelListenner.w.removeKeyListener(plt);
			for(int i=0;i<9;i++)
			skillcd[i]=true;

			
			SEmusicbox se = new SEmusicbox(1131);
			se.start();			
			for(int i=0;i<9;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[6+i]));
				try {
					if(i<3)
					Thread.sleep(40); 	
					else
					Thread.sleep(20);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			
			Player.paintable=false;			
			if(Player.toward==1)
			{
				if(Playing.nowmap>=0 && Playing.nowmap<=30)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery-4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336+48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=31 && Playing.nowmap<=60)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery-4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336+48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=61 && Playing.nowmap<=90)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery-4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336+48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=91 && Playing.nowmap<=120)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery-4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336+48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=121 && Playing.nowmap<=150)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery-4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336+48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=151 && Playing.nowmap<=180)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery-4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336+48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=181 && Playing.nowmap<=209)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery-4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336+48*(i+1), 144, 144);
					}
				}				
				Player.playery-=mdv;
				Player.preplayery=Player.playery;
				//Player.ry=Player.playery*48;
			}
			else if(Player.toward==2)
			{
				if(Playing.nowmap>=0 && Playing.nowmap<=30)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery+4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336-48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=31 && Playing.nowmap<=60)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery+4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336-48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=61 && Playing.nowmap<=90)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery+4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336-48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=91 && Playing.nowmap<=120)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery+4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336-48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=121 && Playing.nowmap<=150)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery+4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336-48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=151 && Playing.nowmap<=180)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery+4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336-48*(i+1), 144, 144);
					}
				}
				else if(Playing.nowmap>=181 && Playing.nowmap<=209)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery+4][Player.playerx]==1)
					{
						mdv=4;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528, 336-48*(i+1), 144, 144);
					}
				}				
				
				/*
				if(Playing.IsRun[Playing.nowmap][Player.playery+4][Player.playerx]==1)
				{
					mdv=4;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery+3][Player.playerx]==1)
				{
					mdv=3;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery+2][Player.playerx]==1)
				{
					mdv=2;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery+1][Player.playerx]==1)
				{
					mdv=1;
				}
				for(int i=0;i<mdv-1;i++)
				{
					t[i+1].setBounds(528, 336-48*(i+1), 144, 144);
				}
				*/
				Player.playery+=mdv;
				Player.preplayery=Player.playery;
				//Player.ry=Player.playery*48;

			}
			else if(Player.toward==3)
			{
				if(Playing.nowmap>=0 && Playing.nowmap<=30)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-4]==1)
					{
						mdv=4;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528+48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=31 && Playing.nowmap<=60)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-4]==1)
					{
						mdv=4;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528+48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=61 && Playing.nowmap<=90)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-4]==1)
					{
						mdv=4;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528+48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=91 && Playing.nowmap<=120)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-4]==1)
					{
						mdv=4;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528+48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=121 && Playing.nowmap<=150)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-4]==1)
					{
						mdv=4;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528+48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=151 && Playing.nowmap<=180)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-4]==1)
					{
						mdv=4;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528+48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=181 && Playing.nowmap<=209)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-4]==1)
					{
						mdv=4;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528+48*(i+1), 336, 144, 144);
					}
				}				
				
				/*
				if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-4]==1)
				{
					mdv=4;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-3]==1)
				{
					mdv=3;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-2]==1)
				{
					mdv=2;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-1]==1)
				{
					mdv=1;
				}
				
				for(int i=0;i<mdv-1;i++)
				{
					t[i+1].setBounds(528+48*(i+1), 336, 144, 144);
				}
				*/
				Player.playerx-=mdv;	
				Player.preplayerx=Player.playerx;
				//Player.rx=Player.playerx*48;

			}
			else if(Player.toward==4)
			{
				if(Playing.nowmap>=0 && Playing.nowmap<=30)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+4]==1)
					{
						mdv=4;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528-48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=31 && Playing.nowmap<=60)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+4]==1)
					{
						mdv=4;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528-48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=61 && Playing.nowmap<=90)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+4]==1)
					{
						mdv=4;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528-48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=91 && Playing.nowmap<=120)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+4]==1)
					{
						mdv=4;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528-48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=121 && Playing.nowmap<=150)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+4]==1)
					{
						mdv=4;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528-48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=151 && Playing.nowmap<=180)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+4]==1)
					{
						mdv=4;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528-48*(i+1), 336, 144, 144);
					}
				}
				else if(Playing.nowmap>=181 && Playing.nowmap<=209)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+4]==1)
					{
						mdv=4;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					for(int i=0;i<mdv-1;i++)
					{
						t[i+1].setBounds(528-48*(i+1), 336, 144, 144);
					}
				}				
				
				/*
				if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+4]==1)
				{
					mdv=4;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+3]==1)
				{
					mdv=3;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+2]==1)
				{
					mdv=2;
				}
				else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+1]==1)
				{
					mdv=1;
				}
				for(int i=0;i<mdv-1;i++)
				{
					t[i+1].setBounds(528-48*(i+1), 336, 144, 144);
				}
				*/
				Player.playerx+=mdv;	
				Player.preplayerx=Player.playerx;	
				//Player.rx=Player.playerx*48;	
			}
			PanelListenner.w.remove(t[0]);
			
			Player player = new Player();
			player.start();

			for(int i=0;i<mdv-1;i++)
			PanelListenner.w.add(t[i+1],0);		
			Player.paintable=true;
			
			
			for(int j=0;j<mdv-1;j++)
			{
				SEmusicbox se1 = new SEmusicbox(1132);
				se1.start();			
				for(int i=0;i<6;i++)
				{
					t[mdv-1-j].setIcon(new ImageIcon(skill7[i]));
					try {  
						Thread.sleep(40);  
					} catch (InterruptedException e) {  
						e.printStackTrace();  
					}  
				}
			}
			
			for(int i=0;i<mdv-1;i++)
			PanelListenner.w.remove(t[i+1]);
			
			
			//PanelListenner.w.removeKeyListener(plt);
			//System.out.println("GGGG");
			/*
			SEmusicbox se = new SEmusicbox(1130);
			se.start();

			for(int i=0;i<10;i++)
			{
				t[24].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(60);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			PanelListenner.w.remove(t[24]);
			
			for(int i=1;i<7;i++)
			{
				for(int j=0;j<2;j++)
				{
				SEmusicbox se1 = new SEmusicbox(113);
				se1.start();
				}
				t[6].setIcon(new ImageIcon(skill7[10+i]));
				t[7].setIcon(new ImageIcon(skill7[10+i]));
				t[8].setIcon(new ImageIcon(skill7[10+i]));
				t[11].setIcon(new ImageIcon(skill7[10+i]));
				t[12].setIcon(new ImageIcon(skill7[10+i]));
				t[15].setIcon(new ImageIcon(skill7[10+i]));
				t[16].setIcon(new ImageIcon(skill7[10+i]));
				t[17].setIcon(new ImageIcon(skill7[10+i]));
				try {  
					Thread.sleep(100);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
				for(int j=0;j<5;j++)
				t[j].setIcon(new ImageIcon(skill7[10+i]));
				t[5].setIcon(new ImageIcon(skill7[10+i]));
				t[9].setIcon(new ImageIcon(skill7[10+i]));
				t[10].setIcon(new ImageIcon(skill7[10+i]));
				t[13].setIcon(new ImageIcon(skill7[10+i]));
				t[14].setIcon(new ImageIcon(skill7[10+i]));
				t[18].setIcon(new ImageIcon(skill7[10+i]));
				for(int j=0;j<5;j++)
				t[19+j].setIcon(new ImageIcon(skill7[10+i]));
				try {  
					Thread.sleep(150);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  

			}
			int x=Player.playerx,y=Player.playery;
			
			for(int k=Player.playerx-2;k<=Player.playerx+2;k++)
			{
				for(int j=Player.playery-2;j<=Player.playery+2;j++)
				{
					for(int i=0;i<Monster.monstercount && Monster.monsterset[Playing.nowmap];i++)
					{
				
						if(Monster.monsteractive[Playing.nowmap][i]==true && Monster.monster[Playing.nowmap][i][0]==k && Monster.monster[Playing.nowmap][i][1]==j)
						{
							Monster.monsterhp[Playing.nowmap][i]-=PlayerAbilitySystem.playeratk*5;
						}
						if(Monster.monsterhp[Playing.nowmap][i]<=0 && Monster.monsteractive[Playing.nowmap][i]==true)
						{
							Monster.monsteractive[Playing.nowmap][i]=false;
							Playing.playerexperience+=600;
							InventoryGoldArea.playercoin+=500;

							Playing.IsRun[Playing.nowmap][Monster.monster[Playing.nowmap][i][1]][Monster.monster[Playing.nowmap][i][0]]=1;
						}
					}
				}
			}
			for(int i=0;i<25;i++)
			PanelListenner.w.remove(t[i]);
			*/
			
			//Player.paintable=true;
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=3)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[3]=false;	
		}
		else if(index==114)
		{
			PanelListenner.w.removeKeyListener(plt);
			for(int i=0;i<9;i++)
			skillcd[i]=true;

			SEmusicbox se = new SEmusicbox(1141);
			se.start();

			for(int i=0;i<35;i++)
			{
				
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					if(i>=15 && i<=24)
					Thread.sleep(50);  					
					else if(i>=25)
					Thread.sleep(10);
					else
					Thread.sleep(30);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			
			PanelListenner.w.remove(t[0]);
			PanelListenner.w.addKeyListener(plt);
			
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=4)
				skillcd[i]=false;
			}

			
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[4]=false;	
		}
		else if(index==115)
		{
			for(int i=0;i<9;i++)
			skillcd[i]=true;

			PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(1151);
			se.start();
			for(int i=0;i<13;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(40);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			
			PanelListenner.w.remove(t[0]);
			mdv=3;
			if(Playing.nowmap>=0 && Playing.nowmap<=30)
			{
				if(Player.toward==1)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=31 && Playing.nowmap<=60)
			{
				if(Player.toward==1)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=61 && Playing.nowmap<=90)
			{
				if(Player.toward==1)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=91 && Playing.nowmap<=120)
			{
				if(Player.toward==1)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=121 && Playing.nowmap<=150)
			{
				if(Player.toward==1)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=151 && Playing.nowmap<=180)
			{
				if(Player.toward==1)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=181 && Playing.nowmap<=209)
			{
				if(Player.toward==1)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
							
			PanelListenner.w.add(t[1],0);
			
			SEmusicbox se1 = new SEmusicbox(1152);
			se1.start();
			for(int i=0;i<6;i++)
			{
				t[1].setIcon(new ImageIcon(skill7[13+i]));
				try {  
					Thread.sleep(50);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			
/*			
			PanelListenner.w.remove(t[0]);
			for(int i=6;i<13;i++)
			{
				t[1].setIcon(new ImageIcon(skill7[13+i]));
				try {  
					Thread.sleep(100);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			for(int i=0;i<24;i++)
			{
				SEmusicbox se2 = new SEmusicbox(115);
				se2.start();

				t[1].setIcon(new ImageIcon(skill7[26+i]));
				try {  
					Thread.sleep(50);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			int x=Player.playerx,y=Player.playery;
			if(Player.toward==1)
			y--;
			else if(Player.toward==2)
			y++;
			else if(Player.toward==3)
			x--;
			else if(Player.toward==4)
			x++;

			for(int i=0;i<Monster.monstercount && Monster.monsterset[Playing.nowmap];i++)
			{
				
				if(Monster.monsteractive[Playing.nowmap][i]==true && Monster.monster[Playing.nowmap][i][0]==x && Monster.monster[Playing.nowmap][i][1]==y)
				{
					Monster.monsterhp[Playing.nowmap][i]-=PlayerAbilitySystem.playeratk*5;
				}
				if(Monster.monsterhp[Playing.nowmap][i]<=0 && Monster.monsteractive[Playing.nowmap][i]==true)
				{
					Monster.monsteractive[Playing.nowmap][i]=false;
					Playing.playerexperience+=600;
					InventoryGoldArea.playercoin+=500;

					Playing.IsRun[Playing.nowmap][Monster.monster[Playing.nowmap][i][1]][Monster.monster[Playing.nowmap][i][0]]=1;
				}
			}
*/
			PanelListenner.w.remove(t[1]);
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=5)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[5]=false;	
		}
		else if(index==116)
		{
			for(int i=0;i<9;i++)
			skillcd[i]=true;

			PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(1161);
			se.start();
			for(int i=0;i<6;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(50);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			
			PanelListenner.w.remove(t[0]);
			mdv=3;
	
			if(Playing.nowmap>=0 && Playing.nowmap<=30)
			{
				if(Player.toward==1)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=31 && Playing.nowmap<=60)
			{
				if(Player.toward==1)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=61 && Playing.nowmap<=90)
			{
				if(Player.toward==1)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=91 && Playing.nowmap<=120)
			{
				if(Player.toward==1)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=121 && Playing.nowmap<=150)
			{
				if(Player.toward==1)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=151 && Playing.nowmap<=180)
			{
				if(Player.toward==1)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
			else if(Playing.nowmap>=181 && Playing.nowmap<=209)
			{
				if(Player.toward==1)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery-1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336-48*mdv, 144, 144);				
				}
				else if(Player.toward==2)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery+1][Player.playerx]==4)
					{
						mdv=1;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+2][Player.playerx]==4)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+3][Player.playerx]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528, 336+48*mdv, 144, 144);				
				}
				else if(Player.toward==3)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-1]==4)
					{
						mdv=1;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-2]==4)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528-48*mdv, 336, 144, 144);				
				}
				else if(Player.toward==4)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+1]==4)
					{
						mdv=1;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+2]==4)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+3]==4)
					{
						mdv=3;
					}
					t[1].setBounds(528+48*mdv, 336, 144, 144);
				}
			}
		
		
		
			PanelListenner.w.add(t[1],0);
			
			SEmusicbox se1 = new SEmusicbox(1162);
			se1.start();
			for(int i=0;i<8;i++)
			{
				t[1].setIcon(new ImageIcon(skill7[6+i]));
				try {  
					Thread.sleep(60);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			
			PanelListenner.w.remove(t[1]);
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=6)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[6]=false;		
		}
		else if(index==117)
		{
			PanelListenner.w.removeKeyListener(plt);			
			for(int i=0;i<9;i++)
			skillcd[i]=true;

			//PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(1171);
			se.start();
			
			for(int i=0;i<7;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(80);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}

			PanelListenner.w.remove(t[0]);
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=7)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[7]=false;	
			
		}
		else if(index==118)
		{
			for(int i=0;i<9;i++)
			skillcd[i]=true;

			PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(1181);
			se.start();
			for(int i=0;i<10;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(40);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			PanelListenner.w.remove(t[0]);
			PanelListenner.w.add(t[1],0);

			for(int i=0;i<30;i++)
			{
				//if()
				SEmusicbox se1 = new SEmusicbox(1182);
				se1.start();
				for(int k=0;k<10;k++)
				{
					t[1].setIcon(new ImageIcon(skill7[10+k]));
					try {  
						Thread.sleep(5);  
					} catch (InterruptedException e) {  
						e.printStackTrace();  
					}  
				}
			}
			/*
			int x=Player.playerx,y=Player.playery;
			if(Player.toward==1)
			y--;
			else if(Player.toward==2)
			y++;
			else if(Player.toward==3)
			x--;
			else if(Player.toward==4)
			x++;

			for(int i=0;i<Monster.monstercount && Monster.monsterset[Playing.nowmap];i++)
			{
				
				if(Monster.monsteractive[Playing.nowmap][i]==true && Monster.monster[Playing.nowmap][i][0]==x && Monster.monster[Playing.nowmap][i][1]==y)
				{
					Monster.monsterhp[Playing.nowmap][i]-=PlayerAbilitySystem.playeratk*100;
				}
				if(Monster.monsterhp[Playing.nowmap][i]<=0 && Monster.monsteractive[Playing.nowmap][i]==true)
				{
					Monster.monsteractive[Playing.nowmap][i]=false;
					Playing.playerexperience+=600;
					InventoryGoldArea.playercoin+=500;

					Playing.IsRun[Playing.nowmap][Monster.monster[Playing.nowmap][i][1]][Monster.monster[Playing.nowmap][i][0]]=1;
				}
			}
			*/
			
			PanelListenner.w.addKeyListener(plt);
			PanelListenner.w.remove(t[1]);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=8)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[8]=false;
			
		}
		else if(index==210)
		{
			for(int i=0;i<9;i++)
			skillcd[i]=true;

		//	PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(2101);
			se.start();
			for(int i=0;i<5;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					if(i==0)
					Thread.sleep(150);
					else
					Thread.sleep(80);
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}		
			PanelListenner.w.remove(t[0]);
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=0)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[0]=false;	
		}
		else if(index==211)
		{
			for(int i=0;i<9;i++)
			skillcd[i]=true;

			SEmusicbox se = new SEmusicbox(2111);
			se.start();
			for(int i=0;i<25;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(20);
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}		
			Player.paintable=false;
			if(Playing.nowmap>=0 && Playing.nowmap<=30)
			{
				if(Player.toward==1)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery-=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==2)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery+=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==3)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					Player.playerx-=mdv;	
					Player.preplayerx=Player.playerx;
				}
				else if(Player.toward==4)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					Player.playerx+=mdv;	
					Player.preplayerx=Player.playerx;	
				}
			}
			else if(Playing.nowmap>=31 && Playing.nowmap<=60)
			{
				if(Player.toward==1)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery-=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==2)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery+=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==3)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					Player.playerx-=mdv;	
					Player.preplayerx=Player.playerx;
				}
				else if(Player.toward==4)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					Player.playerx+=mdv;	
					Player.preplayerx=Player.playerx;	
				}
			}
			else if(Playing.nowmap>=61 && Playing.nowmap<=90)
			{
				if(Player.toward==1)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery-=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==2)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery+=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==3)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					Player.playerx-=mdv;	
					Player.preplayerx=Player.playerx;
				}
				else if(Player.toward==4)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					Player.playerx+=mdv;	
					Player.preplayerx=Player.playerx;	
				}
			}
			else if(Playing.nowmap>=91 && Playing.nowmap<=120)
			{
				if(Player.toward==1)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery-=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==2)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery+=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==3)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					Player.playerx-=mdv;	
					Player.preplayerx=Player.playerx;
				}
				else if(Player.toward==4)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					Player.playerx+=mdv;	
					Player.preplayerx=Player.playerx;	
				}
			}
			else if(Playing.nowmap>=121 && Playing.nowmap<=150)
			{
				if(Player.toward==1)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery-=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==2)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery+=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==3)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					Player.playerx-=mdv;	
					Player.preplayerx=Player.playerx;
				}
				else if(Player.toward==4)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					Player.playerx+=mdv;	
					Player.preplayerx=Player.playerx;	
				}
			}
			else if(Playing.nowmap>=151 && Playing.nowmap<=180)
			{
				if(Player.toward==1)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery-=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==2)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery+=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==3)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					Player.playerx-=mdv;	
					Player.preplayerx=Player.playerx;
				}
				else if(Player.toward==4)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					Player.playerx+=mdv;	
					Player.preplayerx=Player.playerx;	
				}
			}
			else if(Playing.nowmap>=181 && Playing.nowmap<=209)
			{
				if(Player.toward==1)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery-3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery-=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==2)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery+3][Player.playerx]==1)
					{
						mdv=3;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+2][Player.playerx]==1)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+1][Player.playerx]==1)
					{
						mdv=1;
					}
					Player.playery+=mdv;
					Player.preplayery=Player.playery;
				}
				else if(Player.toward==3)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-3]==1)
					{
						mdv=3;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-2]==1)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-1]==1)
					{
						mdv=1;
					}
					Player.playerx-=mdv;	
					Player.preplayerx=Player.playerx;
				}
				else if(Player.toward==4)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+3]==1)
					{
						mdv=3;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+2]==1)
					{
						mdv=2;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+1]==1)
					{
						mdv=1;
					}
					Player.playerx+=mdv;	
					Player.preplayerx=Player.playerx;	
				}
			}
			
			Player player = new Player();
			player.start();

			PanelListenner.w.remove(t[0]);
			Player.paintable=true;	
			PanelListenner.w.addKeyListener(plt);
			
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=1)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[1]=false;	
		}
		else if(index==212)
		{
			for(int i=0;i<9;i++)
			skillcd[i]=true;

		//	PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(2121);
			se.start();
			
			for(int i=0;i<5;i++)
			{
				for(int j=0;j<8;j++)
				{
					t[j].setIcon(new ImageIcon(skill7[13+i]));
					t[8+j].setIcon(new ImageIcon(skill7[7+i]));
					t[16+j].setIcon(new ImageIcon(skill7[i]));
				}
				try {  
					if(i==4)
					Thread.sleep(200);
					else
					Thread.sleep(90);
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			
			for(int i=0;i<24;i++)
			PanelListenner.w.remove(t[i]);
			
			for(int i=0;i<48;i++)
			PanelListenner.w.add(t[24+i],0);
			
			SEmusicbox se1 = new SEmusicbox(2121);
			se1.start();
			
			for(int i=0;i<5;i++)
			{
				for(int j=0;j<16;j++)
				{
					t[24+j].setIcon(new ImageIcon(skill7[13+i]));
					t[40+j].setIcon(new ImageIcon(skill7[7+i]));
					t[56+j].setIcon(new ImageIcon(skill7[i]));
				}
				try {  
					Thread.sleep(80);
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}
			
			for(int i=0;i<48;i++)
			PanelListenner.w.remove(t[24+i]);
			
			
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=2)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[2]=false;	
		}
		else if(index==213)
		{
			int dv=0;
			//PanelListenner.w.removeKeyListener(plt);
			for(int i=0;i<9;i++)
			skillcd[i]=true;

			//PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(2131);
			se.start();
			
			for(int i=0;i<8;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(50);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  			
			}
			PanelListenner.w.remove(t[0]);
			
			PanelListenner.w.add(t[1],0);
			
			SEmusicbox se1 = new SEmusicbox(2132);
			se1.start();
			
			if(Player.toward==1)
			{
				dv=288;
			}
			else if(Player.toward==2)
			{
				dv=384;
			}
			else if(Player.toward==3)
			{
				dv=480;
			}
			else if(Player.toward==4)
			{
				dv=576;
			}
			
			for(int i=0;i<5;i++)
			{
				t[1].setIcon(new ImageIcon(skill7[8+i]));
				if(Player.toward==1)
				{
					if(dv==48)
					break;
					t[1].setBounds(528, dv--, 144, 144);
				}
				else if(Player.toward==2)
				{
					if(dv==624)
					break;
					t[1].setBounds(528, dv++, 144, 144);
				}
				else if(Player.toward==3)
				{
					if(dv==240)
					break;
					t[1].setBounds(dv--, 336, 144, 144);
				}
				else if(Player.toward==4)
				{
					if(dv==816)
					break;
					t[1].setBounds(dv++, 336, 144, 144);
				}
				//System.out.println(dv);
				try {  
					Thread.sleep(2);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  				
				i%=4;
			}
	
			PanelListenner.w.remove(t[1]);
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=3)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[3]=false;	

		}
		else if(index==214)
		{
			int dv=0,repcnt=0,skx=0,sky=0,skmap=0;
			for(int i=0;i<9;i++)
			skillcd[i]=true;
//.
		//	PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(2141);
			se.start();
			
			if(Player.toward==1)
			{
				dv=336;
			}
			else if(Player.toward==2)
			{
				dv=336;
			}
			else if(Player.toward==3)
			{
				dv=528;
			}
			else if(Player.toward==4)
			{
				dv=528;
			}
			
			for(int i=0;i<5;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[repcnt/24]));
				if(repcnt!=240)
				repcnt++;
				if(Monster.monsterset[Playing.nowmap]==true && repcnt%48==0)
				{
					if(Player.toward==1)
					{
						if(Playing.nowmap>=0 && Playing.nowmap<=30)
						{
							if(Playing.IsRun[Playing.nowmap][Player.playery-repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery-repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery-repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=31 && Playing.nowmap<=60)
						{
							if(Playing1.IsRun[Playing.nowmap-31][Player.playery-repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery-repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery-repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=61 && Playing.nowmap<=90)
						{
							if(Playing2.IsRun[Playing.nowmap-61][Player.playery-repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery-repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery-repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=91 && Playing.nowmap<=120)
						{
							if(Playing3.IsRun[Playing.nowmap-91][Player.playery-repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery-repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery-repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=121 && Playing.nowmap<=150)
						{
							if(Playing4.IsRun[Playing.nowmap-121][Player.playery-repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery-repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery-repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=151 && Playing.nowmap<=180)
						{
							if(Playing5.IsRun[Playing.nowmap-151][Player.playery-repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery-repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery-repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=181 && Playing.nowmap<=209)
						{
							if(Playing6.IsRun[Playing.nowmap-181][Player.playery-repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery-repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery-repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}						
					}
					else if(Player.toward==2)
					{
						if(Playing.nowmap>=0 && Playing.nowmap<=30)
						{
							if(Playing.IsRun[Playing.nowmap][Player.playery+repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery+repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery+repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=31 && Playing.nowmap<=60)
						{
							if(Playing1.IsRun[Playing.nowmap-31][Player.playery+repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery+repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery+repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=61 && Playing.nowmap<=90)
						{
							if(Playing2.IsRun[Playing.nowmap-61][Player.playery+repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery+repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery+repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=91 && Playing.nowmap<=120)
						{
							if(Playing3.IsRun[Playing.nowmap-91][Player.playery+repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery+repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery+repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=121 && Playing.nowmap<=150)
						{
							if(Playing4.IsRun[Playing.nowmap-121][Player.playery+repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery+repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery+repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=151 && Playing.nowmap<=180)
						{
							if(Playing5.IsRun[Playing.nowmap-151][Player.playery+repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery+repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery+repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=181 && Playing.nowmap<=209)
						{
							if(Playing6.IsRun[Playing.nowmap-181][Player.playery+repcnt/48][Player.playerx]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery+repcnt/48][Player.playerx]=214;
								skx=Player.playerx;
								sky=Player.playery+repcnt/48;
								skmap=Playing.nowmap;
								break;
							}
						}					
					}
					else if(Player.toward==3)
					{
						if(Playing.nowmap>=0 && Playing.nowmap<=30)
						{
							if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-repcnt/48]=214;
								skx=Player.playerx-repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=31 && Playing.nowmap<=60)
						{
							if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-repcnt/48]=214;
								skx=Player.playerx-repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=61 && Playing.nowmap<=90)
						{
							if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-repcnt/48]=214;
								skx=Player.playerx-repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=91 && Playing.nowmap<=120)
						{
							if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-repcnt/48]=214;
								skx=Player.playerx-repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=121 && Playing.nowmap<=150)
						{
							if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-repcnt/48]=214;
								skx=Player.playerx-repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=151 && Playing.nowmap<=180)
						{
							if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-repcnt/48]=214;
								skx=Player.playerx-repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=181 && Playing.nowmap<=209)
						{
							if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-repcnt/48]=214;
								skx=Player.playerx-repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
					}
					else if(Player.toward==4)
					{
						if(Playing.nowmap>=0 && Playing.nowmap<=30)
						{
							if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+repcnt/48]=214;
								skx=Player.playerx+repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=31 && Playing.nowmap<=60)
						{
							if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+repcnt/48]=214;
								skx=Player.playerx+repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=61 && Playing.nowmap<=90)
						{
							if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+repcnt/48]=214;
								skx=Player.playerx+repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=91 && Playing.nowmap<=120)
						{
							if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+repcnt/48]=214;
								skx=Player.playerx+repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=121 && Playing.nowmap<=150)
						{
							if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+repcnt/48]=214;
								skx=Player.playerx+repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=151 && Playing.nowmap<=180)
						{
							if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+repcnt/48]=214;
								skx=Player.playerx+repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						else if(Playing.nowmap>=181 && Playing.nowmap<=209)
						{
							if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+repcnt/48]==4)
							{
								Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+repcnt/48]=214;
								skx=Player.playerx+repcnt/48;
								sky=Player.playery;
								skmap=Playing.nowmap;
								break;
							}
						}
						
					}			
				}
				
				if(Player.toward==1)
				{
					if(dv==96)
					break;
					t[0].setBounds(528, dv--, 144, 144);
				}
				else if(Player.toward==2)
				{
					if(dv==576)
					break;
					t[0].setBounds(528, dv++, 144, 144);
				}
				else if(Player.toward==3)
				{
					if(dv==288)
					break;
					t[0].setBounds(dv--, 336, 144, 144);
				}
				else if(Player.toward==4)
				{
					if(dv==768)
					break;
					t[0].setBounds(dv++, 336, 144, 144);
				}
				//System.out.println(dv);
				try {  
					Thread.sleep(2);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  				
				i%=4;
			}
			
			PanelListenner.w.remove(t[0]);
			PanelListenner.w.addKeyListener(plt);
			
			
			try {  
				Thread.sleep(2000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			
			Playing.MapState[skmap][sky][skx]=0;
			
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=0)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[4]=false;	
		}
		else if(index==215)
		{
			int skx=0,sky=0,skmap=0;
			for(int i=0;i<9;i++)
			skillcd[i]=true;

		//	PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(2151);
			se.start();
			for(int i=0;i<8;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(80);
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}		
			PanelListenner.w.remove(t[0]);
			if(Player.toward==1)
			{
				if(Playing.nowmap>=0 && Playing.nowmap<=30)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery-1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-1;
						skmap=Playing.nowmap;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery-2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-2;
						skmap=Playing.nowmap;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery-3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;
					}
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=31 && Playing.nowmap<=60)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery-1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-1;
						skmap=Playing.nowmap;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-2;
						skmap=Playing.nowmap;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery-3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;
					}
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=61 && Playing.nowmap<=90)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery-1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-1;
						skmap=Playing.nowmap;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-2;
						skmap=Playing.nowmap;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery-3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;
					}
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=91 && Playing.nowmap<=120)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery-1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-1;
						skmap=Playing.nowmap;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-2;
						skmap=Playing.nowmap;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery-3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;
					}
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=121 && Playing.nowmap<=150)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery-1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-1;
						skmap=Playing.nowmap;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-2;
						skmap=Playing.nowmap;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery-3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;
					}
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=151 && Playing.nowmap<=180)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery-1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-1;
						skmap=Playing.nowmap;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-2;
						skmap=Playing.nowmap;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery-3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;
					}
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=181 && Playing.nowmap<=209)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery-1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-1;
						skmap=Playing.nowmap;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-2;
						skmap=Playing.nowmap;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery-3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;
					}
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery-3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery-3;
						skmap=Playing.nowmap;					
					}
				}		
			}
			else if(Player.toward==2)
			{
				if(Playing.nowmap>=0 && Playing.nowmap<=30)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery+1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+1;
						skmap=Playing.nowmap;
					}
					else if(Playing.IsRun[Playing.nowmap][Player.playery+2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+2;
						skmap=Playing.nowmap;
					}						
					else if(Playing.IsRun[Playing.nowmap][Player.playery+3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=31 && Playing.nowmap<=60)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery+1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+1;
						skmap=Playing.nowmap;
					}
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+2;
						skmap=Playing.nowmap;
					}						
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery+3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=61 && Playing.nowmap<=90)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery+1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+1;
						skmap=Playing.nowmap;
					}
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+2;
						skmap=Playing.nowmap;
					}						
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery+3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=91 && Playing.nowmap<=120)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery+1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+1;
						skmap=Playing.nowmap;
					}
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+2;
						skmap=Playing.nowmap;
					}						
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery+3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=121 && Playing.nowmap<=150)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery+1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+1;
						skmap=Playing.nowmap;
					}
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+2;
						skmap=Playing.nowmap;
					}						
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery+3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=151 && Playing.nowmap<=180)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery+1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+1;
						skmap=Playing.nowmap;
					}
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+2;
						skmap=Playing.nowmap;
					}						
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery+3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;					
					}
				}
				else if(Playing.nowmap>=181 && Playing.nowmap<=209)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery+1][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+1][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+1;
						skmap=Playing.nowmap;
					}
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+2][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+2][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+2;
						skmap=Playing.nowmap;
					}						
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery+3][Player.playerx]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery+3][Player.playerx]=215;
						skx=Player.playerx;
						sky=Player.playery+3;
						skmap=Playing.nowmap;					
					}
				}
			}
			else if(Player.toward==3)
			{
				if(Playing.nowmap>=0 && Playing.nowmap<=30)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-1]=215;
						skx=Player.playerx-1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}		
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-2]=215;
						skx=Player.playerx-2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx-3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=31 && Playing.nowmap<=60)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-1]=215;
						skx=Player.playerx-1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}		
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-2]=215;
						skx=Player.playerx-2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx-3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=61 && Playing.nowmap<=90)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-1]=215;
						skx=Player.playerx-1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}		
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-2]=215;
						skx=Player.playerx-2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx-3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=91 && Playing.nowmap<=120)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-1]=215;
						skx=Player.playerx-1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}		
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-2]=215;
						skx=Player.playerx-2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx-3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=121 && Playing.nowmap<=150)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-1]=215;
						skx=Player.playerx-1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}		
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-2]=215;
						skx=Player.playerx-2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx-3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=151 && Playing.nowmap<=180)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-1]=215;
						skx=Player.playerx-1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}		
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-2]=215;
						skx=Player.playerx-2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx-3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=181 && Playing.nowmap<=209)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-1]=215;
						skx=Player.playerx-1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}		
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-2]=215;
						skx=Player.playerx-2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx-3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}						
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx-3]=215;
						skx=Player.playerx-3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
			}
			else if(Player.toward==4)
			{
				if(Playing.nowmap>=0 && Playing.nowmap<=30)
				{
					if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+1]=215;
						skx=Player.playerx+1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+2]=215;
						skx=Player.playerx+2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing.IsRun[Playing.nowmap][Player.playery][Player.playerx+3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=31 && Playing.nowmap<=60)
				{
					if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+1]=215;
						skx=Player.playerx+1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+2]=215;
						skx=Player.playerx+2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing1.IsRun[Playing.nowmap-31][Player.playery][Player.playerx+3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=61 && Playing.nowmap<=90)
				{
					if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+1]=215;
						skx=Player.playerx+1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+2]=215;
						skx=Player.playerx+2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing2.IsRun[Playing.nowmap-61][Player.playery][Player.playerx+3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=91 && Playing.nowmap<=120)
				{
					if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+1]=215;
						skx=Player.playerx+1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+2]=215;
						skx=Player.playerx+2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing3.IsRun[Playing.nowmap-91][Player.playery][Player.playerx+3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=121 && Playing.nowmap<=150)
				{
					if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+1]=215;
						skx=Player.playerx+1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+2]=215;
						skx=Player.playerx+2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing4.IsRun[Playing.nowmap-121][Player.playery][Player.playerx+3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=151 && Playing.nowmap<=180)
				{
					if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+1]=215;
						skx=Player.playerx+1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+2]=215;
						skx=Player.playerx+2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing5.IsRun[Playing.nowmap-151][Player.playery][Player.playerx+3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				else if(Playing.nowmap>=181 && Playing.nowmap<=209)
				{
					if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+1]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+1]=215;
						skx=Player.playerx+1;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+2]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+2]=215;
						skx=Player.playerx+2;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else if(Playing6.IsRun[Playing.nowmap-181][Player.playery][Player.playerx+3]==4)
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}	
					else
					{
						Playing.MapState[Playing.nowmap][Player.playery][Player.playerx+3]=215;
						skx=Player.playerx+3;
						sky=Player.playery;
						skmap=Playing.nowmap;
					}
				}
				
			}			
			
			PanelListenner.w.addKeyListener(plt);
			
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=5)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(4000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			Playing.MapState[skmap][sky][skx]=0;
		
			
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[5]=false;	
		}
		else if(index==216)
		{
			for(int i=0;i<9;i++)
			skillcd[i]=true;

		//	PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(2161);
			se.start();
			for(int i=0;i<15;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(40);
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}		
			PanelListenner.w.remove(t[0]);
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=6)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[6]=false;	
		}
		else if(index==217)
		{
			for(int i=0;i<9;i++)
			skillcd[i]=true;

		//	PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(2171);
			se.start();
			for(int i=0;i<11;i++)
			{
				t[0].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(50);
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}  
			}		
			PanelListenner.w.remove(t[0]);
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=7)
				skillcd[i]=false;
			}

			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[7]=false;	
		}
		else if(index==218)
		{
			int leftdv=432,rightdv=624,topdv=240,downdv=432;
			for(int i=0;i<9;i++)
			skillcd[i]=true;

		//	PanelListenner.w.removeKeyListener(plt);
			SEmusicbox se = new SEmusicbox(2181);
			se.start();
			for(int i=0;i<6;i++)
			{
				for(int j=0;j<4;j++)
				{
					t[j].setIcon(new ImageIcon(skill7[7+i]));
					if(j==0)
					t[j].setBounds(528, topdv++, 144, 144);
					else if(j==1)
					t[j].setBounds(528, downdv--, 144, 144);
					else if(j==2)
					t[j].setBounds(leftdv++, 336, 144, 144);
					else if(j==3)
					t[j].setBounds(rightdv--, 336, 144, 144);					
				}
				try {  
					Thread.sleep(5);
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				} 
				if(i==5)
				i=1;
				if(topdv==336)
				{
					for(int j=0;j<4;j++)
					PanelListenner.w.remove(t[j]);
					break;
				}
			}	
			t[4].setBounds(528, 336, 144, 144);
			PanelListenner.w.add(t[4],0);
			
			SEmusicbox se1 = new SEmusicbox(2182);
			se1.start();
			
			for(int i=0;i<2;i++)
			{
				t[4].setIcon(new ImageIcon(skill7[i]));
				try {  
					Thread.sleep(100);
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				} 				
			}
			skill218open=true;
			PanelListenner.w.remove(t[4]);
			
			PanelListenner.w.addKeyListener(plt);
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  

			for(int i=0;i<9;i++)
			{
				if(i!=8)
				skillcd[i]=false;
			}
			
			try {  
				Thread.sleep(10000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skill218open=false;
			
			try {  
				Thread.sleep(1000);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			skillcd[8]=false;	
		}	
		else if(index==1)
		{
			if(skill218open)
			{
				//SEmusicbox se = new SEmusicbox(2183);
				//se.start();
				for(int j=0;j<5;j++)
				{
					SEmusicbox se = new SEmusicbox(2183);
					se.start();
					/*
					if(Player.toward==1)
					{
						DamageDisplayByPlayer d = new DamageDisplayByPlayer(528,288,(int)PlayerAbilitySystem.playeratk,0);
						d.start();
					}
					else if(Player.toward==2)
					{
						DamageDisplayByPlayer d = new DamageDisplayByPlayer(528,384,(int)PlayerAbilitySystem.playeratk,0);
						d.start();
					}
					else if(Player.toward==3)
					{
						DamageDisplayByPlayer d = new DamageDisplayByPlayer(480,336,(int)PlayerAbilitySystem.playeratk,0);
						d.start();
					}
					else if(Player.toward==4)
					{
						DamageDisplayByPlayer d = new DamageDisplayByPlayer(576,336,(int)PlayerAbilitySystem.playeratk,0);
						d.start();
					}
					*/
					for(int i=0;i<17;i++)
					{
						t[0].setIcon(new ImageIcon(skill7[i]));
						try {  
							Thread.sleep(4);  
						} catch (InterruptedException e) {  
							e.printStackTrace();  
						}
					}
				}
			}
			else
			{
				int x=Player.playerx,y=Player.playery;
				if(Player.toward==1)
				y--;
				else if(Player.toward==2)
				y++;
				else if(Player.toward==3)
				x--;
				else if(Player.toward==4)
				x++;
				
				for(int i=0;i<Monster.monstercount && Monster.monsterset[Playing.nowmap];i++)
				{
					if(Monster.monsteractive[Playing.nowmap][i]==true && Monster.monster[Playing.nowmap][i][0]==x && Monster.monster[Playing.nowmap][i][1]==y)
					{
						MonsterInformationValue.monsternowmap=Playing.nowmap;
						MonsterInformationValue.monsteridx=i;
						Monster.monsterhp[Playing.nowmap][i]-=PlayerAbilitySystem.playeratk;
						monsterinfoshow(i,0);
						//.
						if(Monster.monsterhp[Playing.nowmap][i]<=0)
						{
							Design.playing.remove(Monster.monsterhpbar[Playing.nowmap][i]);
							monsterinfoclose();
						}
						//.
						
						//monsterinfoshow(i,0);
						
						//PanelListenner.w.add(Monster.monsterinfo);
						
						if(Player.toward==1)
						{
							DamageDisplayByPlayer d = new DamageDisplayByPlayer(528,288,(int)PlayerAbilitySystem.playeratk,0);
							d.start();
						}
						else if(Player.toward==2)
						{
							DamageDisplayByPlayer d = new DamageDisplayByPlayer(528,384,(int)PlayerAbilitySystem.playeratk,0);
							d.start();
						}
						else if(Player.toward==3)
						{
							DamageDisplayByPlayer d = new DamageDisplayByPlayer(480,336,(int)PlayerAbilitySystem.playeratk,0);
							d.start();
						}
						else if(Player.toward==4)
						{
							DamageDisplayByPlayer d = new DamageDisplayByPlayer(576,336,(int)PlayerAbilitySystem.playeratk,0);
							d.start();
						}
						
					}
					if(Monster.monsterhp[Playing.nowmap][i]<=0 && Monster.monsteractive[Playing.nowmap][i]==true)
					{
						Monster.monsteractive[Playing.nowmap][i]=false;
						Playing.playerexperience+=600;
						InventoryGoldArea.playercoin+=500;
	
						Playing.IsRun[Playing.nowmap][Monster.monster[Playing.nowmap][i][1]][Monster.monster[Playing.nowmap][i][0]]=1;
					}
				}
				//System.out.println(Playing.nowmap);
				attack=true;
			//	.
				SEmusicbox se = new SEmusicbox(6666);
				se.start();
				for(int i=0;i<4;i++)
				{
					t[0].setIcon(new ImageIcon(skill7[i]));
					try {  
						Thread.sleep(40);  
					} catch (InterruptedException e) {  
						e.printStackTrace();  
					}
				}
			}
			PanelListenner.w.addKeyListener(plt);
			
			
			
			PanelListenner.w.remove(t[0]);
			try {  
				Thread.sleep(540);  
			} catch (InterruptedException e) {  
				e.printStackTrace();  
			}  
			attack=false;

		}
		else if(index==0)                               //////////////////////////////
		{												////                      ////
			for(int i=0;i<15;i++)						////					  ////
			{											////					  ////
				t[0].setIcon(new ImageIcon(skill7[i])); //// 					  ////
				if(i==5 || i==6)						////                      ////
				{										////                      ////
					try {  								////                      ////
						Thread.sleep(120);  			////     Level Up的動畫  	  ////
					} catch (InterruptedException e) {  ////                      ////
						e.printStackTrace();  			////                      ////
					}									////                      ////
				}										////                      ////
				try {  									////                      ////
					Thread.sleep(120);  				////                      ////
				} catch (InterruptedException e) {  	////                      ////
					e.printStackTrace();  				//////////////////////////////
				}  
			}
			PanelListenner.w.remove(t[0]);
		}
		/*
        try {  
            Thread.sleep(time);  
        } catch (InterruptedException e) {  
            e.printStackTrace();  
        }  
		t.setIcon(new ImageIcon(thunder3));
        try {  
            Thread.sleep(time);  
        } catch (InterruptedException e) {  
            e.printStackTrace();  
        }  
		t.setIcon(new ImageIcon(thunder4));
        try {  
            Thread.sleep(time);  
        } catch (InterruptedException e) {  
            e.printStackTrace();  
        }  
		t.setIcon(new ImageIcon(thunder5));
        try {  
            Thread.sleep(time);  
        } catch (InterruptedException e) {  
            e.printStackTrace();  
        }  
        */
		

        
	}
	
	static void monsterinfoshow(int i,int state) {
		if(state==0)
		{
			if(Monster.monstertype[Playing.nowmap][i]==1)
			Monster.monsterinfo.monsternamearea.setText("Lv." + Monster.monsternowlv[Playing.nowmap][i] +" 幽魂鬼魔");
			else if(Monster.monstertype[Playing.nowmap][i]==2)
			Monster.monsterinfo.monsternamearea.setText("Lv." + Monster.monsternowlv[Playing.nowmap][i] +" 遨翅蝙蝠");
			else if(Monster.monstertype[Playing.nowmap][i]==3)
			Monster.monsterinfo.monsternamearea.setText("Lv." + Monster.monsternowlv[Playing.nowmap][i] +" 浮移水怪");
			else if(Monster.monstertype[Playing.nowmap][i]==4)
			Monster.monsterinfo.monsternamearea.setText("Lv." + Monster.monsternowlv[Playing.nowmap][i] +" 傲慢的蠻荒之王");
			else if(Monster.monstertype[Playing.nowmap][i]==5)
			Monster.monsterinfo.monsternamearea.setText("Lv." + Monster.monsternowlv[Playing.nowmap][i] +" 獨角之天鬼");
			else if(Monster.monstertype[Playing.nowmap][i]==6)
			Monster.monsterinfo.monsternamearea.setText("Lv." + Monster.monsternowlv[Playing.nowmap][i] +" 深淵僕人牛鬼");
			else if(Monster.monstertype[Playing.nowmap][i]==7)
			Monster.monsterinfo.monsternamearea.setText("Lv." + Monster.monsternowlv[Playing.nowmap][i] +" 野蠻的哥布林");
			else if(Monster.monstertype[Playing.nowmap][i]==8)
			Monster.monsterinfo.monsternamearea.setText("Lv." + Monster.monsternowlv[Playing.nowmap][i] +" 地獄使者波達");
//.
			Monster.monsterinfo.type=Monster.monstertype[Playing.nowmap][i];
			Monster.monsterinfo.healthpower.setMaximum(Monster.monstermaxhp[Playing.nowmap][i]);
			Monster.monsterinfo.healthpower.setValue(Monster.monsterhp[Playing.nowmap][i]);
		}	
		
		PanelListenner.w.add(Monster.monsterinfo);
		
	}
	
	static void monsterinfoclose() {
		PanelListenner.w.remove(Monster.monsterinfo);
	}
}


class DamageDisplayByPlayer extends Thread{
	int center,height,r;
	JLabel valuemodel = new JLabel("",SwingConstants.CENTER); 
	DamageDisplayByPlayer(int dx,int dy,int num,int state){
		valuemodel.setSize(100, 60);
		valuemodel.setText("" + num);
		valuemodel.setFont(new Font("",0,48));
		//valuemodel.setBackground(Color.WHITE);
		valuemodel.setBounds(dx-128, dy+48, 400, 60);
		height=dy+48;
		r=dy+48;
		center=dx;
		if(state==0)
		valuemodel.setForeground(Color.RED);
		else if(state==1)
		valuemodel.setForeground(Color.YELLOW);
		else if(state==2)
		valuemodel.setForeground(Color.GRAY);
		PanelListenner.w.add(valuemodel,0);
	}
	
	public void run() {
		while(r!=height-96)
		{
			valuemodel.setBounds(center-128, r--, 400, 60);
			try {
				Thread.sleep(3);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		PanelListenner.w.remove(valuemodel);
	}
	
}

class MonsterInformationValue extends JPanel{
	static BufferedImage bighead=null;
	static int type=1;
	static int monsternowmap=-1;
	static int monsteridx=-1;
	static MonsterNameArea monsternamearea = new MonsterNameArea();
	static HealthPowerWithMonster healthpower = new HealthPowerWithMonster();
	MonsterInformationValue(){
		super();
		this.setLayout(null);
		this.setOpaque(false);
		String s = "/monster/Monster1.jpg";
		URL url = getClass().getResource(s);
		try {
			bighead=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		monsternamearea.setBounds(0, 0, 300, 35);
		healthpower.setBounds(0, 35, 300, 35);
		
		this.add(monsternamearea);
		this.add(healthpower);
	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		if(type==1)
		g.drawImage(bighead, 300, 0, 440, 140, 280, 140, 420, 280, null);
		else if(type==2)
		g.drawImage(bighead, 300, 0, 440, 140, 0, 0, 140, 140, null);
		else if(type==3)
		g.drawImage(bighead, 300, 0, 440, 140, 140, 0, 280, 140, null);
		else if(type==4)
		g.drawImage(bighead, 300, 0, 440, 140, 420, 140, 560, 280, null);
		else if(type==5)
		g.drawImage(bighead, 300, 0, 440, 140, 0, 140, 140, 280, null);
		else if(type==6)
		g.drawImage(bighead, 300, 0, 440, 140, 420, 0, 560, 140, null);
		else if(type==7)
		g.drawImage(bighead, 300, 0, 440, 140, 280, 0, 420, 140, null);
		else if(type==8)
		g.drawImage(bighead, 300, 0, 440, 140, 140, 140, 280, 280, null);
		
	}
}

class MonsterNameArea extends JTextArea{
	MonsterNameArea(){
		super();
		this.setFocusable(false);
		this.setEditable(false);
		this.setFont(new Font("標楷體",0,30));
		this.setText(Playing.playername);
		this.setBorder(BorderFactory.createLineBorder(Color.black,1));
		//InformationPowerUpdate.playernamearea=this;
		//InformationPowerUpdate.setarea(this);
	}
}


class HealthPowerWithMonster extends JProgressBar{
	HealthPowerWithMonster(){
		super();
		this.setMinimum(0);
		//this.setMaximum((int)Playing.playermaxhp);
		//this.setValue(Playing.playernowhp);
		this.setBorderPainted(true);
		this.setBackground(new Color(255,255,255));
		this.setForeground(new Color(255,18,18));
		this.setFont(new Font("標楷體",0,20));
		this.setStringPainted(false);
		//this.setString(Playing.playernowhp + "／" + (int)Playing.playermaxhp);
		//this
	}
	
	@Override
	protected void paintComponent(Graphics g) {
	  Graphics2D g2d = (Graphics2D) g;
	  g2d.scale(-1, 1); //Flips over y-axis
	  g2d.translate(-getWidth(), 0); //Moves back to old position.
	  super.paintComponent(g2d);
	}
}

class ProgressbarUpdate extends Thread{
	static Model basis;
	static int preindex=1;
	static int index=2;
	static CardLayout modelcardlayout;
	static boolean st=false;
	ProgressbarUpdate(){
	EyeCatchImage.current=0;	
	}
	
	public void run() {
		String s;
		URL url;
		EyeCatchImage.progressbar.setValue(EyeCatchImage.current);
		s = "/BMap/map" + (Playing.nowmap+10) + ".png";
		url=getClass().getResource(s);
		try {
			Playing.BigMap=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		s = "/BMap/" + (Playing.nowmap+10) + "-2.png";
		url=getClass().getResource(s);
		try {
			Playing.TopBigMap=ImageIO.read(url);
		} catch (IOException e) {
			e.printStackTrace();
		}

		while(true)
		{
	        try {  
	            Thread.sleep(10);  
	        } catch (InterruptedException e) {  
	            e.printStackTrace();  
	        } 
	        EyeCatchImage.current++;
	        EyeCatchImage.progressbar.setValue(EyeCatchImage.current);
	        if(EyeCatchImage.current==100)
	        {
		        try {  
		            Thread.sleep(500);  
		        } catch (InterruptedException e) {  
		            e.printStackTrace();  
		        } 
		        
		        if(preindex!=index)
		        {
					BGMmusicbox.clip.close();
					//BGMmusicbox.clip.
					BGMmusicbox music = new BGMmusicbox(index);
					music.start();
					Clip clip;
					clip = BGMmusicbox.GetNowClip();
					FloatControl volumecontrol = (FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);
					volumecontrol.setValue(BGMmusicbox.bgmvalue);
					preindex=index;
					VoiceSetPanel.clip=BGMmusicbox.GetNowClip();
					VoiceSetPanel.volumecontrol = (FloatControl)VoiceSetPanel.clip.getControl(FloatControl.Type.MASTER_GAIN);
		        }
				break;
	        }
		}
		EyeCatchImage.current=0;
		modelcardlayout.show(basis, "c3");
		Design.playing.setFocusable(true);
		Design.playing.requestFocusInWindow();
		/*if(st==false)
		{*/
			Design.playing.initital();
			//st=true;
		//}
	}
	
	public static void setbasis(Model basis) {
		ProgressbarUpdate.basis = basis;
	}
	
	public static void setmodelcardlayout(CardLayout modelcardlayout) {
		ProgressbarUpdate.modelcardlayout = modelcardlayout;
	}
}
/*
class NPCTalk extends Thread{
	int index;
	NPCTalk(int index){
		this.index=index;
	}
	
	public void run() {
		
	}
}
*/
class InformationPowerUpdate extends Thread{
	static boolean start = false;
	static HealthPower hp;
	static MagicPower mp;
	static TiredPower tp;
	static ExperienceValue exp;
	static PlayerNameArea playernamearea;
	//static PlayerLevelArea playerlevelarea;
	static JLabel lastpoint;
	static JLabel idinfo;
	static JLabel careerinfo;
	static JLabel levelinfo;
	static JLabel hpinfo;
	static JLabel mpinfo;
	static JLabel tpinfo;
	static JLabel expinfo;
	static JLabel strinfo;
	static JLabel dexinfo;
	static JLabel vitinfo;
	static JLabel intinfo;
	static JLabel lukinfo;
	static JLabel atkinfo;
	static JLabel matkinfo;
	static JLabel definfo;
	static JLabel mdefinfo;
	static JLabel aarinfo;
	static JLabel sarinfo;
	static JLabel criinfo;
	static JLabel acriinfo;
	static JLabel cridamageinfo;
	static JLabel accinfo;
	static JLabel sacinfo;
	static JLabel blockinginfo;
	static JLabel pointshow1;
	static JLabel pointshow2;
	static JLabel pointshow3;	
	static JTextField playercoincount;
	//static JList list;
	//int rhp=255;
	//int ghp=18;
	//int bhp=18;
	InformationPowerUpdate(HealthPower hp,MagicPower mp,TiredPower tp){
		this.hp=hp;
		this.mp=mp;
		this.tp=tp;
	}
	
	public void run() {
		while(true)
		{
			for(int i=0;i<10;i++)
			{
				try {  
					Thread.sleep(10);  
				} catch (InterruptedException e) {  
					e.printStackTrace();  
				}
				if(start==true)
				{

				long t=InventoryGoldArea.playercoin;
				String s = "",tp=playercoincount.getText();
				if(t==0)
				s="0";
				else
				{
					int cnt=0;
					while(t!=0)
					{
						s = t%10 + s;
						t/=10;
						cnt++;
						if(t>=1 && cnt==3)
						{
							s = "," + s;
							cnt=0;
						}
					}
				}
				
				if(playercoincount!=null && !tp.equals(s))
				playercoincount.setText(s);
				idinfo.setText(Playing.playername);
				if(Playing.career==0)
				careerinfo.setText("見習生");
				else if(Playing.career==1) 
				careerinfo.setText("戰士");
				else if(Playing.career==3) 
				careerinfo.setText("法師");
				
				levelinfo.setText("" + Playing.playerlevel);
				hpinfo.setText("" + (int)Playing.playernowhp + "／" + (int)Playing.playermaxhp);
				mpinfo.setText("" + (int)Playing.playernowmp + "／" + (int)Playing.playermaxmp);
				tpinfo.setText("" + Playing.playernowtp + "／" + Playing.playermaxtp);
				expinfo.setText("" + Playing.playerexperience + "／" + Playing.demandexperience);
				lastpoint.setText("" + PlayerAbilitySystem.usablepoint);
				strinfo.setText((PlayerAbilitySystem.playerstr+PlayerAbilitySystem.externalstr) + " (" + PlayerAbilitySystem.playerstr + "+" + PlayerAbilitySystem.externalstr + ")");
				dexinfo.setText((PlayerAbilitySystem.playerdex+PlayerAbilitySystem.externaldex) + " (" + PlayerAbilitySystem.playerdex + "+" + PlayerAbilitySystem.externaldex + ")");
				vitinfo.setText((PlayerAbilitySystem.playervit+PlayerAbilitySystem.externalvit) + " (" + PlayerAbilitySystem.playervit + "+" + PlayerAbilitySystem.externalvit + ")");
				intinfo.setText((PlayerAbilitySystem.playerint+PlayerAbilitySystem.externalint) + " (" + PlayerAbilitySystem.playerint + "+" + PlayerAbilitySystem.externalint + ")");
				lukinfo.setText((PlayerAbilitySystem.playerluk+PlayerAbilitySystem.externalluk) + " (" + PlayerAbilitySystem.playerluk + "+" + PlayerAbilitySystem.externalluk + ")");
				atkinfo.setText("" + (int)PlayerAbilitySystem.playeratk);
				matkinfo.setText("" + (int)PlayerAbilitySystem.playermatk);
				definfo.setText("" + (int)PlayerAbilitySystem.playerdef);
				mdefinfo.setText("" + (int)PlayerAbilitySystem.playermdef);
				aarinfo.setText("" + PlayerAbilitySystem.playeraar/100 + "." + PlayerAbilitySystem.playeraar/10%10 + PlayerAbilitySystem.playeraar%10 + "%");
				sarinfo.setText("" + PlayerAbilitySystem.playersar/100 + "." + PlayerAbilitySystem.playersar/10%10 + PlayerAbilitySystem.playersar%10 + "%");
				criinfo.setText("" + PlayerAbilitySystem.playercri/100 + "." + PlayerAbilitySystem.playercri/10%10 + PlayerAbilitySystem.playercri%10 + "%");
				acriinfo.setText("" + "" + PlayerAbilitySystem.playeracri/100 + "." + PlayerAbilitySystem.playeracri/10%10 + PlayerAbilitySystem.playeracri%10 + "%");
				cridamageinfo.setText("" + PlayerAbilitySystem.playercridamage/100 + "." + PlayerAbilitySystem.playercridamage/10%10 + PlayerAbilitySystem.playercridamage%10 + "%");
				accinfo.setText("" + PlayerAbilitySystem.playeracc/100 + "." + PlayerAbilitySystem.playeracc/10%10 + PlayerAbilitySystem.playeracc%10 + "%");
				sacinfo.setText("" + PlayerAbilitySystem.playersac/100 + "." + PlayerAbilitySystem.playersac/10%10 + PlayerAbilitySystem.playersac%10 + "%");
				blockinginfo.setText("" + PlayerAbilitySystem.playerblocking/100 + "." + PlayerAbilitySystem.playerblocking/10%10 + PlayerAbilitySystem.playerblocking%10 + "%");
				}
				//if(Playing.playerlevel<=99)
				//Playing.playerexperience++;
				if(Playing.playerexperience>=Playing.demandexperience)
				{
					Playing.playerlevel++;
					
					SEmusicbox se = new SEmusicbox(1000);
					SkillImage skillimage = new SkillImage(0);
					se.start();
					skillimage.start();
					Playing.playerexperience = Playing.playerexperience-Playing.demandexperience;
					Playing.demandexperience = (int)(Playing.demandexperience*1.1);
					exp.setMaximum(Playing.demandexperience);
					PlayerAbilitySystem.usablepoint+=10;
					SkillPage.skillpoint++;
					pointshow1.setText("當前技能點數：" + SkillPage.skillpoint);
					pointshow2.setText("當前技能點數：" + SkillPage.skillpoint);
					pointshow3.setText("當前技能點數：" + SkillPage.skillpoint);
					playernamearea.setText("Lv." +  Playing.playerlevel + " " +Playing.playername);
				}
			}

	        //Playing.playernowhp--;
	        if(Playing.playernowhp==0)
	        {
	        	 Playing.playernowhp=(int)Playing.playermaxhp;
	        }
	   
	        hp.setValue(Playing.playernowhp);
			hp.setString(Playing.playernowhp + "／" + (int)Playing.playermaxhp);
			hp.setMaximum((int)Playing.playermaxhp);
			
	        mp.setValue(Playing.playernowmp);
			mp.setString(Playing.playernowmp + "／" + (int)Playing.playermaxmp);
			mp.setMaximum((int)Playing.playermaxmp);
			
	        tp.setValue(Playing.playernowtp);
			tp.setString(Playing.playernowtp + "／" + Playing.playermaxtp);
			//tp.setMaximum((int)Playing.playermaxhp);
			
			exp.setValue(Playing.playerexperience);
			exp.setString(Playing.playerexperience + "／" + Playing.demandexperience);
			//levelandplayernamearea.setText("Lv. " + Playing.playerlevel + "   " + Playing.playername);
			
		}
	}
	/*
	public static void setarea(LevelAndPlayerNameArea t) {
		levelandplayernamearea = t;
	}
	*/
	public static void setexperiencevalue(ExperienceValue t) {
		exp=t;
	}
	
	public static void setlastpoint(JLabel t) {
		lastpoint=t;
	}
	
	public static void setstrinfo(JLabel t) {
		strinfo=t;
	}
	
	public static void setdexinfo(JLabel t) {
		dexinfo=t;
	}
	
	public static void setvitinfo(JLabel t) {
		vitinfo=t;
	}
	
	public static void setintinfo(JLabel t) {
		intinfo=t;
	}
	
	public static void setlukinfo(JLabel t) {
		lukinfo=t;
	}
	
	public static void setatkinfo(JLabel t) {
		atkinfo=t;
	}
	
	public static void setmatkinfo(JLabel t) {
		matkinfo=t;
	}
	
	public static void setdefinfo(JLabel t) {
		definfo=t;
	}
	
	public static void setmdefinfo(JLabel t) {
		mdefinfo=t;
	}
	
	public static void setaarinfo(JLabel t) {
		aarinfo=t;
	}
	
	public static void setsarinfo(JLabel t) {
		sarinfo=t;
	}
	
	public static void setcriinfo(JLabel t) {
		criinfo=t;
	}
	
	public static void setacriinfo(JLabel t) {
		acriinfo=t;
	}
	
	public static void setcridamageinfo(JLabel t) {
		cridamageinfo=t;
	}
	
	public static void setaccinfo(JLabel t) {
		accinfo=t;
	}
	
	public static void setsacinfo(JLabel t) {
		sacinfo=t;
	}
	
	public static void setblockinginfo(JLabel t) {
		blockinginfo=t;
	}
	
	public static void setidinfo(JLabel t) {
		idinfo=t;
	}
	
	public static void setcareerinfo(JLabel t) {
		careerinfo=t;
	}
	
	public static void setlevelinfo(JLabel t) {
		levelinfo=t;
	}
	
	public static void sethpinfo(JLabel t) {
		hpinfo=t;
	}
	
	public static void setmpinfo(JLabel t) {
		mpinfo=t;
	}
	
	public static void settpinfo(JLabel t) {
		tpinfo=t;
	}
	
	public static void setexpinfo(JLabel t) {
		expinfo=t;
	}
}



public class Game{
	public static void main(String[] args) {
		int wid=1200,hei=768;
		GameUI UI=new GameUI(wid,hei);
	}
}